import e,{spawn as t}from"node:child_process";import n from"node:fs";var s="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function i(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}const o="--model gemini/gemini-2.5-pro-preview-05-06 --edit-format diff-fenced --chat-language English",r='--compress --remove-empty-lines --include "src/**/*.{ts,tsx},**/*.md"',a=5;var c,l={exports:{}};function u(){if(c)return l.exports;c=1;let e,t,n,{defineProperty:s,setPrototypeOf:i,create:o,keys:r}=Object,a="",{round:u,max:f}=Math,h=e=>{let t=/([a-f\d]{3,6})/i.exec(e)?.[1],n=t?.length,s=parseInt(6^n?3^n?"0":t[0]+t[0]+t[1]+t[1]+t[2]+t[2]:t,16);return[s>>16&255,s>>8&255,255&s]},d=(e,t,n)=>e^t||t^n?16+36*u(e/51)+6*u(t/51)+u(n/51):8>e?16:e>248?231:u(24*(e-8)/247)+232,p=e=>{let t,n,s,i,o;return 8>e?30+e:16>e?e-8+90:(232>e?(o=(e-=16)%36,t=(e/36|0)/5,n=(o/6|0)/5,s=o%6/5):t=n=s=(10*(e-232)+8)/255,i=2*f(t,n,s),i?30+(u(s)<<2|u(n)<<1|u(t))+(2^i?0:60):30)},m=(()=>{let n=e=>o.some((t=>e.test(t))),s=globalThis,i=s.process??{},o=i.argv??[],a=i.env??{},c=-1;try{e=","+r(a).join(",")}catch(e){a={},c=0}let l="FORCE_COLOR",u={false:0,0:0,1:1,2:2,3:3}[a[l]]??-1,f=l in a&&u||n(/^--color=?(true|always)?$/);return f&&(c=u),~c||(c=((n,s,i)=>(t=n.TERM,{"24bit":3,truecolor:3,ansi256:2,ansi:1}[n.COLORTERM]||(n.CI?/,GITHUB/.test(e)?3:1:s&&"dumb"!==t?i?3:/-256/.test(t)?2:1:0)))(a,!!a.PM2_HOME||a.NEXT_RUNTIME?.includes("edge")||!!i.stdout?.isTTY,"win32"===i.platform)),!u||a.NO_COLOR||n(/^--(no-color|color=(false|never))$/)?0:s.window?.chrome||f&&!c?3:c})(),g={open:a,close:a},y=39,b=49,w={},k=({p:e},{open:t,close:s})=>{let o=(e,...n)=>{if(!e){if(t&&t===s)return t;if((e??a)===a)return a}let i,r=e.raw?String.raw({raw:e},...n):a+e,c=o.p,l=c.o,u=c.c;if(r.includes(""))for(;c;c=c.p){let{open:e,close:t}=c,n=t.length,s=a,o=0;if(n)for(;~(i=r.indexOf(t,o));o=i+n)s+=r.slice(o,i)+e;r=s+r.slice(o)}return l+(r.includes("\n")?r.replace(/(\r?\n)/g,u+"$1"+l):r)+u},r=t,c=s;return e&&(r=e.o+t,c=s+e.c),i(o,n),o.p={open:t,close:s,o:r,c:c,p:e},o.open=r,o.close=c,o};const v=function(e=m){let t={Ansis:v,isSupported:()=>r,strip:e=>e.replace(/[Â›][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,a),extend(e){for(let t in e){let n=e[t],i=(typeof n)[0],o="s"===i?E(...h(n)):n;w[t]="f"===i?{get(){return(...e)=>k(this,n(...e))}}:{get(){let e=k(this,o);return s(this,t,{value:e}),e}}}return n=o({},w),i(t,n),t}},r=e>0,c=(e,t)=>r?{open:`[${e}m`,close:`[${t}m`}:g,l=e=>t=>e(...h(t)),u=(e,t)=>(n,s,i)=>c(`${e}8;2;${n};${s};${i}`,t),f=(e,t)=>(n,s,i)=>c(((e,t,n)=>p(d(e,t,n)))(n,s,i)+e,t),S=e=>(t,n,s)=>e(d(t,n,s)),E=u(3,y),N=u(4,b),O=e=>c("38;5;"+e,y),A=e=>c("48;5;"+e,b);2===e?(E=S(O),N=S(A)):1===e&&(E=f(0,y),N=f(10,b),O=e=>c(p(e),y),A=e=>c(p(e)+10,b));let I,T={fg:O,bg:A,rgb:E,bgRgb:N,hex:l(E),bgHex:l(N),visible:g,reset:c(0,0),bold:c(1,22),dim:c(2,22),italic:c(3,23),underline:c(4,24),inverse:c(7,27),hidden:c(8,28),strikethrough:c(9,29)},$="Bright";return"black,red,green,yellow,blue,magenta,cyan,white,gray".split(",").map(((e,t)=>{I="bg"+e[0].toUpperCase()+e.slice(1),8>t?(T[e+$]=c(90+t,y),T[I+$]=c(100+t,b)):t=60,T[e]=c(30+t,y),T[I]=c(40+t,b)})),t.extend(T)},S=new v;return l.exports=S,S.default=S,l.exports}var f=i(u());const{Ansis:h,fg:d,bg:p,rgb:m,bgRgb:g,hex:y,bgHex:b,reset:w,inverse:k,hidden:v,visible:S,bold:E,dim:N,italic:O,underline:A,strikethrough:I,black:T,red:$,green:x,yellow:L,blue:C,magenta:_,cyan:B,white:M,gray:K,redBright:j,greenBright:P,yellowBright:D,blueBright:q,magentaBright:R,cyanBright:U,whiteBright:F,bgBlack:G,bgRed:V,bgGreen:W,bgYellow:Y,bgBlue:J,bgMagenta:H,bgCyan:Q,bgWhite:X,bgGray:z,bgRedBright:Z,bgGreenBright:ee,bgYellowBright:te,bgBlueBright:ne,bgMagentaBright:se,bgCyanBright:ie,bgWhiteBright:oe}=f,re=Symbol.for("yaml.alias"),ae=Symbol.for("yaml.document"),ce=Symbol.for("yaml.map"),le=Symbol.for("yaml.pair"),ue=Symbol.for("yaml.scalar"),fe=Symbol.for("yaml.seq"),he=Symbol.for("yaml.node.type"),de=e=>!!e&&"object"==typeof e&&e[he]===re,pe=e=>!!e&&"object"==typeof e&&e[he]===ae,me=e=>!!e&&"object"==typeof e&&e[he]===ce,ge=e=>!!e&&"object"==typeof e&&e[he]===le,ye=e=>!!e&&"object"==typeof e&&e[he]===ue,be=e=>!!e&&"object"==typeof e&&e[he]===fe;function we(e){if(e&&"object"==typeof e)switch(e[he]){case ce:case fe:return!0}return!1}function ke(e){if(e&&"object"==typeof e)switch(e[he]){case re:case ce:case ue:case fe:return!0}return!1}const ve=e=>(ye(e)||we(e))&&!!e.anchor,Se=Symbol("break visit"),Ee=Symbol("skip children"),Ne=Symbol("remove node");function Oe(e,t){const n=$e(t);if(pe(e)){Ae(null,e.contents,n,Object.freeze([e]))===Ne&&(e.contents=null)}else Ae(null,e,n,Object.freeze([]))}function Ae(e,t,n,s){const i=xe(e,t,n,s);if(ke(i)||ge(i))return Le(e,s,i),Ae(e,i,n,s);if("symbol"!=typeof i)if(we(t)){s=Object.freeze(s.concat(t));for(let e=0;e<t.items.length;++e){const i=Ae(e,t.items[e],n,s);if("number"==typeof i)e=i-1;else{if(i===Se)return Se;i===Ne&&(t.items.splice(e,1),e-=1)}}}else if(ge(t)){s=Object.freeze(s.concat(t));const e=Ae("key",t.key,n,s);if(e===Se)return Se;e===Ne&&(t.key=null);const i=Ae("value",t.value,n,s);if(i===Se)return Se;i===Ne&&(t.value=null)}return i}async function Ie(e,t){const n=$e(t);if(pe(e)){await Te(null,e.contents,n,Object.freeze([e]))===Ne&&(e.contents=null)}else await Te(null,e,n,Object.freeze([]))}async function Te(e,t,n,s){const i=await xe(e,t,n,s);if(ke(i)||ge(i))return Le(e,s,i),Te(e,i,n,s);if("symbol"!=typeof i)if(we(t)){s=Object.freeze(s.concat(t));for(let e=0;e<t.items.length;++e){const i=await Te(e,t.items[e],n,s);if("number"==typeof i)e=i-1;else{if(i===Se)return Se;i===Ne&&(t.items.splice(e,1),e-=1)}}}else if(ge(t)){s=Object.freeze(s.concat(t));const e=await Te("key",t.key,n,s);if(e===Se)return Se;e===Ne&&(t.key=null);const i=await Te("value",t.value,n,s);if(i===Se)return Se;i===Ne&&(t.value=null)}return i}function $e(e){return"object"==typeof e&&(e.Collection||e.Node||e.Value)?Object.assign({Alias:e.Node,Map:e.Node,Scalar:e.Node,Seq:e.Node},e.Value&&{Map:e.Value,Scalar:e.Value,Seq:e.Value},e.Collection&&{Map:e.Collection,Seq:e.Collection},e):e}function xe(e,t,n,s){return"function"==typeof n?n(e,t,s):me(t)?n.Map?.(e,t,s):be(t)?n.Seq?.(e,t,s):ge(t)?n.Pair?.(e,t,s):ye(t)?n.Scalar?.(e,t,s):de(t)?n.Alias?.(e,t,s):void 0}function Le(e,t,n){const s=t[t.length-1];if(we(s))s.items[e]=n;else if(ge(s))"key"===e?s.key=n:s.value=n;else{if(!pe(s)){const e=de(s)?"alias":"scalar";throw new Error(`Cannot replace node with ${e} parent`)}s.contents=n}}Oe.BREAK=Se,Oe.SKIP=Ee,Oe.REMOVE=Ne,Ie.BREAK=Se,Ie.SKIP=Ee,Ie.REMOVE=Ne;const Ce={"!":"%21",",":"%2C","[":"%5B","]":"%5D","{":"%7B","}":"%7D"};class _e{constructor(e,t){this.docStart=null,this.docEnd=!1,this.yaml=Object.assign({},_e.defaultYaml,e),this.tags=Object.assign({},_e.defaultTags,t)}clone(){const e=new _e(this.yaml,this.tags);return e.docStart=this.docStart,e}atDocument(){const e=new _e(this.yaml,this.tags);switch(this.yaml.version){case"1.1":this.atNextDocument=!0;break;case"1.2":this.atNextDocument=!1,this.yaml={explicit:_e.defaultYaml.explicit,version:"1.2"},this.tags=Object.assign({},_e.defaultTags)}return e}add(e,t){this.atNextDocument&&(this.yaml={explicit:_e.defaultYaml.explicit,version:"1.1"},this.tags=Object.assign({},_e.defaultTags),this.atNextDocument=!1);const n=e.trim().split(/[ \t]+/),s=n.shift();switch(s){case"%TAG":{if(2!==n.length&&(t(0,"%TAG directive should contain exactly two parts"),n.length<2))return!1;const[e,s]=n;return this.tags[e]=s,!0}case"%YAML":{if(this.yaml.explicit=!0,1!==n.length)return t(0,"%YAML directive should contain exactly one part"),!1;const[e]=n;if("1.1"===e||"1.2"===e)return this.yaml.version=e,!0;return t(6,`Unsupported YAML version ${e}`,/^\d+\.\d+$/.test(e)),!1}default:return t(0,`Unknown directive ${s}`,!0),!1}}tagName(e,t){if("!"===e)return"!";if("!"!==e[0])return t(`Not a valid tag: ${e}`),null;if("<"===e[1]){const n=e.slice(2,-1);return"!"===n||"!!"===n?(t(`Verbatim tags aren't resolved, so ${e} is invalid.`),null):(">"!==e[e.length-1]&&t("Verbatim tags must end with a >"),n)}const[,n,s]=e.match(/^(.*!)([^!]*)$/s);s||t(`The ${e} tag has no suffix`);const i=this.tags[n];if(i)try{return i+decodeURIComponent(s)}catch(e){return t(String(e)),null}return"!"===n?e:(t(`Could not resolve tag: ${e}`),null)}tagString(e){for(const[t,n]of Object.entries(this.tags))if(e.startsWith(n))return t+e.substring(n.length).replace(/[!,[\]{}]/g,(e=>Ce[e]));return"!"===e[0]?e:`!<${e}>`}toString(e){const t=this.yaml.explicit?[`%YAML ${this.yaml.version||"1.2"}`]:[],n=Object.entries(this.tags);let s;if(e&&n.length>0&&ke(e.contents)){const t={};Oe(e.contents,((e,n)=>{ke(n)&&n.tag&&(t[n.tag]=!0)})),s=Object.keys(t)}else s=[];for(const[i,o]of n)"!!"===i&&"tag:yaml.org,2002:"===o||e&&!s.some((e=>e.startsWith(o)))||t.push(`%TAG ${i} ${o}`);return t.join("\n")}}function Be(e){if(/[\x00-\x19\s,[\]{}]/.test(e)){const t=JSON.stringify(e);throw new Error(`Anchor must not contain whitespace or control characters: ${t}`)}return!0}function Me(e){const t=new Set;return Oe(e,{Value(e,n){n.anchor&&t.add(n.anchor)}}),t}function Ke(e,t){for(let n=1;;++n){const s=`${e}${n}`;if(!t.has(s))return s}}function je(e,t,n,s){if(s&&"object"==typeof s)if(Array.isArray(s))for(let t=0,n=s.length;t<n;++t){const n=s[t],i=je(e,s,String(t),n);void 0===i?delete s[t]:i!==n&&(s[t]=i)}else if(s instanceof Map)for(const t of Array.from(s.keys())){const n=s.get(t),i=je(e,s,t,n);void 0===i?s.delete(t):i!==n&&s.set(t,i)}else if(s instanceof Set)for(const t of Array.from(s)){const n=je(e,s,t,t);void 0===n?s.delete(t):n!==t&&(s.delete(t),s.add(n))}else for(const[t,n]of Object.entries(s)){const i=je(e,s,t,n);void 0===i?delete s[t]:i!==n&&(s[t]=i)}return e.call(t,n,s)}function Pe(e,t,n){if(Array.isArray(e))return e.map(((e,t)=>Pe(e,String(t),n)));if(e&&"function"==typeof e.toJSON){if(!n||!ve(e))return e.toJSON(t,n);const s={aliasCount:0,count:1,res:void 0};n.anchors.set(e,s),n.onCreate=e=>{s.res=e,delete n.onCreate};const i=e.toJSON(t,n);return n.onCreate&&n.onCreate(i),i}return"bigint"!=typeof e||n?.keep?e:Number(e)}_e.defaultYaml={explicit:!1,version:"1.2"},_e.defaultTags={"!!":"tag:yaml.org,2002:"};class De{constructor(e){Object.defineProperty(this,he,{value:e})}clone(){const e=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return this.range&&(e.range=this.range.slice()),e}toJS(e,{mapAsMap:t,maxAliasCount:n,onAnchor:s,reviver:i}={}){if(!pe(e))throw new TypeError("A document argument is required");const o={anchors:new Map,doc:e,keep:!0,mapAsMap:!0===t,mapKeyWarned:!1,maxAliasCount:"number"==typeof n?n:100},r=Pe(this,"",o);if("function"==typeof s)for(const{count:e,res:t}of o.anchors.values())s(t,e);return"function"==typeof i?je(i,{"":r},"",r):r}}class qe extends De{constructor(e){super(re),this.source=e,Object.defineProperty(this,"tag",{set(){throw new Error("Alias nodes cannot have tags")}})}resolve(e,t){let n,s;t?.aliasResolveCache?n=t.aliasResolveCache:(n=[],Oe(e,{Node:(e,t)=>{(de(t)||ve(t))&&n.push(t)}}),t&&(t.aliasResolveCache=n));for(const e of n){if(e===this)break;e.anchor===this.source&&(s=e)}return s}toJSON(e,t){if(!t)return{source:this.source};const{anchors:n,doc:s,maxAliasCount:i}=t,o=this.resolve(s,t);if(!o){const e=`Unresolved alias (the anchor must be set before the alias): ${this.source}`;throw new ReferenceError(e)}let r=n.get(o);if(r||(Pe(o,null,t),r=n.get(o)),!r||void 0===r.res){throw new ReferenceError("This should not happen: Alias anchor was not resolved?")}if(i>=0&&(r.count+=1,0===r.aliasCount&&(r.aliasCount=Re(s,o,n)),r.count*r.aliasCount>i)){throw new ReferenceError("Excessive alias count indicates a resource exhaustion attack")}return r.res}toString(e,t,n){const s=`*${this.source}`;if(e){if(Be(this.source),e.options.verifyAliasOrder&&!e.anchors.has(this.source)){const e=`Unresolved alias (the anchor must be set before the alias): ${this.source}`;throw new Error(e)}if(e.implicitKey)return`${s} `}return s}}function Re(e,t,n){if(de(t)){const s=t.resolve(e),i=n&&s&&n.get(s);return i?i.count*i.aliasCount:0}if(we(t)){let s=0;for(const i of t.items){const t=Re(e,i,n);t>s&&(s=t)}return s}if(ge(t)){const s=Re(e,t.key,n),i=Re(e,t.value,n);return Math.max(s,i)}return 1}const Ue=e=>!e||"function"!=typeof e&&"object"!=typeof e;class Fe extends De{constructor(e){super(ue),this.value=e}toJSON(e,t){return t?.keep?this.value:Pe(this.value,e,t)}toString(){return String(this.value)}}Fe.BLOCK_FOLDED="BLOCK_FOLDED",Fe.BLOCK_LITERAL="BLOCK_LITERAL",Fe.PLAIN="PLAIN",Fe.QUOTE_DOUBLE="QUOTE_DOUBLE",Fe.QUOTE_SINGLE="QUOTE_SINGLE";function Ge(e,t,n){if(pe(e)&&(e=e.contents),ke(e))return e;if(ge(e)){const t=n.schema[ce].createNode?.(n.schema,null,n);return t.items.push(e),t}(e instanceof String||e instanceof Number||e instanceof Boolean||"undefined"!=typeof BigInt&&e instanceof BigInt)&&(e=e.valueOf());const{aliasDuplicateObjects:s,onAnchor:i,onTagObj:o,schema:r,sourceObjects:a}=n;let c;if(s&&e&&"object"==typeof e){if(c=a.get(e),c)return c.anchor??(c.anchor=i(e)),new qe(c.anchor);c={anchor:null,node:null},a.set(e,c)}t?.startsWith("!!")&&(t="tag:yaml.org,2002:"+t.slice(2));let l=function(e,t,n){if(t){const e=n.filter((e=>e.tag===t)),s=e.find((e=>!e.format))??e[0];if(!s)throw new Error(`Tag ${t} not found`);return s}return n.find((t=>t.identify?.(e)&&!t.format))}(e,t,r.tags);if(!l){if(e&&"function"==typeof e.toJSON&&(e=e.toJSON()),!e||"object"!=typeof e){const t=new Fe(e);return c&&(c.node=t),t}l=e instanceof Map?r[ce]:Symbol.iterator in Object(e)?r[fe]:r[ce]}o&&(o(l),delete n.onTagObj);const u=l?.createNode?l.createNode(n.schema,e,n):"function"==typeof l?.nodeClass?.from?l.nodeClass.from(n.schema,e,n):new Fe(e);return t?u.tag=t:l.default||(u.tag=l.tag),c&&(c.node=u),u}function Ve(e,t,n){let s=n;for(let e=t.length-1;e>=0;--e){const n=t[e];if("number"==typeof n&&Number.isInteger(n)&&n>=0){const e=[];e[n]=s,s=e}else s=new Map([[n,s]])}return Ge(s,void 0,{aliasDuplicateObjects:!1,keepUndefined:!1,onAnchor:()=>{throw new Error("This should not happen, please report a bug.")},schema:e,sourceObjects:new Map})}const We=e=>null==e||"object"==typeof e&&!!e[Symbol.iterator]().next().done;class Ye extends De{constructor(e,t){super(e),Object.defineProperty(this,"schema",{value:t,configurable:!0,enumerable:!1,writable:!0})}clone(e){const t=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return e&&(t.schema=e),t.items=t.items.map((t=>ke(t)||ge(t)?t.clone(e):t)),this.range&&(t.range=this.range.slice()),t}addIn(e,t){if(We(e))this.add(t);else{const[n,...s]=e,i=this.get(n,!0);if(we(i))i.addIn(s,t);else{if(void 0!==i||!this.schema)throw new Error(`Expected YAML collection at ${n}. Remaining path: ${s}`);this.set(n,Ve(this.schema,s,t))}}}deleteIn(e){const[t,...n]=e;if(0===n.length)return this.delete(t);const s=this.get(t,!0);if(we(s))return s.deleteIn(n);throw new Error(`Expected YAML collection at ${t}. Remaining path: ${n}`)}getIn(e,t){const[n,...s]=e,i=this.get(n,!0);return 0===s.length?!t&&ye(i)?i.value:i:we(i)?i.getIn(s,t):void 0}hasAllNullValues(e){return this.items.every((t=>{if(!ge(t))return!1;const n=t.value;return null==n||e&&ye(n)&&null==n.value&&!n.commentBefore&&!n.comment&&!n.tag}))}hasIn(e){const[t,...n]=e;if(0===n.length)return this.has(t);const s=this.get(t,!0);return!!we(s)&&s.hasIn(n)}setIn(e,t){const[n,...s]=e;if(0===s.length)this.set(n,t);else{const e=this.get(n,!0);if(we(e))e.setIn(s,t);else{if(void 0!==e||!this.schema)throw new Error(`Expected YAML collection at ${n}. Remaining path: ${s}`);this.set(n,Ve(this.schema,s,t))}}}}const Je=e=>e.replace(/^(?!$)(?: $)?/gm,"#");function He(e,t){return/^\n+$/.test(e)?e.substring(1):t?e.replace(/^(?! *$)/gm,t):e}const Qe=(e,t,n)=>e.endsWith("\n")?He(n,t):n.includes("\n")?"\n"+He(n,t):(e.endsWith(" ")?"":" ")+n,Xe="flow",ze="block",Ze="quoted";function et(e,t,n="flow",{indentAtStart:s,lineWidth:i=80,minContentWidth:o=20,onFold:r,onOverflow:a}={}){if(!i||i<0)return e;i<o&&(o=0);const c=Math.max(1+o,1+i-t.length);if(e.length<=c)return e;const l=[],u={};let f,h,d=i-t.length;"number"==typeof s&&(s>i-Math.max(2,o)?l.push(0):d=i-s);let p=!1,m=-1,g=-1,y=-1;n===ze&&(m=tt(e,m,t.length),-1!==m&&(d=m+c));for(let s;s=e[m+=1];){if(n===Ze&&"\\"===s){switch(g=m,e[m+1]){case"x":m+=3;break;case"u":m+=5;break;case"U":m+=9;break;default:m+=1}y=m}if("\n"===s)n===ze&&(m=tt(e,m,t.length)),d=m+t.length+c,f=void 0;else{if(" "===s&&h&&" "!==h&&"\n"!==h&&"\t"!==h){const t=e[m+1];t&&" "!==t&&"\n"!==t&&"\t"!==t&&(f=m)}if(m>=d)if(f)l.push(f),d=f+c,f=void 0;else if(n===Ze){for(;" "===h||"\t"===h;)h=s,s=e[m+=1],p=!0;const t=m>y+1?m-2:g-1;if(u[t])return e;l.push(t),u[t]=!0,d=t+c,f=void 0}else p=!0}h=s}if(p&&a&&a(),0===l.length)return e;r&&r();let b=e.slice(0,l[0]);for(let s=0;s<l.length;++s){const i=l[s],o=l[s+1]||e.length;0===i?b=`\n${t}${e.slice(0,o)}`:(n===Ze&&u[i]&&(b+=`${e[i]}\\`),b+=`\n${t}${e.slice(i+1,o)}`)}return b}function tt(e,t,n){let s=t,i=t+1,o=e[i];for(;" "===o||"\t"===o;)if(t<i+n)o=e[++t];else{do{o=e[++t]}while(o&&"\n"!==o);s=t,i=t+1,o=e[i]}return s}const nt=(e,t)=>({indentAtStart:t?e.indent.length:e.indentAtStart,lineWidth:e.options.lineWidth,minContentWidth:e.options.minContentWidth}),st=e=>/^(%|---|\.\.\.)/m.test(e);function it(e,t){const n=JSON.stringify(e);if(t.options.doubleQuotedAsJSON)return n;const{implicitKey:s}=t,i=t.options.doubleQuotedMinMultiLineLength,o=t.indent||(st(e)?"  ":"");let r="",a=0;for(let e=0,t=n[e];t;t=n[++e])if(" "===t&&"\\"===n[e+1]&&"n"===n[e+2]&&(r+=n.slice(a,e)+"\\ ",e+=1,a=e,t="\\"),"\\"===t)switch(n[e+1]){case"u":{r+=n.slice(a,e);const t=n.substr(e+2,4);switch(t){case"0000":r+="\\0";break;case"0007":r+="\\a";break;case"000b":r+="\\v";break;case"001b":r+="\\e";break;case"0085":r+="\\N";break;case"00a0":r+="\\_";break;case"2028":r+="\\L";break;case"2029":r+="\\P";break;default:"00"===t.substr(0,2)?r+="\\x"+t.substr(2):r+=n.substr(e,6)}e+=5,a=e+1}break;case"n":if(s||'"'===n[e+2]||n.length<i)e+=1;else{for(r+=n.slice(a,e)+"\n\n";"\\"===n[e+2]&&"n"===n[e+3]&&'"'!==n[e+4];)r+="\n",e+=2;r+=o," "===n[e+2]&&(r+="\\"),e+=1,a=e+1}break;default:e+=1}return r=a?r+n.slice(a):n,s?r:et(r,o,Ze,nt(t,!1))}function ot(e,t){if(!1===t.options.singleQuote||t.implicitKey&&e.includes("\n")||/[ \t]\n|\n[ \t]/.test(e))return it(e,t);const n=t.indent||(st(e)?"  ":""),s="'"+e.replace(/'/g,"''").replace(/\n+/g,`$&\n${n}`)+"'";return t.implicitKey?s:et(s,n,Xe,nt(t,!1))}function rt(e,t){const{singleQuote:n}=t.options;let s;if(!1===n)s=it;else{const t=e.includes('"'),i=e.includes("'");s=t&&!i?ot:i&&!t?it:n?ot:it}return s(e,t)}let at;try{at=new RegExp("(^|(?<!\n))\n+(?!\n|$)","g")}catch{at=/\n+(?!\n|$)/g}function ct({comment:e,type:t,value:n},s,i,o){const{blockQuote:r,commentString:a,lineWidth:c}=s.options;if(!r||/\n[\t ]+$/.test(n)||/^\s*$/.test(n))return rt(n,s);const l=s.indent||(s.forceBlockIndent||st(n)?"  ":""),u="literal"===r||"folded"!==r&&t!==Fe.BLOCK_FOLDED&&(t===Fe.BLOCK_LITERAL||!function(e,t,n){if(!t||t<0)return!1;const s=t-n,i=e.length;if(i<=s)return!1;for(let t=0,n=0;t<i;++t)if("\n"===e[t]){if(t-n>s)return!0;if(n=t+1,i-n<=s)return!1}return!0}(n,c,l.length));if(!n)return u?"|\n":">\n";let f,h;for(h=n.length;h>0;--h){const e=n[h-1];if("\n"!==e&&"\t"!==e&&" "!==e)break}let d=n.substring(h);const p=d.indexOf("\n");-1===p?f="-":n===d||p!==d.length-1?(f="+",o&&o()):f="",d&&(n=n.slice(0,-d.length),"\n"===d[d.length-1]&&(d=d.slice(0,-1)),d=d.replace(at,`$&${l}`));let m,g=!1,y=-1;for(m=0;m<n.length;++m){const e=n[m];if(" "===e)g=!0;else{if("\n"!==e)break;y=m}}let b=n.substring(0,y<m?y+1:m);b&&(n=n.substring(b.length),b=b.replace(/\n+/g,`$&${l}`));let w=(g?l?"2":"1":"")+f;if(e&&(w+=" "+a(e.replace(/ ?[\r\n]+/g," ")),i&&i()),!u){const e=n.replace(/\n+/g,"\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g,"$1$2").replace(/\n+/g,`$&${l}`);let i=!1;const o=nt(s,!0);"folded"!==r&&t!==Fe.BLOCK_FOLDED&&(o.onOverflow=()=>{i=!0});const a=et(`${b}${e}${d}`,l,ze,o);if(!i)return`>${w}\n${l}${a}`}return`|${w}\n${l}${b}${n=n.replace(/\n+/g,`$&${l}`)}${d}`}function lt(e,t,n,s){const{implicitKey:i,inFlow:o}=t,r="string"==typeof e.value?e:Object.assign({},e,{value:String(e.value)});let{type:a}=e;a!==Fe.QUOTE_DOUBLE&&/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(r.value)&&(a=Fe.QUOTE_DOUBLE);const c=e=>{switch(e){case Fe.BLOCK_FOLDED:case Fe.BLOCK_LITERAL:return i||o?rt(r.value,t):ct(r,t,n,s);case Fe.QUOTE_DOUBLE:return it(r.value,t);case Fe.QUOTE_SINGLE:return ot(r.value,t);case Fe.PLAIN:return function(e,t,n,s){const{type:i,value:o}=e,{actualString:r,implicitKey:a,indent:c,indentStep:l,inFlow:u}=t;if(a&&o.includes("\n")||u&&/[[\]{},]/.test(o))return rt(o,t);if(/^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(o))return a||u||!o.includes("\n")?rt(o,t):ct(e,t,n,s);if(!a&&!u&&i!==Fe.PLAIN&&o.includes("\n"))return ct(e,t,n,s);if(st(o)){if(""===c)return t.forceBlockIndent=!0,ct(e,t,n,s);if(a&&c===l)return rt(o,t)}const f=o.replace(/\n+/g,`$&\n${c}`);if(r){const e=e=>e.default&&"tag:yaml.org,2002:str"!==e.tag&&e.test?.test(f),{compat:n,tags:s}=t.doc.schema;if(s.some(e)||n?.some(e))return rt(o,t)}return a?f:et(f,c,Xe,nt(t,!1))}(r,t,n,s);default:return null}};let l=c(a);if(null===l){const{defaultKeyType:e,defaultStringType:n}=t.options,s=i&&e||n;if(l=c(s),null===l)throw new Error(`Unsupported default string type ${s}`)}return l}function ut(e,t){const n=Object.assign({blockQuote:!0,commentString:Je,defaultKeyType:null,defaultStringType:"PLAIN",directives:null,doubleQuotedAsJSON:!1,doubleQuotedMinMultiLineLength:40,falseStr:"false",flowCollectionPadding:!0,indentSeq:!0,lineWidth:80,minContentWidth:20,nullStr:"null",simpleKeys:!1,singleQuote:null,trueStr:"true",verifyAliasOrder:!0},e.schema.toStringOptions,t);let s;switch(n.collectionStyle){case"block":s=!1;break;case"flow":s=!0;break;default:s=null}return{anchors:new Set,doc:e,flowCollectionPadding:n.flowCollectionPadding?" ":"",indent:"",indentStep:"number"==typeof n.indent?" ".repeat(n.indent):"  ",inFlow:s,options:n}}function ft(e,t,n,s){if(ge(e))return e.toString(t,n,s);if(de(e)){if(t.doc.directives)return e.toString(t);if(t.resolvedAliases?.has(e))throw new TypeError("Cannot stringify circular structure without alias nodes");t.resolvedAliases?t.resolvedAliases.add(e):t.resolvedAliases=new Set([e]),e=e.resolve(t.doc)}let i;const o=ke(e)?e:t.doc.createNode(e,{onTagObj:e=>i=e});i??(i=function(e,t){if(t.tag){const n=e.filter((e=>e.tag===t.tag));if(n.length>0)return n.find((e=>e.format===t.format))??n[0]}let n,s;if(ye(t)){s=t.value;let i=e.filter((e=>e.identify?.(s)));if(i.length>1){const e=i.filter((e=>e.test));e.length>0&&(i=e)}n=i.find((e=>e.format===t.format))??i.find((e=>!e.format))}else s=t,n=e.find((e=>e.nodeClass&&s instanceof e.nodeClass));if(!n)throw new Error(`Tag not resolved for ${s?.constructor?.name??(null===s?"null":typeof s)} value`);return n}(t.doc.schema.tags,o));const r=function(e,t,{anchors:n,doc:s}){if(!s.directives)return"";const i=[],o=(ye(e)||we(e))&&e.anchor;o&&Be(o)&&(n.add(o),i.push(`&${o}`));const r=e.tag??(t.default?null:t.tag);return r&&i.push(s.directives.tagString(r)),i.join(" ")}(o,i,t);r.length>0&&(t.indentAtStart=(t.indentAtStart??0)+r.length+1);const a="function"==typeof i.stringify?i.stringify(o,t,n,s):ye(o)?lt(o,t,n,s):o.toString(t,n,s);return r?ye(o)||"{"===a[0]||"["===a[0]?`${r} ${a}`:`${r}\n${t.indent}${a}`:a}function ht(e,t){"debug"!==e&&"warn"!==e||console.warn(t)}const dt="<<",pt={identify:e=>e===dt||"symbol"==typeof e&&e.description===dt,default:"key",tag:"tag:yaml.org,2002:merge",test:/^<<$/,resolve:()=>Object.assign(new Fe(Symbol(dt)),{addToJSMap:mt}),stringify:()=>dt};function mt(e,t,n){if(n=e&&de(n)?n.resolve(e.doc):n,be(n))for(const s of n.items)gt(e,t,s);else if(Array.isArray(n))for(const s of n)gt(e,t,s);else gt(e,t,n)}function gt(e,t,n){const s=e&&de(n)?n.resolve(e.doc):n;if(!me(s))throw new Error("Merge sources must be maps or map aliases");const i=s.toJSON(null,e,Map);for(const[e,n]of i)t instanceof Map?t.has(e)||t.set(e,n):t instanceof Set?t.add(e):Object.prototype.hasOwnProperty.call(t,e)||Object.defineProperty(t,e,{value:n,writable:!0,enumerable:!0,configurable:!0});return t}function yt(e,t,{key:n,value:s}){if(ke(n)&&n.addToJSMap)n.addToJSMap(e,t,s);else if(((e,t)=>(pt.identify(t)||ye(t)&&(!t.type||t.type===Fe.PLAIN)&&pt.identify(t.value))&&e?.doc.schema.tags.some((e=>e.tag===pt.tag&&e.default)))(e,n))mt(e,t,s);else{const i=Pe(n,"",e);if(t instanceof Map)t.set(i,Pe(s,i,e));else if(t instanceof Set)t.add(i);else{const o=function(e,t,n){if(null===t)return"";if("object"!=typeof t)return String(t);if(ke(e)&&n?.doc){const t=ut(n.doc,{});t.anchors=new Set;for(const e of n.anchors.keys())t.anchors.add(e.anchor);t.inFlow=!0,t.inStringifyKey=!0;const s=e.toString(t);if(!n.mapKeyWarned){let e=JSON.stringify(s);e.length>40&&(e=e.substring(0,36)+'..."'),ht(n.doc.options.logLevel,`Keys with collection values will be stringified due to JS Object restrictions: ${e}. Set mapAsMap: true to use object keys.`),n.mapKeyWarned=!0}return s}return JSON.stringify(t)}(n,i,e),r=Pe(s,o,e);o in t?Object.defineProperty(t,o,{value:r,writable:!0,enumerable:!0,configurable:!0}):t[o]=r}}return t}function bt(e,t,n){const s=Ge(e,void 0,n),i=Ge(t,void 0,n);return new wt(s,i)}class wt{constructor(e,t=null){Object.defineProperty(this,he,{value:le}),this.key=e,this.value=t}clone(e){let{key:t,value:n}=this;return ke(t)&&(t=t.clone(e)),ke(n)&&(n=n.clone(e)),new wt(t,n)}toJSON(e,t){return yt(t,t?.mapAsMap?new Map:{},this)}toString(e,t,n){return e?.doc?function({key:e,value:t},n,s,i){const{allNullValues:o,doc:r,indent:a,indentStep:c,options:{commentString:l,indentSeq:u,simpleKeys:f}}=n;let h=ke(e)&&e.comment||null;if(f){if(h)throw new Error("With simple keys, key nodes cannot have comments");if(we(e)||!ke(e)&&"object"==typeof e)throw new Error("With simple keys, collection cannot be used as a key value")}let d=!f&&(!e||h&&null==t&&!n.inFlow||we(e)||(ye(e)?e.type===Fe.BLOCK_FOLDED||e.type===Fe.BLOCK_LITERAL:"object"==typeof e));n=Object.assign({},n,{allNullValues:!1,implicitKey:!d&&(f||!o),indent:a+c});let p,m,g,y=!1,b=!1,w=ft(e,n,(()=>y=!0),(()=>b=!0));if(!d&&!n.inFlow&&w.length>1024){if(f)throw new Error("With simple keys, single line scalar must not span more than 1024 characters");d=!0}if(n.inFlow){if(o||null==t)return y&&s&&s(),""===w?"?":d?`? ${w}`:w}else if(o&&!f||null==t&&d)return w=`? ${w}`,h&&!y?w+=Qe(w,n.indent,l(h)):b&&i&&i(),w;y&&(h=null),d?(h&&(w+=Qe(w,n.indent,l(h))),w=`? ${w}\n${a}:`):(w=`${w}:`,h&&(w+=Qe(w,n.indent,l(h)))),ke(t)?(p=!!t.spaceBefore,m=t.commentBefore,g=t.comment):(p=!1,m=null,g=null,t&&"object"==typeof t&&(t=r.createNode(t))),n.implicitKey=!1,d||h||!ye(t)||(n.indentAtStart=w.length+1),b=!1,u||!(c.length>=2)||n.inFlow||d||!be(t)||t.flow||t.tag||t.anchor||(n.indent=n.indent.substring(2));let k=!1;const v=ft(t,n,(()=>k=!0),(()=>b=!0));let S=" ";if(h||p||m)S=p?"\n":"",m&&(S+=`\n${He(l(m),n.indent)}`),""!==v||n.inFlow?S+=`\n${n.indent}`:"\n"===S&&(S="\n\n");else if(!d&&we(t)){const e=v[0],s=v.indexOf("\n"),i=-1!==s,o=n.inFlow??t.flow??0===t.items.length;if(i||!o){let t=!1;if(i&&("&"===e||"!"===e)){let n=v.indexOf(" ");"&"===e&&-1!==n&&n<s&&"!"===v[n+1]&&(n=v.indexOf(" ",n+1)),(-1===n||s<n)&&(t=!0)}t||(S=`\n${n.indent}`)}}else""!==v&&"\n"!==v[0]||(S="");return w+=S+v,n.inFlow?k&&s&&s():g&&!k?w+=Qe(w,n.indent,l(g)):b&&i&&i(),w}(this,e,t,n):JSON.stringify(this)}}function kt(e,t,n){return(t.inFlow??e.flow?St:vt)(e,t,n)}function vt({comment:e,items:t},n,{blockItemPrefix:s,flowChars:i,itemIndent:o,onChompKeep:r,onComment:a}){const{indent:c,options:{commentString:l}}=n,u=Object.assign({},n,{indent:o,type:null});let f=!1;const h=[];for(let e=0;e<t.length;++e){const i=t[e];let r=null;if(ke(i))!f&&i.spaceBefore&&h.push(""),Et(n,h,i.commentBefore,f),i.comment&&(r=i.comment);else if(ge(i)){const e=ke(i.key)?i.key:null;e&&(!f&&e.spaceBefore&&h.push(""),Et(n,h,e.commentBefore,f))}f=!1;let a=ft(i,u,(()=>r=null),(()=>f=!0));r&&(a+=Qe(a,o,l(r))),f&&r&&(f=!1),h.push(s+a)}let d;if(0===h.length)d=i.start+i.end;else{d=h[0];for(let e=1;e<h.length;++e){const t=h[e];d+=t?`\n${c}${t}`:"\n"}}return e?(d+="\n"+He(l(e),c),a&&a()):f&&r&&r(),d}function St({items:e},t,{flowChars:n,itemIndent:s}){const{indent:i,indentStep:o,flowCollectionPadding:r,options:{commentString:a}}=t;s+=o;const c=Object.assign({},t,{indent:s,inFlow:!0,type:null});let l=!1,u=0;const f=[];for(let n=0;n<e.length;++n){const i=e[n];let o=null;if(ke(i))i.spaceBefore&&f.push(""),Et(t,f,i.commentBefore,!1),i.comment&&(o=i.comment);else if(ge(i)){const e=ke(i.key)?i.key:null;e&&(e.spaceBefore&&f.push(""),Et(t,f,e.commentBefore,!1),e.comment&&(l=!0));const n=ke(i.value)?i.value:null;n?(n.comment&&(o=n.comment),n.commentBefore&&(l=!0)):null==i.value&&e?.comment&&(o=e.comment)}o&&(l=!0);let r=ft(i,c,(()=>o=null));n<e.length-1&&(r+=","),o&&(r+=Qe(r,s,a(o))),!l&&(f.length>u||r.includes("\n"))&&(l=!0),f.push(r),u=f.length}const{start:h,end:d}=n;if(0===f.length)return h+d;if(!l){const e=f.reduce(((e,t)=>e+t.length+2),2);l=t.options.lineWidth>0&&e>t.options.lineWidth}if(l){let e=h;for(const t of f)e+=t?`\n${o}${i}${t}`:"\n";return`${e}\n${i}${d}`}return`${h}${r}${f.join(" ")}${r}${d}`}function Et({indent:e,options:{commentString:t}},n,s,i){if(s&&i&&(s=s.replace(/^\n+/,"")),s){const i=He(t(s),e);n.push(i.trimStart())}}function Nt(e,t){const n=ye(t)?t.value:t;for(const s of e)if(ge(s)){if(s.key===t||s.key===n)return s;if(ye(s.key)&&s.key.value===n)return s}}class Ot extends Ye{static get tagName(){return"tag:yaml.org,2002:map"}constructor(e){super(ce,e),this.items=[]}static from(e,t,n){const{keepUndefined:s,replacer:i}=n,o=new this(e),r=(e,r)=>{if("function"==typeof i)r=i.call(t,e,r);else if(Array.isArray(i)&&!i.includes(e))return;(void 0!==r||s)&&o.items.push(bt(e,r,n))};if(t instanceof Map)for(const[e,n]of t)r(e,n);else if(t&&"object"==typeof t)for(const e of Object.keys(t))r(e,t[e]);return"function"==typeof e.sortMapEntries&&o.items.sort(e.sortMapEntries),o}add(e,t){let n;n=ge(e)?e:e&&"object"==typeof e&&"key"in e?new wt(e.key,e.value):new wt(e,e?.value);const s=Nt(this.items,n.key),i=this.schema?.sortMapEntries;if(s){if(!t)throw new Error(`Key ${n.key} already set`);ye(s.value)&&Ue(n.value)?s.value.value=n.value:s.value=n.value}else if(i){const e=this.items.findIndex((e=>i(n,e)<0));-1===e?this.items.push(n):this.items.splice(e,0,n)}else this.items.push(n)}delete(e){const t=Nt(this.items,e);if(!t)return!1;return this.items.splice(this.items.indexOf(t),1).length>0}get(e,t){const n=Nt(this.items,e),s=n?.value;return(!t&&ye(s)?s.value:s)??void 0}has(e){return!!Nt(this.items,e)}set(e,t){this.add(new wt(e,t),!0)}toJSON(e,t,n){const s=n?new n:t?.mapAsMap?new Map:{};t?.onCreate&&t.onCreate(s);for(const e of this.items)yt(t,s,e);return s}toString(e,t,n){if(!e)return JSON.stringify(this);for(const e of this.items)if(!ge(e))throw new Error(`Map items must all be pairs; found ${JSON.stringify(e)} instead`);return!e.allNullValues&&this.hasAllNullValues(!1)&&(e=Object.assign({},e,{allNullValues:!0})),kt(this,e,{blockItemPrefix:"",flowChars:{start:"{",end:"}"},itemIndent:e.indent||"",onChompKeep:n,onComment:t})}}const At={collection:"map",default:!0,nodeClass:Ot,tag:"tag:yaml.org,2002:map",resolve:(e,t)=>(me(e)||t("Expected a mapping for this tag"),e),createNode:(e,t,n)=>Ot.from(e,t,n)};class It extends Ye{static get tagName(){return"tag:yaml.org,2002:seq"}constructor(e){super(fe,e),this.items=[]}add(e){this.items.push(e)}delete(e){const t=Tt(e);if("number"!=typeof t)return!1;return this.items.splice(t,1).length>0}get(e,t){const n=Tt(e);if("number"!=typeof n)return;const s=this.items[n];return!t&&ye(s)?s.value:s}has(e){const t=Tt(e);return"number"==typeof t&&t<this.items.length}set(e,t){const n=Tt(e);if("number"!=typeof n)throw new Error(`Expected a valid index, not ${e}.`);const s=this.items[n];ye(s)&&Ue(t)?s.value=t:this.items[n]=t}toJSON(e,t){const n=[];t?.onCreate&&t.onCreate(n);let s=0;for(const e of this.items)n.push(Pe(e,String(s++),t));return n}toString(e,t,n){return e?kt(this,e,{blockItemPrefix:"- ",flowChars:{start:"[",end:"]"},itemIndent:(e.indent||"")+"  ",onChompKeep:n,onComment:t}):JSON.stringify(this)}static from(e,t,n){const{replacer:s}=n,i=new this(e);if(t&&Symbol.iterator in Object(t)){let e=0;for(let o of t){if("function"==typeof s){const n=t instanceof Set?o:String(e++);o=s.call(t,n,o)}i.items.push(Ge(o,void 0,n))}}return i}}function Tt(e){let t=ye(e)?e.value:e;return t&&"string"==typeof t&&(t=Number(t)),"number"==typeof t&&Number.isInteger(t)&&t>=0?t:null}const $t={collection:"seq",default:!0,nodeClass:It,tag:"tag:yaml.org,2002:seq",resolve:(e,t)=>(be(e)||t("Expected a sequence for this tag"),e),createNode:(e,t,n)=>It.from(e,t,n)},xt={identify:e=>"string"==typeof e,default:!0,tag:"tag:yaml.org,2002:str",resolve:e=>e,stringify:(e,t,n,s)=>lt(e,t=Object.assign({actualString:!0},t),n,s)},Lt={identify:e=>null==e,createNode:()=>new Fe(null),default:!0,tag:"tag:yaml.org,2002:null",test:/^(?:~|[Nn]ull|NULL)?$/,resolve:()=>new Fe(null),stringify:({source:e},t)=>"string"==typeof e&&Lt.test.test(e)?e:t.options.nullStr},Ct={identify:e=>"boolean"==typeof e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,resolve:e=>new Fe("t"===e[0]||"T"===e[0]),stringify({source:e,value:t},n){if(e&&Ct.test.test(e)){if(t===("t"===e[0]||"T"===e[0]))return e}return t?n.options.trueStr:n.options.falseStr}};function _t({format:e,minFractionDigits:t,tag:n,value:s}){if("bigint"==typeof s)return String(s);const i="number"==typeof s?s:Number(s);if(!isFinite(i))return isNaN(i)?".nan":i<0?"-.inf":".inf";let o=JSON.stringify(s);if(!e&&t&&(!n||"tag:yaml.org,2002:float"===n)&&/^\d/.test(o)){let e=o.indexOf(".");e<0&&(e=o.length,o+=".");let n=t-(o.length-e-1);for(;n-- >0;)o+="0"}return o}const Bt={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:e=>"nan"===e.slice(-3).toLowerCase()?NaN:"-"===e[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:_t},Mt={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,resolve:e=>parseFloat(e),stringify(e){const t=Number(e.value);return isFinite(t)?t.toExponential():_t(e)}},Kt={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,resolve(e){const t=new Fe(parseFloat(e)),n=e.indexOf(".");return-1!==n&&"0"===e[e.length-1]&&(t.minFractionDigits=e.length-n-1),t},stringify:_t},jt=e=>"bigint"==typeof e||Number.isInteger(e),Pt=(e,t,n,{intAsBigInt:s})=>s?BigInt(e):parseInt(e.substring(t),n);function Dt(e,t,n){const{value:s}=e;return jt(s)&&s>=0?n+s.toString(t):_t(e)}const qt={identify:e=>jt(e)&&e>=0,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^0o[0-7]+$/,resolve:(e,t,n)=>Pt(e,2,8,n),stringify:e=>Dt(e,8,"0o")},Rt={identify:jt,default:!0,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9]+$/,resolve:(e,t,n)=>Pt(e,0,10,n),stringify:_t},Ut={identify:e=>jt(e)&&e>=0,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^0x[0-9a-fA-F]+$/,resolve:(e,t,n)=>Pt(e,2,16,n),stringify:e=>Dt(e,16,"0x")},Ft=[At,$t,xt,Lt,Ct,qt,Rt,Ut,Bt,Mt,Kt];function Gt(e){return"bigint"==typeof e||Number.isInteger(e)}const Vt=({value:e})=>JSON.stringify(e),Wt=[At,$t].concat([{identify:e=>"string"==typeof e,default:!0,tag:"tag:yaml.org,2002:str",resolve:e=>e,stringify:Vt},{identify:e=>null==e,createNode:()=>new Fe(null),default:!0,tag:"tag:yaml.org,2002:null",test:/^null$/,resolve:()=>null,stringify:Vt},{identify:e=>"boolean"==typeof e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^true$|^false$/,resolve:e=>"true"===e,stringify:Vt},{identify:Gt,default:!0,tag:"tag:yaml.org,2002:int",test:/^-?(?:0|[1-9][0-9]*)$/,resolve:(e,t,{intAsBigInt:n})=>n?BigInt(e):parseInt(e,10),stringify:({value:e})=>Gt(e)?e.toString():JSON.stringify(e)},{identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,resolve:e=>parseFloat(e),stringify:Vt}],{default:!0,tag:"",test:/^/,resolve:(e,t)=>(t(`Unresolved plain scalar ${JSON.stringify(e)}`),e)}),Yt={identify:e=>e instanceof Uint8Array,default:!1,tag:"tag:yaml.org,2002:binary",resolve(e,t){if("function"==typeof atob){const t=atob(e.replace(/[\n\r]/g,"")),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n[e]=t.charCodeAt(e);return n}return t("This environment does not support reading binary tags; either Buffer or atob is required"),e},stringify({comment:e,type:t,value:n},s,i,o){if(!n)return"";const r=n;let a;if("function"!=typeof btoa)throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");{let e="";for(let t=0;t<r.length;++t)e+=String.fromCharCode(r[t]);a=btoa(e)}if(t??(t=Fe.BLOCK_LITERAL),t!==Fe.QUOTE_DOUBLE){const e=Math.max(s.options.lineWidth-s.indent.length,s.options.minContentWidth),n=Math.ceil(a.length/e),i=new Array(n);for(let t=0,s=0;t<n;++t,s+=e)i[t]=a.substr(s,e);a=i.join(t===Fe.BLOCK_LITERAL?"\n":" ")}return lt({comment:e,type:t,value:a},s,i,o)}};function Jt(e,t){if(be(e))for(let n=0;n<e.items.length;++n){let s=e.items[n];if(!ge(s)){if(me(s)){s.items.length>1&&t("Each pair must have its own sequence indicator");const e=s.items[0]||new wt(new Fe(null));if(s.commentBefore&&(e.key.commentBefore=e.key.commentBefore?`${s.commentBefore}\n${e.key.commentBefore}`:s.commentBefore),s.comment){const t=e.value??e.key;t.comment=t.comment?`${s.comment}\n${t.comment}`:s.comment}s=e}e.items[n]=ge(s)?s:new wt(s)}}else t("Expected a sequence for this tag");return e}function Ht(e,t,n){const{replacer:s}=n,i=new It(e);i.tag="tag:yaml.org,2002:pairs";let o=0;if(t&&Symbol.iterator in Object(t))for(let e of t){let r,a;if("function"==typeof s&&(e=s.call(t,String(o++),e)),Array.isArray(e)){if(2!==e.length)throw new TypeError(`Expected [key, value] tuple: ${e}`);r=e[0],a=e[1]}else if(e&&e instanceof Object){const t=Object.keys(e);if(1!==t.length)throw new TypeError(`Expected tuple with one key, not ${t.length} keys`);r=t[0],a=e[r]}else r=e;i.items.push(bt(r,a,n))}return i}const Qt={collection:"seq",default:!1,tag:"tag:yaml.org,2002:pairs",resolve:Jt,createNode:Ht};class Xt extends It{constructor(){super(),this.add=Ot.prototype.add.bind(this),this.delete=Ot.prototype.delete.bind(this),this.get=Ot.prototype.get.bind(this),this.has=Ot.prototype.has.bind(this),this.set=Ot.prototype.set.bind(this),this.tag=Xt.tag}toJSON(e,t){if(!t)return super.toJSON(e);const n=new Map;t?.onCreate&&t.onCreate(n);for(const e of this.items){let s,i;if(ge(e)?(s=Pe(e.key,"",t),i=Pe(e.value,s,t)):s=Pe(e,"",t),n.has(s))throw new Error("Ordered maps must not include duplicate keys");n.set(s,i)}return n}static from(e,t,n){const s=Ht(e,t,n),i=new this;return i.items=s.items,i}}Xt.tag="tag:yaml.org,2002:omap";const zt={collection:"seq",identify:e=>e instanceof Map,nodeClass:Xt,default:!1,tag:"tag:yaml.org,2002:omap",resolve(e,t){const n=Jt(e,t),s=[];for(const{key:e}of n.items)ye(e)&&(s.includes(e.value)?t(`Ordered maps must not include duplicate keys: ${e.value}`):s.push(e.value));return Object.assign(new Xt,n)},createNode:(e,t,n)=>Xt.from(e,t,n)};function Zt({value:e,source:t},n){return t&&(e?en:tn).test.test(t)?t:e?n.options.trueStr:n.options.falseStr}const en={identify:e=>!0===e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,resolve:()=>new Fe(!0),stringify:Zt},tn={identify:e=>!1===e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,resolve:()=>new Fe(!1),stringify:Zt},nn={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:e=>"nan"===e.slice(-3).toLowerCase()?NaN:"-"===e[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:_t},sn={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,resolve:e=>parseFloat(e.replace(/_/g,"")),stringify(e){const t=Number(e.value);return isFinite(t)?t.toExponential():_t(e)}},on={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,resolve(e){const t=new Fe(parseFloat(e.replace(/_/g,""))),n=e.indexOf(".");if(-1!==n){const s=e.substring(n+1).replace(/_/g,"");"0"===s[s.length-1]&&(t.minFractionDigits=s.length)}return t},stringify:_t},rn=e=>"bigint"==typeof e||Number.isInteger(e);function an(e,t,n,{intAsBigInt:s}){const i=e[0];if("-"!==i&&"+"!==i||(t+=1),e=e.substring(t).replace(/_/g,""),s){switch(n){case 2:e=`0b${e}`;break;case 8:e=`0o${e}`;break;case 16:e=`0x${e}`}const t=BigInt(e);return"-"===i?BigInt(-1)*t:t}const o=parseInt(e,n);return"-"===i?-1*o:o}function cn(e,t,n){const{value:s}=e;if(rn(s)){const e=s.toString(t);return s<0?"-"+n+e.substr(1):n+e}return _t(e)}const ln={identify:rn,default:!0,tag:"tag:yaml.org,2002:int",format:"BIN",test:/^[-+]?0b[0-1_]+$/,resolve:(e,t,n)=>an(e,2,2,n),stringify:e=>cn(e,2,"0b")},un={identify:rn,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^[-+]?0[0-7_]+$/,resolve:(e,t,n)=>an(e,1,8,n),stringify:e=>cn(e,8,"0")},fn={identify:rn,default:!0,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9][0-9_]*$/,resolve:(e,t,n)=>an(e,0,10,n),stringify:_t},hn={identify:rn,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^[-+]?0x[0-9a-fA-F_]+$/,resolve:(e,t,n)=>an(e,2,16,n),stringify:e=>cn(e,16,"0x")};class dn extends Ot{constructor(e){super(e),this.tag=dn.tag}add(e){let t;t=ge(e)?e:e&&"object"==typeof e&&"key"in e&&"value"in e&&null===e.value?new wt(e.key,null):new wt(e,null);Nt(this.items,t.key)||this.items.push(t)}get(e,t){const n=Nt(this.items,e);return!t&&ge(n)?ye(n.key)?n.key.value:n.key:n}set(e,t){if("boolean"!=typeof t)throw new Error("Expected boolean value for set(key, value) in a YAML set, not "+typeof t);const n=Nt(this.items,e);n&&!t?this.items.splice(this.items.indexOf(n),1):!n&&t&&this.items.push(new wt(e))}toJSON(e,t){return super.toJSON(e,t,Set)}toString(e,t,n){if(!e)return JSON.stringify(this);if(this.hasAllNullValues(!0))return super.toString(Object.assign({},e,{allNullValues:!0}),t,n);throw new Error("Set items must all have null values")}static from(e,t,n){const{replacer:s}=n,i=new this(e);if(t&&Symbol.iterator in Object(t))for(let e of t)"function"==typeof s&&(e=s.call(t,e,e)),i.items.push(bt(e,null,n));return i}}dn.tag="tag:yaml.org,2002:set";const pn={collection:"map",identify:e=>e instanceof Set,nodeClass:dn,default:!1,tag:"tag:yaml.org,2002:set",createNode:(e,t,n)=>dn.from(e,t,n),resolve(e,t){if(me(e)){if(e.hasAllNullValues(!0))return Object.assign(new dn,e);t("Set items must all have null values")}else t("Expected a mapping for this tag");return e}};function mn(e,t){const n=e[0],s="-"===n||"+"===n?e.substring(1):e,i=e=>t?BigInt(e):Number(e),o=s.replace(/_/g,"").split(":").reduce(((e,t)=>e*i(60)+i(t)),i(0));return"-"===n?i(-1)*o:o}function gn(e){let{value:t}=e,n=e=>e;if("bigint"==typeof t)n=e=>BigInt(e);else if(isNaN(t)||!isFinite(t))return _t(e);let s="";t<0&&(s="-",t*=n(-1));const i=n(60),o=[t%i];return t<60?o.unshift(0):(t=(t-o[0])/i,o.unshift(t%i),t>=60&&(t=(t-o[0])/i,o.unshift(t))),s+o.map((e=>String(e).padStart(2,"0"))).join(":").replace(/000000\d*$/,"")}const yn={identify:e=>"bigint"==typeof e||Number.isInteger(e),default:!0,tag:"tag:yaml.org,2002:int",format:"TIME",test:/^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,resolve:(e,t,{intAsBigInt:n})=>mn(e,n),stringify:gn},bn={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"TIME",test:/^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,resolve:e=>mn(e,!1),stringify:gn},wn={identify:e=>e instanceof Date,default:!0,tag:"tag:yaml.org,2002:timestamp",test:RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"),resolve(e){const t=e.match(wn.test);if(!t)throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");const[,n,s,i,o,r,a]=t.map(Number),c=t[7]?Number((t[7]+"00").substr(1,3)):0;let l=Date.UTC(n,s-1,i,o||0,r||0,a||0,c);const u=t[8];if(u&&"Z"!==u){let e=mn(u,!1);Math.abs(e)<30&&(e*=60),l-=6e4*e}return new Date(l)},stringify:({value:e})=>e?.toISOString().replace(/(T00:00:00)?\.000Z$/,"")??""},kn=[At,$t,xt,Lt,en,tn,ln,un,fn,hn,nn,sn,on,Yt,pt,zt,Qt,pn,yn,bn,wn],vn=new Map([["core",Ft],["failsafe",[At,$t,xt]],["json",Wt],["yaml11",kn],["yaml-1.1",kn]]),Sn={binary:Yt,bool:Ct,float:Kt,floatExp:Mt,floatNaN:Bt,floatTime:bn,int:Rt,intHex:Ut,intOct:qt,intTime:yn,map:At,merge:pt,null:Lt,omap:zt,pairs:Qt,seq:$t,set:pn,timestamp:wn},En={"tag:yaml.org,2002:binary":Yt,"tag:yaml.org,2002:merge":pt,"tag:yaml.org,2002:omap":zt,"tag:yaml.org,2002:pairs":Qt,"tag:yaml.org,2002:set":pn,"tag:yaml.org,2002:timestamp":wn};function Nn(e,t,n){const s=vn.get(t);if(s&&!e)return n&&!s.includes(pt)?s.concat(pt):s.slice();let i=s;if(!i){if(!Array.isArray(e)){const e=Array.from(vn.keys()).filter((e=>"yaml11"!==e)).map((e=>JSON.stringify(e))).join(", ");throw new Error(`Unknown schema "${t}"; use one of ${e} or define customTags array`)}i=[]}if(Array.isArray(e))for(const t of e)i=i.concat(t);else"function"==typeof e&&(i=e(i.slice()));return n&&(i=i.concat(pt)),i.reduce(((e,t)=>{const n="string"==typeof t?Sn[t]:t;if(!n){const e=JSON.stringify(t),n=Object.keys(Sn).map((e=>JSON.stringify(e))).join(", ");throw new Error(`Unknown custom tag ${e}; use one of ${n}`)}return e.includes(n)||e.push(n),e}),[])}const On=(e,t)=>e.key<t.key?-1:e.key>t.key?1:0;class An{constructor({compat:e,customTags:t,merge:n,resolveKnownTags:s,schema:i,sortMapEntries:o,toStringDefaults:r}){this.compat=Array.isArray(e)?Nn(e,"compat"):e?Nn(null,e):null,this.name="string"==typeof i&&i||"core",this.knownTags=s?En:{},this.tags=Nn(t,this.name,n),this.toStringOptions=r??null,Object.defineProperty(this,ce,{value:At}),Object.defineProperty(this,ue,{value:xt}),Object.defineProperty(this,fe,{value:$t}),this.sortMapEntries="function"==typeof o?o:!0===o?On:null}clone(){const e=Object.create(An.prototype,Object.getOwnPropertyDescriptors(this));return e.tags=this.tags.slice(),e}}class In{constructor(e,t,n){this.commentBefore=null,this.comment=null,this.errors=[],this.warnings=[],Object.defineProperty(this,he,{value:ae});let s=null;"function"==typeof t||Array.isArray(t)?s=t:void 0===n&&t&&(n=t,t=void 0);const i=Object.assign({intAsBigInt:!1,keepSourceTokens:!1,logLevel:"warn",prettyErrors:!0,strict:!0,stringKeys:!1,uniqueKeys:!0,version:"1.2"},n);this.options=i;let{version:o}=i;n?._directives?(this.directives=n._directives.atDocument(),this.directives.yaml.explicit&&(o=this.directives.yaml.version)):this.directives=new _e({version:o}),this.setSchema(o,n),this.contents=void 0===e?null:this.createNode(e,s,n)}clone(){const e=Object.create(In.prototype,{[he]:{value:ae}});return e.commentBefore=this.commentBefore,e.comment=this.comment,e.errors=this.errors.slice(),e.warnings=this.warnings.slice(),e.options=Object.assign({},this.options),this.directives&&(e.directives=this.directives.clone()),e.schema=this.schema.clone(),e.contents=ke(this.contents)?this.contents.clone(e.schema):this.contents,this.range&&(e.range=this.range.slice()),e}add(e){Tn(this.contents)&&this.contents.add(e)}addIn(e,t){Tn(this.contents)&&this.contents.addIn(e,t)}createAlias(e,t){if(!e.anchor){const n=Me(this);e.anchor=!t||n.has(t)?Ke(t||"a",n):t}return new qe(e.anchor)}createNode(e,t,n){let s;if("function"==typeof t)e=t.call({"":e},"",e),s=t;else if(Array.isArray(t)){const e=e=>"number"==typeof e||e instanceof String||e instanceof Number,n=t.filter(e).map(String);n.length>0&&(t=t.concat(n)),s=t}else void 0===n&&t&&(n=t,t=void 0);const{aliasDuplicateObjects:i,anchorPrefix:o,flow:r,keepUndefined:a,onTagObj:c,tag:l}=n??{},{onAnchor:u,setAnchors:f,sourceObjects:h}=function(e,t){const n=[],s=new Map;let i=null;return{onAnchor:s=>{n.push(s),i??(i=Me(e));const o=Ke(t,i);return i.add(o),o},setAnchors:()=>{for(const e of n){const t=s.get(e);if("object"!=typeof t||!t.anchor||!ye(t.node)&&!we(t.node)){const t=new Error("Failed to resolve repeated object (this should not happen)");throw t.source=e,t}t.node.anchor=t.anchor}},sourceObjects:s}}(this,o||"a"),d=Ge(e,l,{aliasDuplicateObjects:i??!0,keepUndefined:a??!1,onAnchor:u,onTagObj:c,replacer:s,schema:this.schema,sourceObjects:h});return r&&we(d)&&(d.flow=!0),f(),d}createPair(e,t,n={}){const s=this.createNode(e,null,n),i=this.createNode(t,null,n);return new wt(s,i)}delete(e){return!!Tn(this.contents)&&this.contents.delete(e)}deleteIn(e){return We(e)?null!=this.contents&&(this.contents=null,!0):!!Tn(this.contents)&&this.contents.deleteIn(e)}get(e,t){return we(this.contents)?this.contents.get(e,t):void 0}getIn(e,t){return We(e)?!t&&ye(this.contents)?this.contents.value:this.contents:we(this.contents)?this.contents.getIn(e,t):void 0}has(e){return!!we(this.contents)&&this.contents.has(e)}hasIn(e){return We(e)?void 0!==this.contents:!!we(this.contents)&&this.contents.hasIn(e)}set(e,t){null==this.contents?this.contents=Ve(this.schema,[e],t):Tn(this.contents)&&this.contents.set(e,t)}setIn(e,t){We(e)?this.contents=t:null==this.contents?this.contents=Ve(this.schema,Array.from(e),t):Tn(this.contents)&&this.contents.setIn(e,t)}setSchema(e,t={}){let n;switch("number"==typeof e&&(e=String(e)),e){case"1.1":this.directives?this.directives.yaml.version="1.1":this.directives=new _e({version:"1.1"}),n={resolveKnownTags:!1,schema:"yaml-1.1"};break;case"1.2":case"next":this.directives?this.directives.yaml.version=e:this.directives=new _e({version:e}),n={resolveKnownTags:!0,schema:"core"};break;case null:this.directives&&delete this.directives,n=null;break;default:{const t=JSON.stringify(e);throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${t}`)}}if(t.schema instanceof Object)this.schema=t.schema;else{if(!n)throw new Error("With a null YAML version, the { schema: Schema } option is required");this.schema=new An(Object.assign(n,t))}}toJS({json:e,jsonArg:t,mapAsMap:n,maxAliasCount:s,onAnchor:i,reviver:o}={}){const r={anchors:new Map,doc:this,keep:!e,mapAsMap:!0===n,mapKeyWarned:!1,maxAliasCount:"number"==typeof s?s:100},a=Pe(this.contents,t??"",r);if("function"==typeof i)for(const{count:e,res:t}of r.anchors.values())i(t,e);return"function"==typeof o?je(o,{"":a},"",a):a}toJSON(e,t){return this.toJS({json:!0,jsonArg:e,mapAsMap:!1,onAnchor:t})}toString(e={}){if(this.errors.length>0)throw new Error("Document with errors cannot be stringified");if("indent"in e&&(!Number.isInteger(e.indent)||Number(e.indent)<=0)){const t=JSON.stringify(e.indent);throw new Error(`"indent" option must be a positive integer, not ${t}`)}return function(e,t){const n=[];let s=!0===t.directives;if(!1!==t.directives&&e.directives){const t=e.directives.toString(e);t?(n.push(t),s=!0):e.directives.docStart&&(s=!0)}s&&n.push("---");const i=ut(e,t),{commentString:o}=i.options;if(e.commentBefore){1!==n.length&&n.unshift("");const t=o(e.commentBefore);n.unshift(He(t,""))}let r=!1,a=null;if(e.contents){if(ke(e.contents)){if(e.contents.spaceBefore&&s&&n.push(""),e.contents.commentBefore){const t=o(e.contents.commentBefore);n.push(He(t,""))}i.forceBlockIndent=!!e.comment,a=e.contents.comment}const t=a?void 0:()=>r=!0;let c=ft(e.contents,i,(()=>a=null),t);a&&(c+=Qe(c,"",o(a))),"|"!==c[0]&&">"!==c[0]||"---"!==n[n.length-1]?n.push(c):n[n.length-1]=`--- ${c}`}else n.push(ft(e.contents,i));if(e.directives?.docEnd)if(e.comment){const t=o(e.comment);t.includes("\n")?(n.push("..."),n.push(He(t,""))):n.push(`... ${t}`)}else n.push("...");else{let t=e.comment;t&&r&&(t=t.replace(/^\n+/,"")),t&&(r&&!a||""===n[n.length-1]||n.push(""),n.push(He(o(t),"")))}return n.join("\n")+"\n"}(this,e)}}function Tn(e){if(we(e))return!0;throw new Error("Expected a YAML collection as document contents")}class $n extends Error{constructor(e,t,n,s){super(),this.name=e,this.code=n,this.message=s,this.pos=t}}class xn extends $n{constructor(e,t,n){super("YAMLParseError",e,t,n)}}class Ln extends $n{constructor(e,t,n){super("YAMLWarning",e,t,n)}}const Cn=(e,t)=>n=>{if(-1===n.pos[0])return;n.linePos=n.pos.map((e=>t.linePos(e)));const{line:s,col:i}=n.linePos[0];n.message+=` at line ${s}, column ${i}`;let o=i-1,r=e.substring(t.lineStarts[s-1],t.lineStarts[s]).replace(/[\n\r]+$/,"");if(o>=60&&r.length>80){const e=Math.min(o-39,r.length-79);r="â€¦"+r.substring(e),o-=e-1}if(r.length>80&&(r=r.substring(0,79)+"â€¦"),s>1&&/^ *$/.test(r.substring(0,o))){let n=e.substring(t.lineStarts[s-2],t.lineStarts[s-1]);n.length>80&&(n=n.substring(0,79)+"â€¦\n"),r=n+r}if(/[^ ]/.test(r)){let e=1;const t=n.linePos[1];t&&t.line===s&&t.col>i&&(e=Math.max(1,Math.min(t.col-i,80-o)));const a=" ".repeat(o)+"^".repeat(e);n.message+=`:\n\n${r}\n${a}\n`}};function _n(e,{flow:t,indicator:n,next:s,offset:i,onError:o,parentIndent:r,startOnNewline:a}){let c=!1,l=a,u=a,f="",h="",d=!1,p=!1,m=null,g=null,y=null,b=null,w=null,k=null,v=null;for(const i of e)switch(p&&("space"!==i.type&&"newline"!==i.type&&"comma"!==i.type&&o(i.offset,"MISSING_CHAR","Tags and anchors must be separated from the next token by white space"),p=!1),m&&(l&&"comment"!==i.type&&"newline"!==i.type&&o(m,"TAB_AS_INDENT","Tabs are not allowed as indentation"),m=null),i.type){case"space":t||"doc-start"===n&&"flow-collection"===s?.type||!i.source.includes("\t")||(m=i),u=!0;break;case"comment":{u||o(i,"MISSING_CHAR","Comments must be separated from other tokens by white space characters");const e=i.source.substring(1)||" ";f?f+=h+e:f=e,h="",l=!1;break}case"newline":l?f?f+=i.source:k&&"seq-item-ind"===n||(c=!0):h+=i.source,l=!0,d=!0,(g||y)&&(b=i),u=!0;break;case"anchor":g&&o(i,"MULTIPLE_ANCHORS","A node can have at most one anchor"),i.source.endsWith(":")&&o(i.offset+i.source.length-1,"BAD_ALIAS","Anchor ending in : is ambiguous",!0),g=i,v??(v=i.offset),l=!1,u=!1,p=!0;break;case"tag":y&&o(i,"MULTIPLE_TAGS","A node can have at most one tag"),y=i,v??(v=i.offset),l=!1,u=!1,p=!0;break;case n:(g||y)&&o(i,"BAD_PROP_ORDER",`Anchors and tags must be after the ${i.source} indicator`),k&&o(i,"UNEXPECTED_TOKEN",`Unexpected ${i.source} in ${t??"collection"}`),k=i,l="seq-item-ind"===n||"explicit-key-ind"===n,u=!1;break;case"comma":if(t){w&&o(i,"UNEXPECTED_TOKEN",`Unexpected , in ${t}`),w=i,l=!1,u=!1;break}default:o(i,"UNEXPECTED_TOKEN",`Unexpected ${i.type} token`),l=!1,u=!1}const S=e[e.length-1],E=S?S.offset+S.source.length:i;return p&&s&&"space"!==s.type&&"newline"!==s.type&&"comma"!==s.type&&("scalar"!==s.type||""!==s.source)&&o(s.offset,"MISSING_CHAR","Tags and anchors must be separated from the next token by white space"),m&&(l&&m.indent<=r||"block-map"===s?.type||"block-seq"===s?.type)&&o(m,"TAB_AS_INDENT","Tabs are not allowed as indentation"),{comma:w,found:k,spaceBefore:c,comment:f,hasNewline:d,anchor:g,tag:y,newlineAfterProp:b,end:E,start:v??E}}function Bn(e){if(!e)return null;switch(e.type){case"alias":case"scalar":case"double-quoted-scalar":case"single-quoted-scalar":if(e.source.includes("\n"))return!0;if(e.end)for(const t of e.end)if("newline"===t.type)return!0;return!1;case"flow-collection":for(const t of e.items){for(const e of t.start)if("newline"===e.type)return!0;if(t.sep)for(const e of t.sep)if("newline"===e.type)return!0;if(Bn(t.key)||Bn(t.value))return!0}return!1;default:return!0}}function Mn(e,t,n){if("flow-collection"===t?.type){const s=t.end[0];if(s.indent===e&&("]"===s.source||"}"===s.source)&&Bn(t)){n(s,"BAD_INDENT","Flow end indicator should be more indented than parent",!0)}}}function Kn(e,t,n){const{uniqueKeys:s}=e.options;if(!1===s)return!1;const i="function"==typeof s?s:(e,t)=>e===t||ye(e)&&ye(t)&&e.value===t.value;return t.some((e=>i(e.key,n)))}const jn="All mapping items must start at the same column";function Pn(e,t,n,s){let i="";if(e){let o=!1,r="";for(const a of e){const{source:e,type:c}=a;switch(c){case"space":o=!0;break;case"comment":{n&&!o&&s(a,"MISSING_CHAR","Comments must be separated from other tokens by white space characters");const t=e.substring(1)||" ";i?i+=r+t:i=t,r="";break}case"newline":i&&(r+=e),o=!0;break;default:s(a,"UNEXPECTED_TOKEN",`Unexpected ${c} at node end`)}t+=e.length}}return{comment:i,offset:t}}const Dn="Block collections are not allowed within flow collections",qn=e=>e&&("block-map"===e.type||"block-seq"===e.type);function Rn(e,t,n,s,i,o){const r="block-map"===n.type?function({composeNode:e,composeEmptyNode:t},n,s,i,o){const r=new(o?.nodeClass??Ot)(n.schema);n.atRoot&&(n.atRoot=!1);let a=s.offset,c=null;for(const o of s.items){const{start:l,key:u,sep:f,value:h}=o,d=_n(l,{indicator:"explicit-key-ind",next:u??f?.[0],offset:a,onError:i,parentIndent:s.indent,startOnNewline:!0}),p=!d.found;if(p){if(u&&("block-seq"===u.type?i(a,"BLOCK_AS_IMPLICIT_KEY","A block sequence may not be used as an implicit map key"):"indent"in u&&u.indent!==s.indent&&i(a,"BAD_INDENT",jn)),!d.anchor&&!d.tag&&!f){c=d.end,d.comment&&(r.comment?r.comment+="\n"+d.comment:r.comment=d.comment);continue}(d.newlineAfterProp||Bn(u))&&i(u??l[l.length-1],"MULTILINE_IMPLICIT_KEY","Implicit keys need to be on a single line")}else d.found?.indent!==s.indent&&i(a,"BAD_INDENT",jn);n.atKey=!0;const m=d.end,g=u?e(n,u,d,i):t(n,m,l,null,d,i);n.schema.compat&&Mn(s.indent,u,i),n.atKey=!1,Kn(n,r.items,g)&&i(m,"DUPLICATE_KEY","Map keys must be unique");const y=_n(f??[],{indicator:"map-value-ind",next:h,offset:g.range[2],onError:i,parentIndent:s.indent,startOnNewline:!u||"block-scalar"===u.type});if(a=y.end,y.found){p&&("block-map"!==h?.type||y.hasNewline||i(a,"BLOCK_AS_IMPLICIT_KEY","Nested mappings are not allowed in compact mappings"),n.options.strict&&d.start<y.found.offset-1024&&i(g.range,"KEY_OVER_1024_CHARS","The : indicator must be at most 1024 chars after the start of an implicit block mapping key"));const c=h?e(n,h,y,i):t(n,a,f,null,y,i);n.schema.compat&&Mn(s.indent,h,i),a=c.range[2];const l=new wt(g,c);n.options.keepSourceTokens&&(l.srcToken=o),r.items.push(l)}else{p&&i(g.range,"MISSING_CHAR","Implicit map keys need to be followed by map values"),y.comment&&(g.comment?g.comment+="\n"+y.comment:g.comment=y.comment);const e=new wt(g);n.options.keepSourceTokens&&(e.srcToken=o),r.items.push(e)}}return c&&c<a&&i(c,"IMPOSSIBLE","Map comment with trailing content"),r.range=[s.offset,a,c??a],r}(e,t,n,s,o):"block-seq"===n.type?function({composeNode:e,composeEmptyNode:t},n,s,i,o){const r=new(o?.nodeClass??It)(n.schema);n.atRoot&&(n.atRoot=!1),n.atKey&&(n.atKey=!1);let a=s.offset,c=null;for(const{start:o,value:l}of s.items){const u=_n(o,{indicator:"seq-item-ind",next:l,offset:a,onError:i,parentIndent:s.indent,startOnNewline:!0});if(!u.found){if(!(u.anchor||u.tag||l)){c=u.end,u.comment&&(r.comment=u.comment);continue}l&&"block-seq"===l.type?i(u.end,"BAD_INDENT","All sequence items must start at the same column"):i(a,"MISSING_CHAR","Sequence item without - indicator")}const f=l?e(n,l,u,i):t(n,u.end,o,null,u,i);n.schema.compat&&Mn(s.indent,l,i),a=f.range[2],r.items.push(f)}return r.range=[s.offset,a,c??a],r}(e,t,n,s,o):function({composeNode:e,composeEmptyNode:t},n,s,i,o){const r="{"===s.start.source,a=r?"flow map":"flow sequence",c=new(o?.nodeClass??(r?Ot:It))(n.schema);c.flow=!0;const l=n.atRoot;l&&(n.atRoot=!1),n.atKey&&(n.atKey=!1);let u=s.offset+s.start.source.length;for(let o=0;o<s.items.length;++o){const l=s.items[o],{start:f,key:h,sep:d,value:p}=l,m=_n(f,{flow:a,indicator:"explicit-key-ind",next:h??d?.[0],offset:u,onError:i,parentIndent:s.indent,startOnNewline:!1});if(!m.found){if(!(m.anchor||m.tag||d||p)){0===o&&m.comma?i(m.comma,"UNEXPECTED_TOKEN",`Unexpected , in ${a}`):o<s.items.length-1&&i(m.start,"UNEXPECTED_TOKEN",`Unexpected empty item in ${a}`),m.comment&&(c.comment?c.comment+="\n"+m.comment:c.comment=m.comment),u=m.end;continue}!r&&n.options.strict&&Bn(h)&&i(h,"MULTILINE_IMPLICIT_KEY","Implicit keys of flow sequence pairs need to be on a single line")}if(0===o)m.comma&&i(m.comma,"UNEXPECTED_TOKEN",`Unexpected , in ${a}`);else if(m.comma||i(m.start,"MISSING_CHAR",`Missing , between ${a} items`),m.comment){let e="";e:for(const t of f)switch(t.type){case"comma":case"space":break;case"comment":e=t.source.substring(1);break e;default:break e}if(e){let t=c.items[c.items.length-1];ge(t)&&(t=t.value??t.key),t.comment?t.comment+="\n"+e:t.comment=e,m.comment=m.comment.substring(e.length+1)}}if(r||d||m.found){n.atKey=!0;const o=m.end,g=h?e(n,h,m,i):t(n,o,f,null,m,i);qn(h)&&i(g.range,"BLOCK_IN_FLOW",Dn),n.atKey=!1;const y=_n(d??[],{flow:a,indicator:"map-value-ind",next:p,offset:g.range[2],onError:i,parentIndent:s.indent,startOnNewline:!1});if(y.found){if(!r&&!m.found&&n.options.strict){if(d)for(const e of d){if(e===y.found)break;if("newline"===e.type){i(e,"MULTILINE_IMPLICIT_KEY","Implicit keys of flow sequence pairs need to be on a single line");break}}m.start<y.found.offset-1024&&i(y.found,"KEY_OVER_1024_CHARS","The : indicator must be at most 1024 chars after the start of an implicit flow sequence key")}}else p&&("source"in p&&p.source&&":"===p.source[0]?i(p,"MISSING_CHAR",`Missing space after : in ${a}`):i(y.start,"MISSING_CHAR",`Missing , or : between ${a} items`));const b=p?e(n,p,y,i):y.found?t(n,y.end,d,null,y,i):null;b?qn(p)&&i(b.range,"BLOCK_IN_FLOW",Dn):y.comment&&(g.comment?g.comment+="\n"+y.comment:g.comment=y.comment);const w=new wt(g,b);if(n.options.keepSourceTokens&&(w.srcToken=l),r){const e=c;Kn(n,e.items,g)&&i(o,"DUPLICATE_KEY","Map keys must be unique"),e.items.push(w)}else{const e=new Ot(n.schema);e.flow=!0,e.items.push(w);const t=(b??g).range;e.range=[g.range[0],t[1],t[2]],c.items.push(e)}u=b?b.range[2]:y.end}else{const s=p?e(n,p,m,i):t(n,m.end,d,null,m,i);c.items.push(s),u=s.range[2],qn(p)&&i(s.range,"BLOCK_IN_FLOW",Dn)}}const f=r?"}":"]",[h,...d]=s.end;let p=u;if(h&&h.source===f)p=h.offset+h.source.length;else{const e=a[0].toUpperCase()+a.substring(1);i(u,l?"MISSING_CHAR":"BAD_INDENT",l?`${e} must end with a ${f}`:`${e} in block collection must be sufficiently indented and end with a ${f}`),h&&1!==h.source.length&&d.unshift(h)}if(d.length>0){const e=Pn(d,p,n.options.strict,i);e.comment&&(c.comment?c.comment+="\n"+e.comment:c.comment=e.comment),c.range=[s.offset,p,e.offset]}else c.range=[s.offset,p,p];return c}(e,t,n,s,o),a=r.constructor;return"!"===i||i===a.tagName?(r.tag=a.tagName,r):(i&&(r.tag=i),r)}function Un(e,t,n){const s=t.offset,i=function({offset:e,props:t},n,s){if("block-scalar-header"!==t[0].type)return s(t[0],"IMPOSSIBLE","Block scalar header not found"),null;const{source:i}=t[0],o=i[0];let r=0,a="",c=-1;for(let t=1;t<i.length;++t){const n=i[t];if(a||"-"!==n&&"+"!==n){const s=Number(n);!r&&s?r=s:-1===c&&(c=e+t)}else a=n}-1!==c&&s(c,"UNEXPECTED_TOKEN",`Block scalar header includes extra characters: ${i}`);let l=!1,u="",f=i.length;for(let e=1;e<t.length;++e){const i=t[e];switch(i.type){case"space":l=!0;case"newline":f+=i.source.length;break;case"comment":if(n&&!l){s(i,"MISSING_CHAR","Comments must be separated from other tokens by white space characters")}f+=i.source.length,u=i.source.substring(1);break;case"error":s(i,"UNEXPECTED_TOKEN",i.message),f+=i.source.length;break;default:{s(i,"UNEXPECTED_TOKEN",`Unexpected token in block scalar header: ${i.type}`);const e=i.source;e&&"string"==typeof e&&(f+=e.length)}}}return{mode:o,indent:r,chomp:a,comment:u,length:f}}(t,e.options.strict,n);if(!i)return{value:"",type:null,comment:"",range:[s,s,s]};const o=">"===i.mode?Fe.BLOCK_FOLDED:Fe.BLOCK_LITERAL,r=t.source?function(e){const t=e.split(/\n( *)/),n=t[0],s=n.match(/^( *)/),i=[s?.[1]?[s[1],n.slice(s[1].length)]:["",n]];for(let e=1;e<t.length;e+=2)i.push([t[e],t[e+1]]);return i}(t.source):[];let a=r.length;for(let e=r.length-1;e>=0;--e){const t=r[e][1];if(""!==t&&"\r"!==t)break;a=e}if(0===a){const e="+"===i.chomp&&r.length>0?"\n".repeat(Math.max(1,r.length-1)):"";let n=s+i.length;return t.source&&(n+=t.source.length),{value:e,type:o,comment:i.comment,range:[s,n,n]}}let c=t.indent+i.indent,l=t.offset+i.length,u=0;for(let t=0;t<a;++t){const[s,o]=r[t];if(""!==o&&"\r"!==o){if(s.length<c){const e="Block scalars with more-indented leading empty lines must use an explicit indentation indicator";n(l+s.length,"MISSING_CHAR",e)}if(0===i.indent&&(c=s.length),u=t,0===c&&!e.atRoot){n(l,"BAD_INDENT","Block scalar values in collections must be indented")}break}0===i.indent&&s.length>c&&(c=s.length),l+=s.length+o.length+1}for(let e=r.length-1;e>=a;--e)r[e][0].length>c&&(a=e+1);let f="",h="",d=!1;for(let e=0;e<u;++e)f+=r[e][0].slice(c)+"\n";for(let e=u;e<a;++e){let[t,s]=r[e];l+=t.length+s.length+1;const a="\r"===s[s.length-1];if(a&&(s=s.slice(0,-1)),s&&t.length<c){const e=`Block scalar lines must not be less indented than their ${i.indent?"explicit indentation indicator":"first line"}`;n(l-s.length-(a?2:1),"BAD_INDENT",e),t=""}o===Fe.BLOCK_LITERAL?(f+=h+t.slice(c)+s,h="\n"):t.length>c||"\t"===s[0]?(" "===h?h="\n":d||"\n"!==h||(h="\n\n"),f+=h+t.slice(c)+s,h="\n",d=!0):""===s?"\n"===h?f+="\n":h="\n":(f+=h+s,h=" ",d=!1)}switch(i.chomp){case"-":break;case"+":for(let e=a;e<r.length;++e)f+="\n"+r[e][0].slice(c);"\n"!==f[f.length-1]&&(f+="\n");break;default:f+="\n"}const p=s+i.length+t.source.length;return{value:f,type:o,comment:i.comment,range:[s,p,p]}}function Fn(e,t,n){const{offset:s,type:i,source:o,end:r}=e;let a,c;const l=(e,t,i)=>n(s+e,t,i);switch(i){case"scalar":a=Fe.PLAIN,c=function(e,t){let n="";switch(e[0]){case"\t":n="a tab character";break;case",":n="flow indicator character ,";break;case"%":n="directive indicator character %";break;case"|":case">":n=`block scalar indicator ${e[0]}`;break;case"@":case"`":n=`reserved character ${e[0]}`}n&&t(0,"BAD_SCALAR_START",`Plain value cannot start with ${n}`);return Gn(e)}(o,l);break;case"single-quoted-scalar":a=Fe.QUOTE_SINGLE,c=function(e,t){"'"===e[e.length-1]&&1!==e.length||t(e.length,"MISSING_CHAR","Missing closing 'quote");return Gn(e.slice(1,-1)).replace(/''/g,"'")}(o,l);break;case"double-quoted-scalar":a=Fe.QUOTE_DOUBLE,c=function(e,t){let n="";for(let s=1;s<e.length-1;++s){const i=e[s];if("\r"!==i||"\n"!==e[s+1])if("\n"===i){const{fold:t,offset:i}=Vn(e,s);n+=t,s=i}else if("\\"===i){let i=e[++s];const o=Wn[i];if(o)n+=o;else if("\n"===i)for(i=e[s+1];" "===i||"\t"===i;)i=e[1+ ++s];else if("\r"===i&&"\n"===e[s+1])for(i=e[1+ ++s];" "===i||"\t"===i;)i=e[1+ ++s];else if("x"===i||"u"===i||"U"===i){const o={x:2,u:4,U:8}[i];n+=Yn(e,s+1,o,t),s+=o}else{const i=e.substr(s-1,2);t(s-1,"BAD_DQ_ESCAPE",`Invalid escape sequence ${i}`),n+=i}}else if(" "===i||"\t"===i){const t=s;let o=e[s+1];for(;" "===o||"\t"===o;)o=e[1+ ++s];"\n"===o||"\r"===o&&"\n"===e[s+2]||(n+=s>t?e.slice(t,s+1):i)}else n+=i}'"'===e[e.length-1]&&1!==e.length||t(e.length,"MISSING_CHAR",'Missing closing "quote');return n}(o,l);break;default:return n(e,"UNEXPECTED_TOKEN",`Expected a flow scalar value, but found: ${i}`),{value:"",type:null,comment:"",range:[s,s+o.length,s+o.length]}}const u=s+o.length,f=Pn(r,u,t,n);return{value:c,type:a,comment:f.comment,range:[s,u,f.offset]}}function Gn(e){let t,n;try{t=new RegExp("(.*?)(?<![ \t])[ \t]*\r?\n","sy"),n=new RegExp("[ \t]*(.*?)(?:(?<![ \t])[ \t]*)?\r?\n","sy")}catch{t=/(.*?)[ \t]*\r?\n/sy,n=/[ \t]*(.*?)[ \t]*\r?\n/sy}let s=t.exec(e);if(!s)return e;let i=s[1],o=" ",r=t.lastIndex;for(n.lastIndex=r;s=n.exec(e);)""===s[1]?"\n"===o?i+=o:o="\n":(i+=o+s[1],o=" "),r=n.lastIndex;const a=/[ \t]*(.*)/sy;return a.lastIndex=r,s=a.exec(e),i+o+(s?.[1]??"")}function Vn(e,t){let n="",s=e[t+1];for(;!(" "!==s&&"\t"!==s&&"\n"!==s&&"\r"!==s||"\r"===s&&"\n"!==e[t+2]);)"\n"===s&&(n+="\n"),s=e[(t+=1)+1];return n||(n=" "),{fold:n,offset:t}}const Wn={0:"\0",a:"",b:"\b",e:"",f:"\f",n:"\n",r:"\r",t:"\t",v:"\v",N:"Â…",_:"Â ",L:"\u2028",P:"\u2029"," ":" ",'"':'"',"/":"/","\\":"\\","\t":"\t"};function Yn(e,t,n,s){const i=e.substr(t,n),o=i.length===n&&/^[0-9a-fA-F]+$/.test(i)?parseInt(i,16):NaN;if(isNaN(o)){const i=e.substr(t-2,n+2);return s(t-2,"BAD_DQ_ESCAPE",`Invalid escape sequence ${i}`),i}return String.fromCodePoint(o)}function Jn(e,t,n,s){const{value:i,type:o,comment:r,range:a}="block-scalar"===t.type?Un(e,t,s):Fn(t,e.options.strict,s),c=n?e.directives.tagName(n.source,(e=>s(n,"TAG_RESOLVE_FAILED",e))):null;let l,u;l=e.options.stringKeys&&e.atKey?e.schema[ue]:c?function(e,t,n,s,i){if("!"===n)return e[ue];const o=[];for(const t of e.tags)if(!t.collection&&t.tag===n){if(!t.default||!t.test)return t;o.push(t)}for(const e of o)if(e.test?.test(t))return e;const r=e.knownTags[n];if(r&&!r.collection)return e.tags.push(Object.assign({},r,{default:!1,test:void 0})),r;return i(s,"TAG_RESOLVE_FAILED",`Unresolved tag: ${n}`,"tag:yaml.org,2002:str"!==n),e[ue]}(e.schema,i,c,n,s):"scalar"===t.type?function({atKey:e,directives:t,schema:n},s,i,o){const r=n.tags.find((t=>(!0===t.default||e&&"key"===t.default)&&t.test?.test(s)))||n[ue];if(n.compat){const e=n.compat.find((e=>e.default&&e.test?.test(s)))??n[ue];if(r.tag!==e.tag){o(i,"TAG_RESOLVE_FAILED",`Value may be parsed as either ${t.tagString(r.tag)} or ${t.tagString(e.tag)}`,!0)}}return r}(e,i,t,s):e.schema[ue];try{const o=l.resolve(i,(e=>s(n??t,"TAG_RESOLVE_FAILED",e)),e.options);u=ye(o)?o:new Fe(o)}catch(e){const o=e instanceof Error?e.message:String(e);s(n??t,"TAG_RESOLVE_FAILED",o),u=new Fe(i)}return u.range=a,u.source=i,o&&(u.type=o),c&&(u.tag=c),l.format&&(u.format=l.format),r&&(u.comment=r),u}function Hn(e,t,n){if(t){n??(n=t.length);for(let s=n-1;s>=0;--s){let n=t[s];switch(n.type){case"space":case"comment":case"newline":e-=n.source.length;continue}for(n=t[++s];"space"===n?.type;)e+=n.source.length,n=t[++s];break}}return e}const Qn={composeNode:Xn,composeEmptyNode:zn};function Xn(e,t,n,s){const i=e.atKey,{spaceBefore:o,comment:r,anchor:a,tag:c}=n;let l,u=!0;switch(t.type){case"alias":l=function({options:e},{offset:t,source:n,end:s},i){const o=new qe(n.substring(1));""===o.source&&i(t,"BAD_ALIAS","Alias cannot be an empty string");o.source.endsWith(":")&&i(t+n.length-1,"BAD_ALIAS","Alias ending in : is ambiguous",!0);const r=t+n.length,a=Pn(s,r,e.strict,i);o.range=[t,r,a.offset],a.comment&&(o.comment=a.comment);return o}(e,t,s),(a||c)&&s(t,"ALIAS_PROPS","An alias node must not specify any properties");break;case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":case"block-scalar":l=Jn(e,t,c,s),a&&(l.anchor=a.source.substring(1));break;case"block-map":case"block-seq":case"flow-collection":l=function(e,t,n,s,i){const o=s.tag,r=o?t.directives.tagName(o.source,(e=>i(o,"TAG_RESOLVE_FAILED",e))):null;if("block-seq"===n.type){const{anchor:e,newlineAfterProp:t}=s,n=e&&o?e.offset>o.offset?e:o:e??o;n&&(!t||t.offset<n.offset)&&i(n,"MISSING_CHAR","Missing newline after block sequence props")}const a="block-map"===n.type?"map":"block-seq"===n.type?"seq":"{"===n.start.source?"map":"seq";if(!o||!r||"!"===r||r===Ot.tagName&&"map"===a||r===It.tagName&&"seq"===a)return Rn(e,t,n,i,r);let c=t.schema.tags.find((e=>e.tag===r&&e.collection===a));if(!c){const s=t.schema.knownTags[r];if(!s||s.collection!==a)return s?i(o,"BAD_COLLECTION_TYPE",`${s.tag} used for ${a} collection, but expects ${s.collection??"scalar"}`,!0):i(o,"TAG_RESOLVE_FAILED",`Unresolved tag: ${r}`,!0),Rn(e,t,n,i,r);t.schema.tags.push(Object.assign({},s,{default:!1})),c=s}const l=Rn(e,t,n,i,r,c),u=c.resolve?.(l,(e=>i(o,"TAG_RESOLVE_FAILED",e)),t.options)??l,f=ke(u)?u:new Fe(u);return f.range=l.range,f.tag=r,c?.format&&(f.format=c.format),f}(Qn,e,t,n,s),a&&(l.anchor=a.source.substring(1));break;default:s(t,"UNEXPECTED_TOKEN","error"===t.type?t.message:`Unsupported token (type: ${t.type})`),l=zn(e,t.offset,void 0,null,n,s),u=!1}if(a&&""===l.anchor&&s(a,"BAD_ALIAS","Anchor cannot be an empty string"),i&&e.options.stringKeys&&(!ye(l)||"string"!=typeof l.value||l.tag&&"tag:yaml.org,2002:str"!==l.tag)){s(c??t,"NON_STRING_KEY","With stringKeys, all keys must be strings")}return o&&(l.spaceBefore=!0),r&&("scalar"===t.type&&""===t.source?l.comment=r:l.commentBefore=r),e.options.keepSourceTokens&&u&&(l.srcToken=t),l}function zn(e,t,n,s,{spaceBefore:i,comment:o,anchor:r,tag:a,end:c},l){const u=Jn(e,{type:"scalar",offset:Hn(t,n,s),indent:-1,source:""},a,l);return r&&(u.anchor=r.source.substring(1),""===u.anchor&&l(r,"BAD_ALIAS","Anchor cannot be an empty string")),i&&(u.spaceBefore=!0),o&&(u.comment=o,u.range[2]=c),u}function Zn(e){if("number"==typeof e)return[e,e+1];if(Array.isArray(e))return 2===e.length?e:[e[0],e[1]];const{offset:t,source:n}=e;return[t,t+("string"==typeof n?n.length:1)]}function es(e){let t="",n=!1,s=!1;for(let i=0;i<e.length;++i){const o=e[i];switch(o[0]){case"#":t+=(""===t?"":s?"\n\n":"\n")+(o.substring(1)||" "),n=!0,s=!1;break;case"%":"#"!==e[i+1]?.[0]&&(i+=1),n=!1;break;default:n||(s=!0),n=!1}}return{comment:t,afterEmptyLine:s}}class ts{constructor(e={}){this.doc=null,this.atDirectives=!1,this.prelude=[],this.errors=[],this.warnings=[],this.onError=(e,t,n,s)=>{const i=Zn(e);s?this.warnings.push(new Ln(i,t,n)):this.errors.push(new xn(i,t,n))},this.directives=new _e({version:e.version||"1.2"}),this.options=e}decorate(e,t){const{comment:n,afterEmptyLine:s}=es(this.prelude);if(n){const i=e.contents;if(t)e.comment=e.comment?`${e.comment}\n${n}`:n;else if(s||e.directives.docStart||!i)e.commentBefore=n;else if(we(i)&&!i.flow&&i.items.length>0){let e=i.items[0];ge(e)&&(e=e.key);const t=e.commentBefore;e.commentBefore=t?`${n}\n${t}`:n}else{const e=i.commentBefore;i.commentBefore=e?`${n}\n${e}`:n}}t?(Array.prototype.push.apply(e.errors,this.errors),Array.prototype.push.apply(e.warnings,this.warnings)):(e.errors=this.errors,e.warnings=this.warnings),this.prelude=[],this.errors=[],this.warnings=[]}streamInfo(){return{comment:es(this.prelude).comment,directives:this.directives,errors:this.errors,warnings:this.warnings}}*compose(e,t=!1,n=-1){for(const t of e)yield*this.next(t);yield*this.end(t,n)}*next(e){switch(e.type){case"directive":this.directives.add(e.source,((t,n,s)=>{const i=Zn(e);i[0]+=t,this.onError(i,"BAD_DIRECTIVE",n,s)})),this.prelude.push(e.source),this.atDirectives=!0;break;case"document":{const t=function(e,t,{offset:n,start:s,value:i,end:o},r){const a=Object.assign({_directives:t},e),c=new In(void 0,a),l={atKey:!1,atRoot:!0,directives:c.directives,options:c.options,schema:c.schema},u=_n(s,{indicator:"doc-start",next:i??o?.[0],offset:n,onError:r,parentIndent:0,startOnNewline:!0});u.found&&(c.directives.docStart=!0,!i||"block-map"!==i.type&&"block-seq"!==i.type||u.hasNewline||r(u.end,"MISSING_CHAR","Block collection cannot start on same line with directives-end marker")),c.contents=i?Xn(l,i,u,r):zn(l,u.end,s,null,u,r);const f=c.contents.range[2],h=Pn(o,f,!1,r);return h.comment&&(c.comment=h.comment),c.range=[n,f,h.offset],c}(this.options,this.directives,e,this.onError);this.atDirectives&&!t.directives.docStart&&this.onError(e,"MISSING_CHAR","Missing directives-end/doc-start indicator line"),this.decorate(t,!1),this.doc&&(yield this.doc),this.doc=t,this.atDirectives=!1;break}case"byte-order-mark":case"space":break;case"comment":case"newline":this.prelude.push(e.source);break;case"error":{const t=e.source?`${e.message}: ${JSON.stringify(e.source)}`:e.message,n=new xn(Zn(e),"UNEXPECTED_TOKEN",t);this.atDirectives||!this.doc?this.errors.push(n):this.doc.errors.push(n);break}case"doc-end":{if(!this.doc){const t="Unexpected doc-end without preceding document";this.errors.push(new xn(Zn(e),"UNEXPECTED_TOKEN",t));break}this.doc.directives.docEnd=!0;const t=Pn(e.end,e.offset+e.source.length,this.doc.options.strict,this.onError);if(this.decorate(this.doc,!0),t.comment){const e=this.doc.comment;this.doc.comment=e?`${e}\n${t.comment}`:t.comment}this.doc.range[2]=t.offset;break}default:this.errors.push(new xn(Zn(e),"UNEXPECTED_TOKEN",`Unsupported token ${e.type}`))}}*end(e=!1,t=-1){if(this.doc)this.decorate(this.doc,!0),yield this.doc,this.doc=null;else if(e){const e=Object.assign({_directives:this.directives},this.options),n=new In(void 0,e);this.atDirectives&&this.onError(t,"MISSING_CHAR","Missing directives-end indicator line"),n.range=[0,t,t],this.decorate(n,!1),yield n}}}function ns(e,t){if(t)for(const n of t)switch(n.type){case"space":case"comment":e.push(n);break;case"newline":return e.push(n),!0}return!1}function ss(e,t,n){switch(e.type){case"scalar":case"double-quoted-scalar":case"single-quoted-scalar":e.type=n,e.source=t;break;case"block-scalar":{const s=e.props.slice(1);let i=t.length;"block-scalar-header"===e.props[0].type&&(i-=e.props[0].source.length);for(const e of s)e.offset+=i;delete e.props,Object.assign(e,{type:n,source:t,end:s});break}case"block-map":case"block-seq":{const s={type:"newline",offset:e.offset+t.length,indent:e.indent,source:"\n"};delete e.items,Object.assign(e,{type:n,source:t,end:[s]});break}default:{const s="indent"in e?e.indent:-1,i="end"in e&&Array.isArray(e.end)?e.end.filter((e=>"space"===e.type||"comment"===e.type||"newline"===e.type)):[];for(const t of Object.keys(e))"type"!==t&&"offset"!==t&&delete e[t];Object.assign(e,{type:n,indent:s,source:t,end:i})}}}function is(e){switch(e.type){case"block-scalar":{let t="";for(const n of e.props)t+=is(n);return t+e.source}case"block-map":case"block-seq":{let t="";for(const n of e.items)t+=os(n);return t}case"flow-collection":{let t=e.start.source;for(const n of e.items)t+=os(n);for(const n of e.end)t+=n.source;return t}case"document":{let t=os(e);if(e.end)for(const n of e.end)t+=n.source;return t}default:{let t=e.source;if("end"in e&&e.end)for(const n of e.end)t+=n.source;return t}}}function os({start:e,key:t,sep:n,value:s}){let i="";for(const t of e)i+=t.source;if(t&&(i+=is(t)),n)for(const e of n)i+=e.source;return s&&(i+=is(s)),i}const rs=Symbol("break visit"),as=Symbol("skip children"),cs=Symbol("remove item");function ls(e,t){"type"in e&&"document"===e.type&&(e={start:e.start,value:e.value}),us(Object.freeze([]),e,t)}function us(e,t,n){let s=n(t,e);if("symbol"==typeof s)return s;for(const i of["key","value"]){const o=t[i];if(o&&"items"in o){for(let t=0;t<o.items.length;++t){const s=us(Object.freeze(e.concat([[i,t]])),o.items[t],n);if("number"==typeof s)t=s-1;else{if(s===rs)return rs;s===cs&&(o.items.splice(t,1),t-=1)}}"function"==typeof s&&"key"===i&&(s=s(t,e))}}return"function"==typeof s?s(t,e):s}ls.BREAK=rs,ls.SKIP=as,ls.REMOVE=cs,ls.itemAtPath=(e,t)=>{let n=e;for(const[e,s]of t){const t=n?.[e];if(!t||!("items"in t))return;n=t.items[s]}return n},ls.parentCollection=(e,t)=>{const n=ls.itemAtPath(e,t.slice(0,-1)),s=t[t.length-1][0],i=n?.[s];if(i&&"items"in i)return i;throw new Error("Parent collection not found")};const fs="\ufeff",hs="",ds="",ps="";function ms(e){switch(e){case fs:return"byte-order-mark";case hs:return"doc-mode";case ds:return"flow-error-end";case ps:return"scalar";case"---":return"doc-start";case"...":return"doc-end";case"":case"\n":case"\r\n":return"newline";case"-":return"seq-item-ind";case"?":return"explicit-key-ind";case":":return"map-value-ind";case"{":return"flow-map-start";case"}":return"flow-map-end";case"[":return"flow-seq-start";case"]":return"flow-seq-end";case",":return"comma"}switch(e[0]){case" ":case"\t":return"space";case"#":return"comment";case"%":return"directive-line";case"*":return"alias";case"&":return"anchor";case"!":return"tag";case"'":return"single-quoted-scalar";case'"':return"double-quoted-scalar";case"|":case">":return"block-scalar-header"}return null}var gs=Object.freeze({__proto__:null,BOM:fs,DOCUMENT:hs,FLOW_END:ds,SCALAR:ps,createScalarToken:function(e,t){const{implicitKey:n=!1,indent:s,inFlow:i=!1,offset:o=-1,type:r="PLAIN"}=t,a=lt({type:r,value:e},{implicitKey:n,indent:s>0?" ".repeat(s):"",inFlow:i,options:{blockQuote:!0,lineWidth:-1}}),c=t.end??[{type:"newline",offset:-1,indent:s,source:"\n"}];switch(a[0]){case"|":case">":{const e=a.indexOf("\n"),t=a.substring(0,e),n=a.substring(e+1)+"\n",i=[{type:"block-scalar-header",offset:o,indent:s,source:t}];return ns(i,c)||i.push({type:"newline",offset:-1,indent:s,source:"\n"}),{type:"block-scalar",offset:o,indent:s,props:i,source:n}}case'"':return{type:"double-quoted-scalar",offset:o,indent:s,source:a,end:c};case"'":return{type:"single-quoted-scalar",offset:o,indent:s,source:a,end:c};default:return{type:"scalar",offset:o,indent:s,source:a,end:c}}},isCollection:e=>!!e&&"items"in e,isScalar:e=>!!e&&("scalar"===e.type||"single-quoted-scalar"===e.type||"double-quoted-scalar"===e.type||"block-scalar"===e.type),prettyToken:function(e){switch(e){case fs:return"<BOM>";case hs:return"<DOC>";case ds:return"<FLOW_END>";case ps:return"<SCALAR>";default:return JSON.stringify(e)}},resolveAsScalar:function(e,t=!0,n){if(e){const s=(e,t,s)=>{const i="number"==typeof e?e:Array.isArray(e)?e[0]:e.offset;if(!n)throw new xn([i,i+1],t,s);n(i,t,s)};switch(e.type){case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return Fn(e,t,s);case"block-scalar":return Un({options:{strict:t}},e,s)}}return null},setScalarValue:function(e,t,n={}){let{afterKey:s=!1,implicitKey:i=!1,inFlow:o=!1,type:r}=n,a="indent"in e?e.indent:null;if(s&&"number"==typeof a&&(a+=2),!r)switch(e.type){case"single-quoted-scalar":r="QUOTE_SINGLE";break;case"double-quoted-scalar":r="QUOTE_DOUBLE";break;case"block-scalar":{const t=e.props[0];if("block-scalar-header"!==t.type)throw new Error("Invalid block scalar header");r=">"===t.source[0]?"BLOCK_FOLDED":"BLOCK_LITERAL";break}default:r="PLAIN"}const c=lt({type:r,value:t},{implicitKey:i||null===a,indent:null!==a&&a>0?" ".repeat(a):"",inFlow:o,options:{blockQuote:!0,lineWidth:-1}});switch(c[0]){case"|":case">":!function(e,t){const n=t.indexOf("\n"),s=t.substring(0,n),i=t.substring(n+1)+"\n";if("block-scalar"===e.type){const t=e.props[0];if("block-scalar-header"!==t.type)throw new Error("Invalid block scalar header");t.source=s,e.source=i}else{const{offset:t}=e,n="indent"in e?e.indent:-1,o=[{type:"block-scalar-header",offset:t,indent:n,source:s}];ns(o,"end"in e?e.end:void 0)||o.push({type:"newline",offset:-1,indent:n,source:"\n"});for(const t of Object.keys(e))"type"!==t&&"offset"!==t&&delete e[t];Object.assign(e,{type:"block-scalar",indent:n,props:o,source:i})}}(e,c);break;case'"':ss(e,c,"double-quoted-scalar");break;case"'":ss(e,c,"single-quoted-scalar");break;default:ss(e,c,"scalar")}},stringify:e=>"type"in e?is(e):os(e),tokenType:ms,visit:ls});function ys(e){switch(e){case void 0:case" ":case"\n":case"\r":case"\t":return!0;default:return!1}}const bs=new Set("0123456789ABCDEFabcdef"),ws=new Set("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()"),ks=new Set(",[]{}"),vs=new Set(" ,[]{}\n\r\t"),Ss=e=>!e||vs.has(e);class Es{constructor(){this.atEnd=!1,this.blockScalarIndent=-1,this.blockScalarKeep=!1,this.buffer="",this.flowKey=!1,this.flowLevel=0,this.indentNext=0,this.indentValue=0,this.lineEndPos=null,this.next=null,this.pos=0}*lex(e,t=!1){if(e){if("string"!=typeof e)throw TypeError("source is not a string");this.buffer=this.buffer?this.buffer+e:e,this.lineEndPos=null}this.atEnd=!t;let n=this.next??"stream";for(;n&&(t||this.hasChars(1));)n=yield*this.parseNext(n)}atLineEnd(){let e=this.pos,t=this.buffer[e];for(;" "===t||"\t"===t;)t=this.buffer[++e];return!t||"#"===t||"\n"===t||"\r"===t&&"\n"===this.buffer[e+1]}charAt(e){return this.buffer[this.pos+e]}continueScalar(e){let t=this.buffer[e];if(this.indentNext>0){let n=0;for(;" "===t;)t=this.buffer[++n+e];if("\r"===t){const t=this.buffer[n+e+1];if("\n"===t||!t&&!this.atEnd)return e+n+1}return"\n"===t||n>=this.indentNext||!t&&!this.atEnd?e+n:-1}if("-"===t||"."===t){const t=this.buffer.substr(e,3);if(("---"===t||"..."===t)&&ys(this.buffer[e+3]))return-1}return e}getLine(){let e=this.lineEndPos;return("number"!=typeof e||-1!==e&&e<this.pos)&&(e=this.buffer.indexOf("\n",this.pos),this.lineEndPos=e),-1===e?this.atEnd?this.buffer.substring(this.pos):null:("\r"===this.buffer[e-1]&&(e-=1),this.buffer.substring(this.pos,e))}hasChars(e){return this.pos+e<=this.buffer.length}setNext(e){return this.buffer=this.buffer.substring(this.pos),this.pos=0,this.lineEndPos=null,this.next=e,null}peek(e){return this.buffer.substr(this.pos,e)}*parseNext(e){switch(e){case"stream":return yield*this.parseStream();case"line-start":return yield*this.parseLineStart();case"block-start":return yield*this.parseBlockStart();case"doc":return yield*this.parseDocument();case"flow":return yield*this.parseFlowCollection();case"quoted-scalar":return yield*this.parseQuotedScalar();case"block-scalar":return yield*this.parseBlockScalar();case"plain-scalar":return yield*this.parsePlainScalar()}}*parseStream(){let e=this.getLine();if(null===e)return this.setNext("stream");if(e[0]===fs&&(yield*this.pushCount(1),e=e.substring(1)),"%"===e[0]){let t=e.length,n=e.indexOf("#");for(;-1!==n;){const s=e[n-1];if(" "===s||"\t"===s){t=n-1;break}n=e.indexOf("#",n+1)}for(;;){const n=e[t-1];if(" "!==n&&"\t"!==n)break;t-=1}const s=(yield*this.pushCount(t))+(yield*this.pushSpaces(!0));return yield*this.pushCount(e.length-s),this.pushNewline(),"stream"}if(this.atLineEnd()){const t=yield*this.pushSpaces(!0);return yield*this.pushCount(e.length-t),yield*this.pushNewline(),"stream"}return yield hs,yield*this.parseLineStart()}*parseLineStart(){const e=this.charAt(0);if(!e&&!this.atEnd)return this.setNext("line-start");if("-"===e||"."===e){if(!this.atEnd&&!this.hasChars(4))return this.setNext("line-start");const e=this.peek(3);if(("---"===e||"..."===e)&&ys(this.charAt(3)))return yield*this.pushCount(3),this.indentValue=0,this.indentNext=0,"---"===e?"doc":"stream"}return this.indentValue=yield*this.pushSpaces(!1),this.indentNext>this.indentValue&&!ys(this.charAt(1))&&(this.indentNext=this.indentValue),yield*this.parseBlockStart()}*parseBlockStart(){const[e,t]=this.peek(2);if(!t&&!this.atEnd)return this.setNext("block-start");if(("-"===e||"?"===e||":"===e)&&ys(t)){const e=(yield*this.pushCount(1))+(yield*this.pushSpaces(!0));return this.indentNext=this.indentValue+1,this.indentValue+=e,yield*this.parseBlockStart()}return"doc"}*parseDocument(){yield*this.pushSpaces(!0);const e=this.getLine();if(null===e)return this.setNext("doc");let t=yield*this.pushIndicators();switch(e[t]){case"#":yield*this.pushCount(e.length-t);case void 0:return yield*this.pushNewline(),yield*this.parseLineStart();case"{":case"[":return yield*this.pushCount(1),this.flowKey=!1,this.flowLevel=1,"flow";case"}":case"]":return yield*this.pushCount(1),"doc";case"*":return yield*this.pushUntil(Ss),"doc";case'"':case"'":return yield*this.parseQuotedScalar();case"|":case">":return t+=(yield*this.parseBlockScalarHeader()),t+=(yield*this.pushSpaces(!0)),yield*this.pushCount(e.length-t),yield*this.pushNewline(),yield*this.parseBlockScalar();default:return yield*this.parsePlainScalar()}}*parseFlowCollection(){let e,t,n=-1;do{e=yield*this.pushNewline(),e>0?(t=yield*this.pushSpaces(!1),this.indentValue=n=t):t=0,t+=(yield*this.pushSpaces(!0))}while(e+t>0);const s=this.getLine();if(null===s)return this.setNext("flow");if(-1!==n&&n<this.indentNext&&"#"!==s[0]||0===n&&(s.startsWith("---")||s.startsWith("..."))&&ys(s[3])){if(!(n===this.indentNext-1&&1===this.flowLevel&&("]"===s[0]||"}"===s[0])))return this.flowLevel=0,yield ds,yield*this.parseLineStart()}let i=0;for(;","===s[i];)i+=(yield*this.pushCount(1)),i+=(yield*this.pushSpaces(!0)),this.flowKey=!1;switch(i+=(yield*this.pushIndicators()),s[i]){case void 0:return"flow";case"#":return yield*this.pushCount(s.length-i),"flow";case"{":case"[":return yield*this.pushCount(1),this.flowKey=!1,this.flowLevel+=1,"flow";case"}":case"]":return yield*this.pushCount(1),this.flowKey=!0,this.flowLevel-=1,this.flowLevel?"flow":"doc";case"*":return yield*this.pushUntil(Ss),"flow";case'"':case"'":return this.flowKey=!0,yield*this.parseQuotedScalar();case":":{const e=this.charAt(1);if(this.flowKey||ys(e)||","===e)return this.flowKey=!1,yield*this.pushCount(1),yield*this.pushSpaces(!0),"flow"}default:return this.flowKey=!1,yield*this.parsePlainScalar()}}*parseQuotedScalar(){const e=this.charAt(0);let t=this.buffer.indexOf(e,this.pos+1);if("'"===e)for(;-1!==t&&"'"===this.buffer[t+1];)t=this.buffer.indexOf("'",t+2);else for(;-1!==t;){let e=0;for(;"\\"===this.buffer[t-1-e];)e+=1;if(e%2==0)break;t=this.buffer.indexOf('"',t+1)}const n=this.buffer.substring(0,t);let s=n.indexOf("\n",this.pos);if(-1!==s){for(;-1!==s;){const e=this.continueScalar(s+1);if(-1===e)break;s=n.indexOf("\n",e)}-1!==s&&(t=s-("\r"===n[s-1]?2:1))}if(-1===t){if(!this.atEnd)return this.setNext("quoted-scalar");t=this.buffer.length}return yield*this.pushToIndex(t+1,!1),this.flowLevel?"flow":"doc"}*parseBlockScalarHeader(){this.blockScalarIndent=-1,this.blockScalarKeep=!1;let e=this.pos;for(;;){const t=this.buffer[++e];if("+"===t)this.blockScalarKeep=!0;else if(t>"0"&&t<="9")this.blockScalarIndent=Number(t)-1;else if("-"!==t)break}return yield*this.pushUntil((e=>ys(e)||"#"===e))}*parseBlockScalar(){let e,t=this.pos-1,n=0;e:for(let s=this.pos;e=this.buffer[s];++s)switch(e){case" ":n+=1;break;case"\n":t=s,n=0;break;case"\r":{const e=this.buffer[s+1];if(!e&&!this.atEnd)return this.setNext("block-scalar");if("\n"===e)break}default:break e}if(!e&&!this.atEnd)return this.setNext("block-scalar");if(n>=this.indentNext){-1===this.blockScalarIndent?this.indentNext=n:this.indentNext=this.blockScalarIndent+(0===this.indentNext?1:this.indentNext);do{const e=this.continueScalar(t+1);if(-1===e)break;t=this.buffer.indexOf("\n",e)}while(-1!==t);if(-1===t){if(!this.atEnd)return this.setNext("block-scalar");t=this.buffer.length}}let s=t+1;for(e=this.buffer[s];" "===e;)e=this.buffer[++s];if("\t"===e){for(;"\t"===e||" "===e||"\r"===e||"\n"===e;)e=this.buffer[++s];t=s-1}else if(!this.blockScalarKeep)for(;;){let e=t-1,s=this.buffer[e];"\r"===s&&(s=this.buffer[--e]);const i=e;for(;" "===s;)s=this.buffer[--e];if(!("\n"===s&&e>=this.pos&&e+1+n>i))break;t=e}return yield ps,yield*this.pushToIndex(t+1,!0),yield*this.parseLineStart()}*parsePlainScalar(){const e=this.flowLevel>0;let t,n=this.pos-1,s=this.pos-1;for(;t=this.buffer[++s];)if(":"===t){const t=this.buffer[s+1];if(ys(t)||e&&ks.has(t))break;n=s}else if(ys(t)){let i=this.buffer[s+1];if("\r"===t&&("\n"===i?(s+=1,t="\n",i=this.buffer[s+1]):n=s),"#"===i||e&&ks.has(i))break;if("\n"===t){const e=this.continueScalar(s+1);if(-1===e)break;s=Math.max(s,e-2)}}else{if(e&&ks.has(t))break;n=s}return t||this.atEnd?(yield ps,yield*this.pushToIndex(n+1,!0),e?"flow":"doc"):this.setNext("plain-scalar")}*pushCount(e){return e>0?(yield this.buffer.substr(this.pos,e),this.pos+=e,e):0}*pushToIndex(e,t){const n=this.buffer.slice(this.pos,e);return n?(yield n,this.pos+=n.length,n.length):(t&&(yield""),0)}*pushIndicators(){switch(this.charAt(0)){case"!":return(yield*this.pushTag())+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators());case"&":return(yield*this.pushUntil(Ss))+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators());case"-":case"?":case":":{const e=this.flowLevel>0,t=this.charAt(1);if(ys(t)||e&&ks.has(t))return e?this.flowKey&&(this.flowKey=!1):this.indentNext=this.indentValue+1,(yield*this.pushCount(1))+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators())}}return 0}*pushTag(){if("<"===this.charAt(1)){let e=this.pos+2,t=this.buffer[e];for(;!ys(t)&&">"!==t;)t=this.buffer[++e];return yield*this.pushToIndex(">"===t?e+1:e,!1)}{let e=this.pos+1,t=this.buffer[e];for(;t;)if(ws.has(t))t=this.buffer[++e];else{if("%"!==t||!bs.has(this.buffer[e+1])||!bs.has(this.buffer[e+2]))break;t=this.buffer[e+=3]}return yield*this.pushToIndex(e,!1)}}*pushNewline(){const e=this.buffer[this.pos];return"\n"===e?yield*this.pushCount(1):"\r"===e&&"\n"===this.charAt(1)?yield*this.pushCount(2):0}*pushSpaces(e){let t,n=this.pos-1;do{t=this.buffer[++n]}while(" "===t||e&&"\t"===t);const s=n-this.pos;return s>0&&(yield this.buffer.substr(this.pos,s),this.pos=n),s}*pushUntil(e){let t=this.pos,n=this.buffer[t];for(;!e(n);)n=this.buffer[++t];return yield*this.pushToIndex(t,!1)}}class Ns{constructor(){this.lineStarts=[],this.addNewLine=e=>this.lineStarts.push(e),this.linePos=e=>{let t=0,n=this.lineStarts.length;for(;t<n;){const s=t+n>>1;this.lineStarts[s]<e?t=s+1:n=s}if(this.lineStarts[t]===e)return{line:t+1,col:1};if(0===t)return{line:0,col:e};return{line:t,col:e-this.lineStarts[t-1]+1}}}}function Os(e,t){for(let n=0;n<e.length;++n)if(e[n].type===t)return!0;return!1}function As(e){for(let t=0;t<e.length;++t)switch(e[t].type){case"space":case"comment":case"newline":break;default:return t}return-1}function Is(e){switch(e?.type){case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":case"flow-collection":return!0;default:return!1}}function Ts(e){switch(e.type){case"document":return e.start;case"block-map":{const t=e.items[e.items.length-1];return t.sep??t.start}case"block-seq":return e.items[e.items.length-1].start;default:return[]}}function $s(e){if(0===e.length)return[];let t=e.length;e:for(;--t>=0;)switch(e[t].type){case"doc-start":case"explicit-key-ind":case"map-value-ind":case"seq-item-ind":case"newline":break e}for(;"space"===e[++t]?.type;);return e.splice(t,e.length)}function xs(e){if("flow-seq-start"===e.start.type)for(const t of e.items)!t.sep||t.value||Os(t.start,"explicit-key-ind")||Os(t.sep,"map-value-ind")||(t.key&&(t.value=t.key),delete t.key,Is(t.value)?t.value.end?Array.prototype.push.apply(t.value.end,t.sep):t.value.end=t.sep:Array.prototype.push.apply(t.start,t.sep),delete t.sep)}class Ls{constructor(e){this.atNewLine=!0,this.atScalar=!1,this.indent=0,this.offset=0,this.onKeyLine=!1,this.stack=[],this.source="",this.type="",this.lexer=new Es,this.onNewLine=e}*parse(e,t=!1){this.onNewLine&&0===this.offset&&this.onNewLine(0);for(const n of this.lexer.lex(e,t))yield*this.next(n);t||(yield*this.end())}*next(e){if(this.source=e,this.atScalar)return this.atScalar=!1,yield*this.step(),void(this.offset+=e.length);const t=ms(e);if(t)if("scalar"===t)this.atNewLine=!1,this.atScalar=!0,this.type="scalar";else{switch(this.type=t,yield*this.step(),t){case"newline":this.atNewLine=!0,this.indent=0,this.onNewLine&&this.onNewLine(this.offset+e.length);break;case"space":this.atNewLine&&" "===e[0]&&(this.indent+=e.length);break;case"explicit-key-ind":case"map-value-ind":case"seq-item-ind":this.atNewLine&&(this.indent+=e.length);break;case"doc-mode":case"flow-error-end":return;default:this.atNewLine=!1}this.offset+=e.length}else{const t=`Not a YAML token: ${e}`;yield*this.pop({type:"error",offset:this.offset,message:t,source:e}),this.offset+=e.length}}*end(){for(;this.stack.length>0;)yield*this.pop()}get sourceToken(){return{type:this.type,offset:this.offset,indent:this.indent,source:this.source}}*step(){const e=this.peek(1);if("doc-end"!==this.type||e&&"doc-end"===e.type){if(!e)return yield*this.stream();switch(e.type){case"document":return yield*this.document(e);case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return yield*this.scalar(e);case"block-scalar":return yield*this.blockScalar(e);case"block-map":return yield*this.blockMap(e);case"block-seq":return yield*this.blockSequence(e);case"flow-collection":return yield*this.flowCollection(e);case"doc-end":return yield*this.documentEnd(e)}yield*this.pop()}else{for(;this.stack.length>0;)yield*this.pop();this.stack.push({type:"doc-end",offset:this.offset,source:this.source})}}peek(e){return this.stack[this.stack.length-e]}*pop(e){const t=e??this.stack.pop();if(t)if(0===this.stack.length)yield t;else{const e=this.peek(1);switch("block-scalar"===t.type?t.indent="indent"in e?e.indent:0:"flow-collection"===t.type&&"document"===e.type&&(t.indent=0),"flow-collection"===t.type&&xs(t),e.type){case"document":e.value=t;break;case"block-scalar":e.props.push(t);break;case"block-map":{const n=e.items[e.items.length-1];if(n.value)return e.items.push({start:[],key:t,sep:[]}),void(this.onKeyLine=!0);if(!n.sep)return Object.assign(n,{key:t,sep:[]}),void(this.onKeyLine=!n.explicitKey);n.value=t;break}case"block-seq":{const n=e.items[e.items.length-1];n.value?e.items.push({start:[],value:t}):n.value=t;break}case"flow-collection":{const n=e.items[e.items.length-1];return void(!n||n.value?e.items.push({start:[],key:t,sep:[]}):n.sep?n.value=t:Object.assign(n,{key:t,sep:[]}))}default:yield*this.pop(),yield*this.pop(t)}if(!("document"!==e.type&&"block-map"!==e.type&&"block-seq"!==e.type||"block-map"!==t.type&&"block-seq"!==t.type)){const n=t.items[t.items.length-1];n&&!n.sep&&!n.value&&n.start.length>0&&-1===As(n.start)&&(0===t.indent||n.start.every((e=>"comment"!==e.type||e.indent<t.indent)))&&("document"===e.type?e.end=n.start:e.items.push({start:n.start}),t.items.splice(-1,1))}}else{const e="Tried to pop an empty stack";yield{type:"error",offset:this.offset,source:"",message:e}}}*stream(){switch(this.type){case"directive-line":return void(yield{type:"directive",offset:this.offset,source:this.source});case"byte-order-mark":case"space":case"comment":case"newline":return void(yield this.sourceToken);case"doc-mode":case"doc-start":{const e={type:"document",offset:this.offset,start:[]};return"doc-start"===this.type&&e.start.push(this.sourceToken),void this.stack.push(e)}}yield{type:"error",offset:this.offset,message:`Unexpected ${this.type} token in YAML stream`,source:this.source}}*document(e){if(e.value)return yield*this.lineEnd(e);switch(this.type){case"doc-start":return void(-1!==As(e.start)?(yield*this.pop(),yield*this.step()):e.start.push(this.sourceToken));case"anchor":case"tag":case"space":case"comment":case"newline":return void e.start.push(this.sourceToken)}const t=this.startBlockValue(e);t?this.stack.push(t):yield{type:"error",offset:this.offset,message:`Unexpected ${this.type} token in YAML document`,source:this.source}}*scalar(e){if("map-value-ind"===this.type){const t=$s(Ts(this.peek(2)));let n;e.end?(n=e.end,n.push(this.sourceToken),delete e.end):n=[this.sourceToken];const s={type:"block-map",offset:e.offset,indent:e.indent,items:[{start:t,key:e,sep:n}]};this.onKeyLine=!0,this.stack[this.stack.length-1]=s}else yield*this.lineEnd(e)}*blockScalar(e){switch(this.type){case"space":case"comment":case"newline":return void e.props.push(this.sourceToken);case"scalar":if(e.source=this.source,this.atNewLine=!0,this.indent=0,this.onNewLine){let e=this.source.indexOf("\n")+1;for(;0!==e;)this.onNewLine(this.offset+e),e=this.source.indexOf("\n",e)+1}yield*this.pop();break;default:yield*this.pop(),yield*this.step()}}*blockMap(e){const t=e.items[e.items.length-1];switch(this.type){case"newline":if(this.onKeyLine=!1,t.value){const n="end"in t.value?t.value.end:void 0,s=Array.isArray(n)?n[n.length-1]:void 0;"comment"===s?.type?n?.push(this.sourceToken):e.items.push({start:[this.sourceToken]})}else t.sep?t.sep.push(this.sourceToken):t.start.push(this.sourceToken);return;case"space":case"comment":if(t.value)e.items.push({start:[this.sourceToken]});else if(t.sep)t.sep.push(this.sourceToken);else{if(this.atIndentedComment(t.start,e.indent)){const n=e.items[e.items.length-2],s=n?.value?.end;if(Array.isArray(s))return Array.prototype.push.apply(s,t.start),s.push(this.sourceToken),void e.items.pop()}t.start.push(this.sourceToken)}return}if(this.indent>=e.indent){const n=!this.onKeyLine&&this.indent===e.indent,s=n&&(t.sep||t.explicitKey)&&"seq-item-ind"!==this.type;let i=[];if(s&&t.sep&&!t.value){const n=[];for(let s=0;s<t.sep.length;++s){const i=t.sep[s];switch(i.type){case"newline":n.push(s);break;case"space":break;case"comment":i.indent>e.indent&&(n.length=0);break;default:n.length=0}}n.length>=2&&(i=t.sep.splice(n[1]))}switch(this.type){case"anchor":case"tag":return void(s||t.value?(i.push(this.sourceToken),e.items.push({start:i}),this.onKeyLine=!0):t.sep?t.sep.push(this.sourceToken):t.start.push(this.sourceToken));case"explicit-key-ind":return t.sep||t.explicitKey?s||t.value?(i.push(this.sourceToken),e.items.push({start:i,explicitKey:!0})):this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:[this.sourceToken],explicitKey:!0}]}):(t.start.push(this.sourceToken),t.explicitKey=!0),void(this.onKeyLine=!0);case"map-value-ind":if(t.explicitKey)if(t.sep)if(t.value)e.items.push({start:[],key:null,sep:[this.sourceToken]});else if(Os(t.sep,"map-value-ind"))this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:i,key:null,sep:[this.sourceToken]}]});else if(Is(t.key)&&!Os(t.sep,"newline")){const e=$s(t.start),n=t.key,s=t.sep;s.push(this.sourceToken),delete t.key,delete t.sep,this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:e,key:n,sep:s}]})}else i.length>0?t.sep=t.sep.concat(i,this.sourceToken):t.sep.push(this.sourceToken);else if(Os(t.start,"newline"))Object.assign(t,{key:null,sep:[this.sourceToken]});else{const e=$s(t.start);this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:e,key:null,sep:[this.sourceToken]}]})}else t.sep?t.value||s?e.items.push({start:i,key:null,sep:[this.sourceToken]}):Os(t.sep,"map-value-ind")?this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:[],key:null,sep:[this.sourceToken]}]}):t.sep.push(this.sourceToken):Object.assign(t,{key:null,sep:[this.sourceToken]});return void(this.onKeyLine=!0);case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":{const n=this.flowScalar(this.type);return void(s||t.value?(e.items.push({start:i,key:n,sep:[]}),this.onKeyLine=!0):t.sep?this.stack.push(n):(Object.assign(t,{key:n,sep:[]}),this.onKeyLine=!0))}default:{const s=this.startBlockValue(e);if(s){if("block-seq"===s.type){if(!t.explicitKey&&t.sep&&!Os(t.sep,"newline"))return void(yield*this.pop({type:"error",offset:this.offset,message:"Unexpected block-seq-ind on same line with key",source:this.source}))}else n&&e.items.push({start:i});return void this.stack.push(s)}}}}yield*this.pop(),yield*this.step()}*blockSequence(e){const t=e.items[e.items.length-1];switch(this.type){case"newline":if(t.value){const n="end"in t.value?t.value.end:void 0,s=Array.isArray(n)?n[n.length-1]:void 0;"comment"===s?.type?n?.push(this.sourceToken):e.items.push({start:[this.sourceToken]})}else t.start.push(this.sourceToken);return;case"space":case"comment":if(t.value)e.items.push({start:[this.sourceToken]});else{if(this.atIndentedComment(t.start,e.indent)){const n=e.items[e.items.length-2],s=n?.value?.end;if(Array.isArray(s))return Array.prototype.push.apply(s,t.start),s.push(this.sourceToken),void e.items.pop()}t.start.push(this.sourceToken)}return;case"anchor":case"tag":if(t.value||this.indent<=e.indent)break;return void t.start.push(this.sourceToken);case"seq-item-ind":if(this.indent!==e.indent)break;return void(t.value||Os(t.start,"seq-item-ind")?e.items.push({start:[this.sourceToken]}):t.start.push(this.sourceToken))}if(this.indent>e.indent){const t=this.startBlockValue(e);if(t)return void this.stack.push(t)}yield*this.pop(),yield*this.step()}*flowCollection(e){const t=e.items[e.items.length-1];if("flow-error-end"===this.type){let e;do{yield*this.pop(),e=this.peek(1)}while(e&&"flow-collection"===e.type)}else if(0===e.end.length){switch(this.type){case"comma":case"explicit-key-ind":return void(!t||t.sep?e.items.push({start:[this.sourceToken]}):t.start.push(this.sourceToken));case"map-value-ind":return void(!t||t.value?e.items.push({start:[],key:null,sep:[this.sourceToken]}):t.sep?t.sep.push(this.sourceToken):Object.assign(t,{key:null,sep:[this.sourceToken]}));case"space":case"comment":case"newline":case"anchor":case"tag":return void(!t||t.value?e.items.push({start:[this.sourceToken]}):t.sep?t.sep.push(this.sourceToken):t.start.push(this.sourceToken));case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":{const n=this.flowScalar(this.type);return void(!t||t.value?e.items.push({start:[],key:n,sep:[]}):t.sep?this.stack.push(n):Object.assign(t,{key:n,sep:[]}))}case"flow-map-end":case"flow-seq-end":return void e.end.push(this.sourceToken)}const n=this.startBlockValue(e);n?this.stack.push(n):(yield*this.pop(),yield*this.step())}else{const t=this.peek(2);if("block-map"===t.type&&("map-value-ind"===this.type&&t.indent===e.indent||"newline"===this.type&&!t.items[t.items.length-1].sep))yield*this.pop(),yield*this.step();else if("map-value-ind"===this.type&&"flow-collection"!==t.type){const n=$s(Ts(t));xs(e);const s=e.end.splice(1,e.end.length);s.push(this.sourceToken);const i={type:"block-map",offset:e.offset,indent:e.indent,items:[{start:n,key:e,sep:s}]};this.onKeyLine=!0,this.stack[this.stack.length-1]=i}else yield*this.lineEnd(e)}}flowScalar(e){if(this.onNewLine){let e=this.source.indexOf("\n")+1;for(;0!==e;)this.onNewLine(this.offset+e),e=this.source.indexOf("\n",e)+1}return{type:e,offset:this.offset,indent:this.indent,source:this.source}}startBlockValue(e){switch(this.type){case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return this.flowScalar(this.type);case"block-scalar-header":return{type:"block-scalar",offset:this.offset,indent:this.indent,props:[this.sourceToken],source:""};case"flow-map-start":case"flow-seq-start":return{type:"flow-collection",offset:this.offset,indent:this.indent,start:this.sourceToken,items:[],end:[]};case"seq-item-ind":return{type:"block-seq",offset:this.offset,indent:this.indent,items:[{start:[this.sourceToken]}]};case"explicit-key-ind":{this.onKeyLine=!0;const t=$s(Ts(e));return t.push(this.sourceToken),{type:"block-map",offset:this.offset,indent:this.indent,items:[{start:t,explicitKey:!0}]}}case"map-value-ind":{this.onKeyLine=!0;const t=$s(Ts(e));return{type:"block-map",offset:this.offset,indent:this.indent,items:[{start:t,key:null,sep:[this.sourceToken]}]}}}return null}atIndentedComment(e,t){return"comment"===this.type&&(!(this.indent<=t)&&e.every((e=>"newline"===e.type||"space"===e.type)))}*documentEnd(e){"doc-mode"!==this.type&&(e.end?e.end.push(this.sourceToken):e.end=[this.sourceToken],"newline"===this.type&&(yield*this.pop()))}*lineEnd(e){switch(this.type){case"comma":case"doc-start":case"doc-end":case"flow-seq-end":case"flow-map-end":case"map-value-ind":yield*this.pop(),yield*this.step();break;case"newline":this.onKeyLine=!1;default:e.end?e.end.push(this.sourceToken):e.end=[this.sourceToken],"newline"===this.type&&(yield*this.pop())}}}function Cs(e){const t=!1!==e.prettyErrors;return{lineCounter:e.lineCounter||t&&new Ns||null,prettyErrors:t}}function _s(e,t={}){const{lineCounter:n,prettyErrors:s}=Cs(t),i=new Ls(n?.addNewLine),o=new ts(t);let r=null;for(const t of o.compose(i.parse(e),!0,e.length))if(r){if("silent"!==r.options.logLevel){r.errors.push(new xn(t.range.slice(0,2),"MULTIPLE_DOCS","Source contains multiple documents; please use YAML.parseAllDocuments()"));break}}else r=t;return s&&n&&(r.errors.forEach(Cn(e,n)),r.warnings.forEach(Cn(e,n))),r}var Bs=Object.freeze({__proto__:null,Alias:qe,CST:gs,Composer:ts,Document:In,Lexer:Es,LineCounter:Ns,Pair:wt,Parser:Ls,Scalar:Fe,Schema:An,YAMLError:$n,YAMLMap:Ot,YAMLParseError:xn,YAMLSeq:It,YAMLWarning:Ln,isAlias:de,isCollection:we,isDocument:pe,isMap:me,isNode:ke,isPair:ge,isScalar:ye,isSeq:be,parse:function(e,t,n){let s;"function"==typeof t?s=t:void 0===n&&t&&"object"==typeof t&&(n=t);const i=_s(e,n);if(!i)return null;if(i.warnings.forEach((e=>ht(i.options.logLevel,e))),i.errors.length>0){if("silent"!==i.options.logLevel)throw i.errors[0];i.errors=[]}return i.toJS(Object.assign({reviver:s},n))},parseAllDocuments:function(e,t={}){const{lineCounter:n,prettyErrors:s}=Cs(t),i=new Ls(n?.addNewLine),o=new ts(t),r=Array.from(o.compose(i.parse(e)));if(s&&n)for(const t of r)t.errors.forEach(Cn(e,n)),t.warnings.forEach(Cn(e,n));return r.length>0?r:Object.assign([],{empty:!0},o.streamInfo())},parseDocument:_s,stringify:function(e,t,n){let s=null;if("function"==typeof t||Array.isArray(t)?s=t:void 0===n&&t&&(n=t),"string"==typeof n&&(n=n.length),"number"==typeof n){const e=Math.round(n);n=e<1?void 0:e>8?{indent:8}:{indent:e}}if(void 0===e){const{keepUndefined:e}=n??t??{};if(!e)return}return pe(e)&&!s?e.toString(n):new In(e,s,n).toString(n)},visit:Oe,visitAsync:Ie});function Ms(e){if(!e)return[];const t=[];let n="",s=!1,i=!1;for(let o=0;o<e.length;o++){const r=e[o];'"'!==r||i?"'"!==r||s?" "!==r||s||i?n+=r:n&&(t.push(n),n=""):i=!i:s=!s}return n&&t.push(n),t}function Ks(e,t){const n=["--yes-always","--no-check-update","--no-gitignore","--no-show-model-warnings","--no-show-release-notes",...Ms(e.aiderExtraArgs||o)];return e.dryRun&&n.push("--dry-run"),n.push("--message",t.prompt),t.resolutionPlan&&"filePaths"in t.resolutionPlan&&n.push(...t.resolutionPlan.filePaths),n}const js=["gpt-","o1","o3","o4"];async function Ps(e,t,n){const{ignoreExitStatus:s,...i}=n??{};console.info(f.green(`$ ${e} ${t}`)),console.info("stdout: ---------------------");const o=await Ds(e,t,i),r=o.stderr.trim();return r&&(console.info("stderr: ---------------------"),console.info(f.yellow(r))),console.info("-----------------------------"),console.info(f.magenta(`Exit code: ${o.status}\n`)),s||0===o.status||null===o.status||process.exit(o.status),o.stdout}async function Ds(e,n,s){return new Promise(((i,o)=>{try{const r=(n??[]).map((e=>e.replace(/\0/g,""))),a=t(e,r,s);a.stdout?.setEncoding?.("utf8"),a.stderr?.setEncoding?.("utf8");let c="",l="";a.stdout?.on("data",(e=>{process.stdout.write(e),c+=e})),a.stderr?.on("data",(e=>{l+=e})),a.on("error",(e=>{o(e)})),a.on("close",((e,t)=>{void 0===a.pid?o(new Error("Process has no pid.")):i({pid:a.pid,stdout:c,stderr:l,status:e,signal:t})}))}catch(e){o(e)}}))}const qs="repomix.result";async function Rs(e,t,s,i,o){const{url:a,apiKey:c}=function(e){let t,n;return e.startsWith("gemini-")?(t="https://generativelanguage.googleapis.com/v1beta/openai/chat/completions",n=process.env.GEMINI_API_KEY||""):js.some((t=>e.startsWith(t)))?(t="https://api.openai.com/v1/chat/completions",n=process.env.OPENAI_API_KEY||""):(console.error(`Unknown model: ${e}`),process.exit(1)),{url:t,apiKey:n}}(e),l=["--yes","repomix@latest","--output",qs];l.push(...Ms(o||r)),await Ps("npx",l);const u=n.readFileSync(qs,"utf8");n.promises.rm(qs,{force:!0});const f=s?"# Plan to Resolve the Issue\n\n1. <Description of step 1>\n2. <Description of step 2>\n3. ...\n\n":"",h=`\nReview the following GitHub issue and the following list of available file paths and their contents.\nBased on this information, please perform the following tasks:\n\n- Create a step-by-step plan outlining how to address the GitHub issue. The plan must focus on writing code excluding tests.\n${s?"\n- Identify the files from the provided list that will need to be modified to implement the plan and resolve the issue.":""}\n\nGitHub Issue:\n\`\`\`\`yml\n${Bs.stringify(t).trim()}\n\`\`\`\`\n\nAvailable files: The user will provide this as a separate message.\n\nPlease format your response as follows:\n\`\`\`\n${f}# File Paths to be Modified\n\n- \`<filePath1>\`\n- \`<filePath2>\`\n- ...\n\`\`\`\n\nEnsure that the file paths are exactly as provided in the input.\n`.trim();console.info(`Generating plan with ${e} (reasoning effort: ${i}) ...`);const d=await async function(e,t,n,s,i){t||(console.error(`API key for ${n} is not set.`),process.exit(1));const o={model:n,messages:s};void 0!==i&&(o.reasoning_effort=i);const r=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify(o)});if(!r.ok){const e=await r.text();console.error(`LLM API error: ${r.statusText} (${r.status}): ${e}`),process.exit(1)}return(await r.json()).choices[0].message.content}(a,c,e,[{role:"system",content:h},{role:"user",content:u}],i);console.info("Planning complete!");const p="# Plan to Resolve the Issue",m="# File Paths to be Modified";let g,y=[];const b=d.indexOf(p),w=d.indexOf(m);if(-1!==b){const e=b+27,t=-1!==w?w:d.length;g=d.slice(e,t).trim()}if(-1!==w){const e=w+27,t=/\B-\s*`?([^`\n]+)`?/g;y=[...d.slice(e).trim().matchAll(t)].map((e=>e[1].trim()))}return{plan:g,filePaths:y}}async function Us(e,t,n){const s=Ks(e,{prompt:t,resolutionPlan:n});console.info(f.cyan(`Asking Aider to fix "${e.testCommand}"...`));const i=await Ps("aider",s,{env:{...process.env,NO_COLOR:"1"}});return`\n\n# Aider fix attempt for "${e.testCommand}"\n\n${i.trim()}`}async function Fs(t){t.dryRun?console.info(f.yellow("Running in dry-run mode. No branches or PRs will be created.")):await async function(){if(!(await Ps("git",["config","user.name"],{ignoreExitStatus:!0})).trim()){const e=(await Ps("gh",["api","user","--jq",".name"])).trim();if(e&&"null"!==e){const t=e.replace(/^"|"$/g,"");await Ps("git",["config","user.name",t])}else console.warn(f.yellow('Could not retrieve user name from GitHub profile (it might be "null" or not set).'))}if(!(await Ps("git",["config","user.email"],{ignoreExitStatus:!0})).trim()){const e=(await Ps("gh",["api","user","--jq",".email"])).trim();if(e&&"null"!==e){const t=e.replace(/^"|"$/g,"");await Ps("git",["config","user.email",t])}else console.warn(f.yellow('Could not retrieve user email from GitHub profile (it might be "null", private, or not set).'))}}(),await Ps("python",["-m","pip","install","aider-install"]),await Ps("uv",["tool","uninstall","aider-chat"],{ignoreExitStatus:!0}),await Ps("aider-install",[]),await Ps("uv",["tool","run","--from","aider-chat","pip","install","boto3"]);const n=await Ps("gh",["issue","view",t.issueNumber.toString(),"--json","author,title,body,labels,comments"]),s=JSON.parse(n),i=s.body.replace(/<!--[\s\S]*?-->/g,"");const o={author:s.author.login,title:s.title,description:i,comments:s.comments.map((e=>({author:e.author.login,body:e.body})))},r=Bs.stringify(o).trim(),a=t.planningModel&&await Rs(t.planningModel,r,t.detailedPlan,t.reasoningEffort,t.repomixExtraArgs)||void 0,c=a&&"plan"in a&&a.plan?`\n# Plan\n\n${a.plan}\n`.trim():"",l=`\nModify the code to resolve the following GitHub issue:\n\`\`\`\`yml\n${r}\n\`\`\`\`\n\n${c}\n`.trim(),u=new Date,h=`ai-pr-${t.issueNumber}-${u.getFullYear()}_${Gs(u.getMonth()+1)}${Gs(u.getDate())}_${Gs(u.getHours())}${Gs(u.getMinutes())}${Gs(u.getSeconds())}`;t.dryRun?console.info(f.yellow(`Would create branch: ${h}`)):await Ps("git",["switch","-C",h]);const d=Ks(t,{prompt:l,resolutionPlan:a});let p=(await Ps("aider",d,{env:{...process.env,NO_COLOR:"1"}})).trim();t.testCommand&&(p+=await async function(e,t){const n=e.maxTestAttempts;let s=0,i="";for(;s<n;){s++,console.info(f.cyan(`Executing test command (attempt ${s}/${n}): ${e.testCommand}`));const[o,...r]=Ms(e.testCommand||""),a=await Ds(o,r,{cwd:process.cwd()});if(0===a.status){console.info(f.green("Test command passed successfully."));break}if(console.warn(f.yellow(`Test command failed with exit code ${a.status}.`)),s>=n){console.warn(f.yellow(`Maximum fix attempts (${n}) reached. Giving up.`));break}const c=`\nThe previous changes were applied, but the test command \`${e.testCommand}\` failed.\n\nExit code: ${a.status}\n\nStdout:\n\`\`\`\n${a.stdout}\n\`\`\`\n\nStderr:\n\`\`\`\n${a.stderr}\n\`\`\`\n\nPlease analyze the output and fix the errors.\n`.trim();i+=await Us(e,c,t)}return i}(t,a)),await Ps("git",["commit","-m",`fix: close #${t.issueNumber}`,"--no-verify"],{ignoreExitStatus:!0}),t.dryRun?console.info(f.yellow(`Would push branch: ${h} to origin`)):await Ps("git",["push","origin",h,"--no-verify"]);const m=e.spawnSync("git",["log","main..HEAD","--reverse","--pretty=%s"],{encoding:"utf8",stdio:"pipe"}).stdout.trim().split("\n")[0];let g=`Closes #${t.issueNumber}\n\n${c}\n`;if(g+=`\n# Aider Log\n\n\`\`\`\`\n${p.slice(0,65e3-g.length)}\n\`\`\`\``,g=g.replaceAll(/(?:\s*\n){2,}/g,"\n\n").trim(),t.dryRun)console.info(f.yellow(`Would create PR with title: ${m}`)),console.info(f.yellow(`PR body would include the aider response and close issue #${t.issueNumber}`));else{const t=function(){const t=e.spawnSync("git",["remote","get-url","origin"],{encoding:"utf8",stdio:"pipe"}),n=t.stdout.trim().match(/github\.com[\/:]([\w-]+\/[\w-]+)(\.git)?$/);return n?n[1]:""}();await Ps("gh",["pr","create","--title",m,"--body",g,"--repo",t])}console.info(`\nIssue #${t.issueNumber} processed successfully.`),console.info("AWS_REGION_NAME:",process.env.AWS_REGION_NAME)}function Gs(e){return String(e).padStart(2,"0")}export{a as D,o as a,r as b,s as c,i as g,Fs as m};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1qell4d1BPaS5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL2RlZmF1bHRPcHRpb25zLnRzIiwiLi4vbm9kZV9tb2R1bGVzL2Fuc2lzL2luZGV4LmNqcyIsIi4uL25vZGVfbW9kdWxlcy9hbnNpcy9pbmRleC5tanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvaWRlbnRpdHkuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvdmlzaXQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZG9jL2RpcmVjdGl2ZXMuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZG9jL2FuY2hvcnMuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZG9jL2FwcGx5UmV2aXZlci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9ub2Rlcy90b0pTLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L25vZGVzL05vZGUuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvQWxpYXMuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvU2NhbGFyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2RvYy9jcmVhdGVOb2RlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L25vZGVzL0NvbGxlY3Rpb24uanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L3N0cmluZ2lmeUNvbW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L2ZvbGRGbG93TGluZXMuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L3N0cmluZ2lmeVN0cmluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2xvZy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvbWVyZ2UuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvYWRkUGFpclRvSlNNYXAuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvUGFpci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5UGFpci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5Q29sbGVjdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9ub2Rlcy9ZQU1MTWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9jb21tb24vbWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L25vZGVzL1lBTUxTZXEuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvbW1vbi9zZXEuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvbW1vbi9zdHJpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvbW1vbi9udWxsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9jb3JlL2Jvb2wuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L3N0cmluZ2lmeU51bWJlci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvY29yZS9mbG9hdC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvY29yZS9pbnQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvcmUvc2NoZW1hLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9qc29uL3NjaGVtYS5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvYmluYXJ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS95YW1sLTEuMS9wYWlycy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvb21hcC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvYm9vbC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvZmxvYXQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL3lhbWwtMS4xL2ludC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvc2V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS95YW1sLTEuMS90aW1lc3RhbXAuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL3lhbWwtMS4xL3NjaGVtYS5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvdGFncy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvU2NoZW1hLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2RvYy9Eb2N1bWVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5RG9jdW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZXJyb3JzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvcmVzb2x2ZS1wcm9wcy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3V0aWwtY29udGFpbnMtbmV3bGluZS5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3V0aWwtZmxvdy1pbmRlbnQtY2hlY2suanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS91dGlsLW1hcC1pbmNsdWRlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3Jlc29sdmUtYmxvY2stbWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvcmVzb2x2ZS1lbmQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS9yZXNvbHZlLWZsb3ctY29sbGVjdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL2NvbXBvc2UtY29sbGVjdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3Jlc29sdmUtYmxvY2stc2VxLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvcmVzb2x2ZS1ibG9jay1zY2FsYXIuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS9yZXNvbHZlLWZsb3ctc2NhbGFyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvY29tcG9zZS1zY2FsYXIuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS91dGlsLWVtcHR5LXNjYWxhci1wb3NpdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL2NvbXBvc2Utbm9kZS5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL2NvbXBvc2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvY29tcG9zZS1kb2MuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvcGFyc2UvY3N0LXNjYWxhci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wYXJzZS9jc3Qtc3RyaW5naWZ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3BhcnNlL2NzdC12aXNpdC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wYXJzZS9jc3QuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvcGFyc2UvbGV4ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvcGFyc2UvbGluZS1jb3VudGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3BhcnNlL3BhcnNlci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wdWJsaWMtYXBpLmpzIiwiLi4vc3JjL3V0aWxzLnRzIiwiLi4vc3JjL2FpZGVyLnRzIiwiLi4vc3JjL2xsbS50cyIsIi4uL3NyYy9zcGF3bi50cyIsIi4uL3NyYy9wbGFuLnRzIiwiLi4vc3JjL3Rlc3QudHMiLCIuLi9zcmMvbWFpbi50cyIsIi4uL3NyYy9wcm9maWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFdlIHNob3VsZCBzcGVjaWZ5IHRoZSBsYW5ndWFnZS4gY2YuIGh0dHBzOi8vZ2l0aHViLmNvbS9BaWRlci1BSS9haWRlci9pc3N1ZXMvMzk3MVxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQUlERVJfRVhUUkFfQVJHUyA9XG4gICctLW1vZGVsIGdlbWluaS9nZW1pbmktMi41LXByby1wcmV2aWV3LTA1LTA2IC0tZWRpdC1mb3JtYXQgZGlmZi1mZW5jZWQgLS1jaGF0LWxhbmd1YWdlIEVuZ2xpc2gnO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfUkVQT01JWF9FWFRSQV9BUkdTID0gJy0tY29tcHJlc3MgLS1yZW1vdmUtZW1wdHktbGluZXMgLS1pbmNsdWRlIFwic3JjLyoqLyoue3RzLHRzeH0sKiovKi5tZFwiJztcbmV4cG9ydCBjb25zdCBERUZBVUxUX01BWF9URVNUX0FUVEVNUFRTID0gNTtcbiIsImxldCBlLHQscix7ZGVmaW5lUHJvcGVydHk6bixzZXRQcm90b3R5cGVPZjpsLGNyZWF0ZTpvLGtleXM6c309T2JqZWN0LGk9XCJcIix7cm91bmQ6YyxtYXg6YX09TWF0aCxwPWU9PntsZXQgdD0vKFthLWZcXGRdezMsNn0pL2kuZXhlYyhlKT8uWzFdLHI9dD8ubGVuZ3RoLG49cGFyc2VJbnQoNl5yPzNecj9cIjBcIjp0WzBdK3RbMF0rdFsxXSt0WzFdK3RbMl0rdFsyXTp0LDE2KTtyZXR1cm5bbj4+MTYmMjU1LG4+PjgmMjU1LDI1NSZuXX0sdT0oZSx0LHIpPT5lXnR8fHRecj8xNiszNipjKGUvNTEpKzYqYyh0LzUxKStjKHIvNTEpOjg+ZT8xNjplPjI0OD8yMzE6YygyNCooZS04KS8yNDcpKzIzMixkPWU9PntsZXQgdCxyLG4sbCxvO3JldHVybiA4PmU/MzArZToxNj5lP2UtOCs5MDooMjMyPmU/KG89KGUtPTE2KSUzNix0PShlLzM2fDApLzUscj0oby82fDApLzUsbj1vJTYvNSk6dD1yPW49KDEwKihlLTIzMikrOCkvMjU1LGw9MiphKHQscixuKSxsPzMwKyhjKG4pPDwyfGMocik8PDF8Yyh0KSkrKDJebD8wOjYwKTozMCl9LGc9KCgpPT57bGV0IHI9ZT0+by5zb21lKCh0PT5lLnRlc3QodCkpKSxuPWdsb2JhbFRoaXMsbD1uLnByb2Nlc3M/P3t9LG89bC5hcmd2Pz9bXSxpPWwuZW52Pz97fSxjPS0xO3RyeXtlPVwiLFwiK3MoaSkuam9pbihcIixcIil9Y2F0Y2goZSl7aT17fSxjPTB9bGV0IGE9XCJGT1JDRV9DT0xPUlwiLHA9e2ZhbHNlOjAsMDowLDE6MSwyOjIsMzozfVtpW2FdXT8/LTEsdT1hIGluIGkmJnB8fHIoL14tLWNvbG9yPT8odHJ1ZXxhbHdheXMpPyQvKTtyZXR1cm4gdSYmKGM9cCksfmN8fChjPSgocixuLGwpPT4odD1yLlRFUk0se1wiMjRiaXRcIjozLHRydWVjb2xvcjozLGFuc2kyNTY6MixhbnNpOjF9W3IuQ09MT1JURVJNXXx8KHIuQ0k/LyxHSVRIVUIvLnRlc3QoZSk/MzoxOm4mJlwiZHVtYlwiIT09dD9sPzM6Ly0yNTYvLnRlc3QodCk/MjoxOjApKSkoaSwhIWkuUE0yX0hPTUV8fGkuTkVYVF9SVU5USU1FPy5pbmNsdWRlcyhcImVkZ2VcIil8fCEhbC5zdGRvdXQ/LmlzVFRZLFwid2luMzJcIj09PWwucGxhdGZvcm0pKSwhcHx8aS5OT19DT0xPUnx8cigvXi0tKG5vLWNvbG9yfGNvbG9yPShmYWxzZXxuZXZlcikpJC8pPzA6bi53aW5kb3c/LmNocm9tZXx8dSYmIWM/MzpjfSkoKSxmPXtvcGVuOmksY2xvc2U6aX0saD0zOSxiPTQ5LE89e30sbT0oe3A6ZX0se29wZW46dCxjbG9zZTpufSk9PntsZXQgbz0oZSwuLi5yKT0+e2lmKCFlKXtpZih0JiZ0PT09bilyZXR1cm4gdDtpZigoZT8/aSk9PT1pKXJldHVybiBpfWxldCBsLHM9ZS5yYXc/U3RyaW5nLnJhdyh7cmF3OmV9LC4uLnIpOmkrZSxjPW8ucCxhPWMubyxwPWMuYztpZihzLmluY2x1ZGVzKFwiXHUwMDFiXCIpKWZvcig7YztjPWMucCl7bGV0e29wZW46ZSxjbG9zZTp0fT1jLHI9dC5sZW5ndGgsbj1pLG89MDtpZihyKWZvcig7fihsPXMuaW5kZXhPZih0LG8pKTtvPWwrciluKz1zLnNsaWNlKG8sbCkrZTtzPW4rcy5zbGljZShvKX1yZXR1cm4gYSsocy5pbmNsdWRlcyhcIlxcblwiKT9zLnJlcGxhY2UoLyhcXHI/XFxuKS9nLHArXCIkMVwiK2EpOnMpK3B9LHM9dCxjPW47cmV0dXJuIGUmJihzPWUubyt0LGM9bitlLmMpLGwobyxyKSxvLnA9e29wZW46dCxjbG9zZTpuLG86cyxjLHA6ZX0sby5vcGVuPXMsby5jbG9zZT1jLG99O2NvbnN0IHc9ZnVuY3Rpb24oZT1nKXtsZXQgdD17QW5zaXM6dyxpc1N1cHBvcnRlZDooKT0+cyxzdHJpcDplPT5lLnJlcGxhY2UoL1tcdTAwMWLCm11bWygpIzs/XSooPzpbMC05XXsxLDR9KD86O1swLTldezAsNH0pKik/WzAtOUEtT1JaY2YtbnFyeT0+PF0vZyxpKSxleHRlbmQoZSl7Zm9yKGxldCB0IGluIGUpe2xldCByPWVbdF0sbD0odHlwZW9mIHIpWzBdLG89XCJzXCI9PT1sP3goLi4ucChyKSk6cjtPW3RdPVwiZlwiPT09bD97Z2V0KCl7cmV0dXJuKC4uLmUpPT5tKHRoaXMsciguLi5lKSl9fTp7Z2V0KCl7bGV0IGU9bSh0aGlzLG8pO3JldHVybiBuKHRoaXMsdCx7dmFsdWU6ZX0pLGV9fX1yZXR1cm4gcj1vKHt9LE8pLGwodCxyKSx0fX0scz1lPjAsYz0oZSx0KT0+cz97b3BlbjpgXHUwMDFiWyR7ZX1tYCxjbG9zZTpgXHUwMDFiWyR7dH1tYH06ZixhPWU9PnQ9PmUoLi4ucCh0KSkseT0oZSx0KT0+KHIsbixsKT0+YyhgJHtlfTg7Mjske3J9OyR7bn07JHtsfWAsdCksUj0oZSx0KT0+KHIsbixsKT0+YygoKGUsdCxyKT0+ZCh1KGUsdCxyKSkpKHIsbixsKStlLHQpLCQ9ZT0+KHQscixuKT0+ZSh1KHQscixuKSkseD15KDMsaCksVD15KDQsYiksdj1lPT5jKFwiMzg7NTtcIitlLGgpLEM9ZT0+YyhcIjQ4OzU7XCIrZSxiKTsyPT09ZT8oeD0kKHYpLFQ9JChDKSk6MT09PWUmJih4PVIoMCxoKSxUPVIoMTAsYiksdj1lPT5jKGQoZSksaCksQz1lPT5jKGQoZSkrMTAsYikpO2xldCBFLE09e2ZnOnYsYmc6QyxyZ2I6eCxiZ1JnYjpULGhleDphKHgpLGJnSGV4OmEoVCksdmlzaWJsZTpmLHJlc2V0OmMoMCwwKSxib2xkOmMoMSwyMiksZGltOmMoMiwyMiksaXRhbGljOmMoMywyMyksdW5kZXJsaW5lOmMoNCwyNCksaW52ZXJzZTpjKDcsMjcpLGhpZGRlbjpjKDgsMjgpLHN0cmlrZXRocm91Z2g6Yyg5LDI5KX0sST1cIkJyaWdodFwiO3JldHVyblwiYmxhY2sscmVkLGdyZWVuLHllbGxvdyxibHVlLG1hZ2VudGEsY3lhbix3aGl0ZSxncmF5XCIuc3BsaXQoXCIsXCIpLm1hcCgoKGUsdCk9PntFPVwiYmdcIitlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSw4PnQ/KE1bZStJXT1jKDkwK3QsaCksTVtFK0ldPWMoMTAwK3QsYikpOnQ9NjAsTVtlXT1jKDMwK3QsaCksTVtFXT1jKDQwK3QsYil9KSksdC5leHRlbmQoTSl9LHk9bmV3IHc7bW9kdWxlLmV4cG9ydHM9eSx5LmRlZmF1bHQ9eTtcbiIsImltcG9ydCBhIGZyb21cIi4vaW5kZXguY2pzXCI7ZXhwb3J0IGRlZmF1bHQgYTtleHBvcnQgY29uc3R7QW5zaXMsZmcsYmcscmdiLGJnUmdiLGhleCxiZ0hleCxyZXNldCxpbnZlcnNlLGhpZGRlbix2aXNpYmxlLGJvbGQsZGltLGl0YWxpYyx1bmRlcmxpbmUsc3RyaWtldGhyb3VnaCxibGFjayxyZWQsZ3JlZW4seWVsbG93LGJsdWUsbWFnZW50YSxjeWFuLHdoaXRlLGdyYXkscmVkQnJpZ2h0LGdyZWVuQnJpZ2h0LHllbGxvd0JyaWdodCxibHVlQnJpZ2h0LG1hZ2VudGFCcmlnaHQsY3lhbkJyaWdodCx3aGl0ZUJyaWdodCxiZ0JsYWNrLGJnUmVkLGJnR3JlZW4sYmdZZWxsb3csYmdCbHVlLGJnTWFnZW50YSxiZ0N5YW4sYmdXaGl0ZSxiZ0dyYXksYmdSZWRCcmlnaHQsYmdHcmVlbkJyaWdodCxiZ1llbGxvd0JyaWdodCxiZ0JsdWVCcmlnaHQsYmdNYWdlbnRhQnJpZ2h0LGJnQ3lhbkJyaWdodCxiZ1doaXRlQnJpZ2h0fT1hOyIsImNvbnN0IEFMSUFTID0gU3ltYm9sLmZvcigneWFtbC5hbGlhcycpO1xuY29uc3QgRE9DID0gU3ltYm9sLmZvcigneWFtbC5kb2N1bWVudCcpO1xuY29uc3QgTUFQID0gU3ltYm9sLmZvcigneWFtbC5tYXAnKTtcbmNvbnN0IFBBSVIgPSBTeW1ib2wuZm9yKCd5YW1sLnBhaXInKTtcbmNvbnN0IFNDQUxBUiA9IFN5bWJvbC5mb3IoJ3lhbWwuc2NhbGFyJyk7XG5jb25zdCBTRVEgPSBTeW1ib2wuZm9yKCd5YW1sLnNlcScpO1xuY29uc3QgTk9ERV9UWVBFID0gU3ltYm9sLmZvcigneWFtbC5ub2RlLnR5cGUnKTtcbmNvbnN0IGlzQWxpYXMgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IEFMSUFTO1xuY29uc3QgaXNEb2N1bWVudCA9IChub2RlKSA9PiAhIW5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnICYmIG5vZGVbTk9ERV9UWVBFXSA9PT0gRE9DO1xuY29uc3QgaXNNYXAgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IE1BUDtcbmNvbnN0IGlzUGFpciA9IChub2RlKSA9PiAhIW5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnICYmIG5vZGVbTk9ERV9UWVBFXSA9PT0gUEFJUjtcbmNvbnN0IGlzU2NhbGFyID0gKG5vZGUpID0+ICEhbm9kZSAmJiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgbm9kZVtOT0RFX1RZUEVdID09PSBTQ0FMQVI7XG5jb25zdCBpc1NlcSA9IChub2RlKSA9PiAhIW5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnICYmIG5vZGVbTk9ERV9UWVBFXSA9PT0gU0VRO1xuZnVuY3Rpb24gaXNDb2xsZWN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZSAmJiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcpXG4gICAgICAgIHN3aXRjaCAobm9kZVtOT0RFX1RZUEVdKSB7XG4gICAgICAgICAgICBjYXNlIE1BUDpcbiAgICAgICAgICAgIGNhc2UgU0VROlxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNOb2RlKG5vZGUpIHtcbiAgICBpZiAobm9kZSAmJiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcpXG4gICAgICAgIHN3aXRjaCAobm9kZVtOT0RFX1RZUEVdKSB7XG4gICAgICAgICAgICBjYXNlIEFMSUFTOlxuICAgICAgICAgICAgY2FzZSBNQVA6XG4gICAgICAgICAgICBjYXNlIFNDQUxBUjpcbiAgICAgICAgICAgIGNhc2UgU0VROlxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuY29uc3QgaGFzQW5jaG9yID0gKG5vZGUpID0+IChpc1NjYWxhcihub2RlKSB8fCBpc0NvbGxlY3Rpb24obm9kZSkpICYmICEhbm9kZS5hbmNob3I7XG5cbmV4cG9ydCB7IEFMSUFTLCBET0MsIE1BUCwgTk9ERV9UWVBFLCBQQUlSLCBTQ0FMQVIsIFNFUSwgaGFzQW5jaG9yLCBpc0FsaWFzLCBpc0NvbGxlY3Rpb24sIGlzRG9jdW1lbnQsIGlzTWFwLCBpc05vZGUsIGlzUGFpciwgaXNTY2FsYXIsIGlzU2VxIH07XG4iLCJpbXBvcnQgeyBpc0RvY3VtZW50LCBpc05vZGUsIGlzUGFpciwgaXNDb2xsZWN0aW9uLCBpc01hcCwgaXNTZXEsIGlzU2NhbGFyLCBpc0FsaWFzIH0gZnJvbSAnLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5cbmNvbnN0IEJSRUFLID0gU3ltYm9sKCdicmVhayB2aXNpdCcpO1xuY29uc3QgU0tJUCA9IFN5bWJvbCgnc2tpcCBjaGlsZHJlbicpO1xuY29uc3QgUkVNT1ZFID0gU3ltYm9sKCdyZW1vdmUgbm9kZScpO1xuLyoqXG4gKiBBcHBseSBhIHZpc2l0b3IgdG8gYW4gQVNUIG5vZGUgb3IgZG9jdW1lbnQuXG4gKlxuICogV2Fsa3MgdGhyb3VnaCB0aGUgdHJlZSAoZGVwdGgtZmlyc3QpIHN0YXJ0aW5nIGZyb20gYG5vZGVgLCBjYWxsaW5nIGFcbiAqIGB2aXNpdG9yYCBmdW5jdGlvbiB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAqICAgLSBga2V5YDogRm9yIHNlcXVlbmNlIHZhbHVlcyBhbmQgbWFwIGBQYWlyYCwgdGhlIG5vZGUncyBpbmRleCBpbiB0aGVcbiAqICAgICBjb2xsZWN0aW9uLiBXaXRoaW4gYSBgUGFpcmAsIGAna2V5J2Agb3IgYCd2YWx1ZSdgLCBjb3JyZXNwb25kaW5nbHkuXG4gKiAgICAgYG51bGxgIGZvciB0aGUgcm9vdCBub2RlLlxuICogICAtIGBub2RlYDogVGhlIGN1cnJlbnQgbm9kZS5cbiAqICAgLSBgcGF0aGA6IFRoZSBhbmNlc3RyeSBvZiB0aGUgY3VycmVudCBub2RlLlxuICpcbiAqIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHZpc2l0b3IgbWF5IGJlIHVzZWQgdG8gY29udHJvbCB0aGUgdHJhdmVyc2FsOlxuICogICAtIGB1bmRlZmluZWRgIChkZWZhdWx0KTogRG8gbm90aGluZyBhbmQgY29udGludWVcbiAqICAgLSBgdmlzaXQuU0tJUGA6IERvIG5vdCB2aXNpdCB0aGUgY2hpbGRyZW4gb2YgdGhpcyBub2RlLCBjb250aW51ZSB3aXRoIG5leHRcbiAqICAgICBzaWJsaW5nXG4gKiAgIC0gYHZpc2l0LkJSRUFLYDogVGVybWluYXRlIHRyYXZlcnNhbCBjb21wbGV0ZWx5XG4gKiAgIC0gYHZpc2l0LlJFTU9WRWA6IFJlbW92ZSB0aGUgY3VycmVudCBub2RlLCB0aGVuIGNvbnRpbnVlIHdpdGggdGhlIG5leHQgb25lXG4gKiAgIC0gYE5vZGVgOiBSZXBsYWNlIHRoZSBjdXJyZW50IG5vZGUsIHRoZW4gY29udGludWUgYnkgdmlzaXRpbmcgaXRcbiAqICAgLSBgbnVtYmVyYDogV2hpbGUgaXRlcmF0aW5nIHRoZSBpdGVtcyBvZiBhIHNlcXVlbmNlIG9yIG1hcCwgc2V0IHRoZSBpbmRleFxuICogICAgIG9mIHRoZSBuZXh0IHN0ZXAuIFRoaXMgaXMgdXNlZnVsIGVzcGVjaWFsbHkgaWYgdGhlIGluZGV4IG9mIHRoZSBjdXJyZW50XG4gKiAgICAgbm9kZSBoYXMgY2hhbmdlZC5cbiAqXG4gKiBJZiBgdmlzaXRvcmAgaXMgYSBzaW5nbGUgZnVuY3Rpb24sIGl0IHdpbGwgYmUgY2FsbGVkIHdpdGggYWxsIHZhbHVlc1xuICogZW5jb3VudGVyZWQgaW4gdGhlIHRyZWUsIGluY2x1ZGluZyBlLmcuIGBudWxsYCB2YWx1ZXMuIEFsdGVybmF0aXZlbHksXG4gKiBzZXBhcmF0ZSB2aXNpdG9yIGZ1bmN0aW9ucyBtYXkgYmUgZGVmaW5lZCBmb3IgZWFjaCBgTWFwYCwgYFBhaXJgLCBgU2VxYCxcbiAqIGBBbGlhc2AgYW5kIGBTY2FsYXJgIG5vZGUuIFRvIGRlZmluZSB0aGUgc2FtZSB2aXNpdG9yIGZ1bmN0aW9uIGZvciBtb3JlIHRoYW5cbiAqIG9uZSBub2RlIHR5cGUsIHVzZSB0aGUgYENvbGxlY3Rpb25gIChtYXAgYW5kIHNlcSksIGBWYWx1ZWAgKG1hcCwgc2VxICYgc2NhbGFyKVxuICogYW5kIGBOb2RlYCAoYWxpYXMsIG1hcCwgc2VxICYgc2NhbGFyKSB0YXJnZXRzLiBPZiBhbGwgdGhlc2UsIG9ubHkgdGhlIG1vc3RcbiAqIHNwZWNpZmljIGRlZmluZWQgb25lIHdpbGwgYmUgdXNlZCBmb3IgZWFjaCBub2RlLlxuICovXG5mdW5jdGlvbiB2aXNpdChub2RlLCB2aXNpdG9yKSB7XG4gICAgY29uc3QgdmlzaXRvcl8gPSBpbml0VmlzaXRvcih2aXNpdG9yKTtcbiAgICBpZiAoaXNEb2N1bWVudChub2RlKSkge1xuICAgICAgICBjb25zdCBjZCA9IHZpc2l0XyhudWxsLCBub2RlLmNvbnRlbnRzLCB2aXNpdG9yXywgT2JqZWN0LmZyZWV6ZShbbm9kZV0pKTtcbiAgICAgICAgaWYgKGNkID09PSBSRU1PVkUpXG4gICAgICAgICAgICBub2RlLmNvbnRlbnRzID0gbnVsbDtcbiAgICB9XG4gICAgZWxzZVxuICAgICAgICB2aXNpdF8obnVsbCwgbm9kZSwgdmlzaXRvcl8sIE9iamVjdC5mcmVlemUoW10pKTtcbn1cbi8vIFdpdGhvdXQgdGhlIGBhcyBzeW1ib2xgIGNhc3RzLCBUUyBkZWNsYXJlcyB0aGVzZSBpbiB0aGUgYHZpc2l0YFxuLy8gbmFtZXNwYWNlIHVzaW5nIGB2YXJgLCBidXQgdGhlbiBjb21wbGFpbnMgYWJvdXQgdGhhdCBiZWNhdXNlXG4vLyBgdW5pcXVlIHN5bWJvbGAgbXVzdCBiZSBgY29uc3RgLlxuLyoqIFRlcm1pbmF0ZSB2aXNpdCB0cmF2ZXJzYWwgY29tcGxldGVseSAqL1xudmlzaXQuQlJFQUsgPSBCUkVBSztcbi8qKiBEbyBub3QgdmlzaXQgdGhlIGNoaWxkcmVuIG9mIHRoZSBjdXJyZW50IG5vZGUgKi9cbnZpc2l0LlNLSVAgPSBTS0lQO1xuLyoqIFJlbW92ZSB0aGUgY3VycmVudCBub2RlICovXG52aXNpdC5SRU1PVkUgPSBSRU1PVkU7XG5mdW5jdGlvbiB2aXNpdF8oa2V5LCBub2RlLCB2aXNpdG9yLCBwYXRoKSB7XG4gICAgY29uc3QgY3RybCA9IGNhbGxWaXNpdG9yKGtleSwgbm9kZSwgdmlzaXRvciwgcGF0aCk7XG4gICAgaWYgKGlzTm9kZShjdHJsKSB8fCBpc1BhaXIoY3RybCkpIHtcbiAgICAgICAgcmVwbGFjZU5vZGUoa2V5LCBwYXRoLCBjdHJsKTtcbiAgICAgICAgcmV0dXJuIHZpc2l0XyhrZXksIGN0cmwsIHZpc2l0b3IsIHBhdGgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGN0cmwgIT09ICdzeW1ib2wnKSB7XG4gICAgICAgIGlmIChpc0NvbGxlY3Rpb24obm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGggPSBPYmplY3QuZnJlZXplKHBhdGguY29uY2F0KG5vZGUpKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5pdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNpID0gdmlzaXRfKGksIG5vZGUuaXRlbXNbaV0sIHZpc2l0b3IsIHBhdGgpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2kgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgICAgICBpID0gY2kgLSAxO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNpID09PSBCUkVBSylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNpID09PSBSRU1PVkUpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5pdGVtcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGkgLT0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQYWlyKG5vZGUpKSB7XG4gICAgICAgICAgICBwYXRoID0gT2JqZWN0LmZyZWV6ZShwYXRoLmNvbmNhdChub2RlKSk7XG4gICAgICAgICAgICBjb25zdCBjayA9IHZpc2l0Xygna2V5Jywgbm9kZS5rZXksIHZpc2l0b3IsIHBhdGgpO1xuICAgICAgICAgICAgaWYgKGNrID09PSBCUkVBSylcbiAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICBlbHNlIGlmIChjayA9PT0gUkVNT1ZFKVxuICAgICAgICAgICAgICAgIG5vZGUua2V5ID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IGN2ID0gdmlzaXRfKCd2YWx1ZScsIG5vZGUudmFsdWUsIHZpc2l0b3IsIHBhdGgpO1xuICAgICAgICAgICAgaWYgKGN2ID09PSBCUkVBSylcbiAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICBlbHNlIGlmIChjdiA9PT0gUkVNT1ZFKVxuICAgICAgICAgICAgICAgIG5vZGUudmFsdWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjdHJsO1xufVxuLyoqXG4gKiBBcHBseSBhbiBhc3luYyB2aXNpdG9yIHRvIGFuIEFTVCBub2RlIG9yIGRvY3VtZW50LlxuICpcbiAqIFdhbGtzIHRocm91Z2ggdGhlIHRyZWUgKGRlcHRoLWZpcnN0KSBzdGFydGluZyBmcm9tIGBub2RlYCwgY2FsbGluZyBhXG4gKiBgdmlzaXRvcmAgZnVuY3Rpb24gd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKiAgIC0gYGtleWA6IEZvciBzZXF1ZW5jZSB2YWx1ZXMgYW5kIG1hcCBgUGFpcmAsIHRoZSBub2RlJ3MgaW5kZXggaW4gdGhlXG4gKiAgICAgY29sbGVjdGlvbi4gV2l0aGluIGEgYFBhaXJgLCBgJ2tleSdgIG9yIGAndmFsdWUnYCwgY29ycmVzcG9uZGluZ2x5LlxuICogICAgIGBudWxsYCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAqICAgLSBgbm9kZWA6IFRoZSBjdXJyZW50IG5vZGUuXG4gKiAgIC0gYHBhdGhgOiBUaGUgYW5jZXN0cnkgb2YgdGhlIGN1cnJlbnQgbm9kZS5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSB2aXNpdG9yIG1heSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHRyYXZlcnNhbDpcbiAqICAgLSBgUHJvbWlzZWA6IE11c3QgcmVzb2x2ZSB0byBvbmUgb2YgdGhlIGZvbGxvd2luZyB2YWx1ZXNcbiAqICAgLSBgdW5kZWZpbmVkYCAoZGVmYXVsdCk6IERvIG5vdGhpbmcgYW5kIGNvbnRpbnVlXG4gKiAgIC0gYHZpc2l0LlNLSVBgOiBEbyBub3QgdmlzaXQgdGhlIGNoaWxkcmVuIG9mIHRoaXMgbm9kZSwgY29udGludWUgd2l0aCBuZXh0XG4gKiAgICAgc2libGluZ1xuICogICAtIGB2aXNpdC5CUkVBS2A6IFRlcm1pbmF0ZSB0cmF2ZXJzYWwgY29tcGxldGVseVxuICogICAtIGB2aXNpdC5SRU1PVkVgOiBSZW1vdmUgdGhlIGN1cnJlbnQgbm9kZSwgdGhlbiBjb250aW51ZSB3aXRoIHRoZSBuZXh0IG9uZVxuICogICAtIGBOb2RlYDogUmVwbGFjZSB0aGUgY3VycmVudCBub2RlLCB0aGVuIGNvbnRpbnVlIGJ5IHZpc2l0aW5nIGl0XG4gKiAgIC0gYG51bWJlcmA6IFdoaWxlIGl0ZXJhdGluZyB0aGUgaXRlbXMgb2YgYSBzZXF1ZW5jZSBvciBtYXAsIHNldCB0aGUgaW5kZXhcbiAqICAgICBvZiB0aGUgbmV4dCBzdGVwLiBUaGlzIGlzIHVzZWZ1bCBlc3BlY2lhbGx5IGlmIHRoZSBpbmRleCBvZiB0aGUgY3VycmVudFxuICogICAgIG5vZGUgaGFzIGNoYW5nZWQuXG4gKlxuICogSWYgYHZpc2l0b3JgIGlzIGEgc2luZ2xlIGZ1bmN0aW9uLCBpdCB3aWxsIGJlIGNhbGxlZCB3aXRoIGFsbCB2YWx1ZXNcbiAqIGVuY291bnRlcmVkIGluIHRoZSB0cmVlLCBpbmNsdWRpbmcgZS5nLiBgbnVsbGAgdmFsdWVzLiBBbHRlcm5hdGl2ZWx5LFxuICogc2VwYXJhdGUgdmlzaXRvciBmdW5jdGlvbnMgbWF5IGJlIGRlZmluZWQgZm9yIGVhY2ggYE1hcGAsIGBQYWlyYCwgYFNlcWAsXG4gKiBgQWxpYXNgIGFuZCBgU2NhbGFyYCBub2RlLiBUbyBkZWZpbmUgdGhlIHNhbWUgdmlzaXRvciBmdW5jdGlvbiBmb3IgbW9yZSB0aGFuXG4gKiBvbmUgbm9kZSB0eXBlLCB1c2UgdGhlIGBDb2xsZWN0aW9uYCAobWFwIGFuZCBzZXEpLCBgVmFsdWVgIChtYXAsIHNlcSAmIHNjYWxhcilcbiAqIGFuZCBgTm9kZWAgKGFsaWFzLCBtYXAsIHNlcSAmIHNjYWxhcikgdGFyZ2V0cy4gT2YgYWxsIHRoZXNlLCBvbmx5IHRoZSBtb3N0XG4gKiBzcGVjaWZpYyBkZWZpbmVkIG9uZSB3aWxsIGJlIHVzZWQgZm9yIGVhY2ggbm9kZS5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gdmlzaXRBc3luYyhub2RlLCB2aXNpdG9yKSB7XG4gICAgY29uc3QgdmlzaXRvcl8gPSBpbml0VmlzaXRvcih2aXNpdG9yKTtcbiAgICBpZiAoaXNEb2N1bWVudChub2RlKSkge1xuICAgICAgICBjb25zdCBjZCA9IGF3YWl0IHZpc2l0QXN5bmNfKG51bGwsIG5vZGUuY29udGVudHMsIHZpc2l0b3JfLCBPYmplY3QuZnJlZXplKFtub2RlXSkpO1xuICAgICAgICBpZiAoY2QgPT09IFJFTU9WRSlcbiAgICAgICAgICAgIG5vZGUuY29udGVudHMgPSBudWxsO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIGF3YWl0IHZpc2l0QXN5bmNfKG51bGwsIG5vZGUsIHZpc2l0b3JfLCBPYmplY3QuZnJlZXplKFtdKSk7XG59XG4vLyBXaXRob3V0IHRoZSBgYXMgc3ltYm9sYCBjYXN0cywgVFMgZGVjbGFyZXMgdGhlc2UgaW4gdGhlIGB2aXNpdGBcbi8vIG5hbWVzcGFjZSB1c2luZyBgdmFyYCwgYnV0IHRoZW4gY29tcGxhaW5zIGFib3V0IHRoYXQgYmVjYXVzZVxuLy8gYHVuaXF1ZSBzeW1ib2xgIG11c3QgYmUgYGNvbnN0YC5cbi8qKiBUZXJtaW5hdGUgdmlzaXQgdHJhdmVyc2FsIGNvbXBsZXRlbHkgKi9cbnZpc2l0QXN5bmMuQlJFQUsgPSBCUkVBSztcbi8qKiBEbyBub3QgdmlzaXQgdGhlIGNoaWxkcmVuIG9mIHRoZSBjdXJyZW50IG5vZGUgKi9cbnZpc2l0QXN5bmMuU0tJUCA9IFNLSVA7XG4vKiogUmVtb3ZlIHRoZSBjdXJyZW50IG5vZGUgKi9cbnZpc2l0QXN5bmMuUkVNT1ZFID0gUkVNT1ZFO1xuYXN5bmMgZnVuY3Rpb24gdmlzaXRBc3luY18oa2V5LCBub2RlLCB2aXNpdG9yLCBwYXRoKSB7XG4gICAgY29uc3QgY3RybCA9IGF3YWl0IGNhbGxWaXNpdG9yKGtleSwgbm9kZSwgdmlzaXRvciwgcGF0aCk7XG4gICAgaWYgKGlzTm9kZShjdHJsKSB8fCBpc1BhaXIoY3RybCkpIHtcbiAgICAgICAgcmVwbGFjZU5vZGUoa2V5LCBwYXRoLCBjdHJsKTtcbiAgICAgICAgcmV0dXJuIHZpc2l0QXN5bmNfKGtleSwgY3RybCwgdmlzaXRvciwgcGF0aCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY3RybCAhPT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgaWYgKGlzQ29sbGVjdGlvbihub2RlKSkge1xuICAgICAgICAgICAgcGF0aCA9IE9iamVjdC5mcmVlemUocGF0aC5jb25jYXQobm9kZSkpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLml0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2kgPSBhd2FpdCB2aXNpdEFzeW5jXyhpLCBub2RlLml0ZW1zW2ldLCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNpID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICAgICAgaSA9IGNpIC0gMTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaSA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCUkVBSztcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaSA9PT0gUkVNT1ZFKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuaXRlbXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBpIC09IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGFpcihub2RlKSkge1xuICAgICAgICAgICAgcGF0aCA9IE9iamVjdC5mcmVlemUocGF0aC5jb25jYXQobm9kZSkpO1xuICAgICAgICAgICAgY29uc3QgY2sgPSBhd2FpdCB2aXNpdEFzeW5jXygna2V5Jywgbm9kZS5rZXksIHZpc2l0b3IsIHBhdGgpO1xuICAgICAgICAgICAgaWYgKGNrID09PSBCUkVBSylcbiAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICBlbHNlIGlmIChjayA9PT0gUkVNT1ZFKVxuICAgICAgICAgICAgICAgIG5vZGUua2V5ID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IGN2ID0gYXdhaXQgdmlzaXRBc3luY18oJ3ZhbHVlJywgbm9kZS52YWx1ZSwgdmlzaXRvciwgcGF0aCk7XG4gICAgICAgICAgICBpZiAoY3YgPT09IEJSRUFLKVxuICAgICAgICAgICAgICAgIHJldHVybiBCUkVBSztcbiAgICAgICAgICAgIGVsc2UgaWYgKGN2ID09PSBSRU1PVkUpXG4gICAgICAgICAgICAgICAgbm9kZS52YWx1ZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGN0cmw7XG59XG5mdW5jdGlvbiBpbml0VmlzaXRvcih2aXNpdG9yKSB7XG4gICAgaWYgKHR5cGVvZiB2aXNpdG9yID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAodmlzaXRvci5Db2xsZWN0aW9uIHx8IHZpc2l0b3IuTm9kZSB8fCB2aXNpdG9yLlZhbHVlKSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICBBbGlhczogdmlzaXRvci5Ob2RlLFxuICAgICAgICAgICAgTWFwOiB2aXNpdG9yLk5vZGUsXG4gICAgICAgICAgICBTY2FsYXI6IHZpc2l0b3IuTm9kZSxcbiAgICAgICAgICAgIFNlcTogdmlzaXRvci5Ob2RlXG4gICAgICAgIH0sIHZpc2l0b3IuVmFsdWUgJiYge1xuICAgICAgICAgICAgTWFwOiB2aXNpdG9yLlZhbHVlLFxuICAgICAgICAgICAgU2NhbGFyOiB2aXNpdG9yLlZhbHVlLFxuICAgICAgICAgICAgU2VxOiB2aXNpdG9yLlZhbHVlXG4gICAgICAgIH0sIHZpc2l0b3IuQ29sbGVjdGlvbiAmJiB7XG4gICAgICAgICAgICBNYXA6IHZpc2l0b3IuQ29sbGVjdGlvbixcbiAgICAgICAgICAgIFNlcTogdmlzaXRvci5Db2xsZWN0aW9uXG4gICAgICAgIH0sIHZpc2l0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gdmlzaXRvcjtcbn1cbmZ1bmN0aW9uIGNhbGxWaXNpdG9yKGtleSwgbm9kZSwgdmlzaXRvciwgcGF0aCkge1xuICAgIGlmICh0eXBlb2YgdmlzaXRvciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgcmV0dXJuIHZpc2l0b3Ioa2V5LCBub2RlLCBwYXRoKTtcbiAgICBpZiAoaXNNYXAobm9kZSkpXG4gICAgICAgIHJldHVybiB2aXNpdG9yLk1hcD8uKGtleSwgbm9kZSwgcGF0aCk7XG4gICAgaWYgKGlzU2VxKG5vZGUpKVxuICAgICAgICByZXR1cm4gdmlzaXRvci5TZXE/LihrZXksIG5vZGUsIHBhdGgpO1xuICAgIGlmIChpc1BhaXIobm9kZSkpXG4gICAgICAgIHJldHVybiB2aXNpdG9yLlBhaXI/LihrZXksIG5vZGUsIHBhdGgpO1xuICAgIGlmIChpc1NjYWxhcihub2RlKSlcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IuU2NhbGFyPy4oa2V5LCBub2RlLCBwYXRoKTtcbiAgICBpZiAoaXNBbGlhcyhub2RlKSlcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IuQWxpYXM/LihrZXksIG5vZGUsIHBhdGgpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiByZXBsYWNlTm9kZShrZXksIHBhdGgsIG5vZGUpIHtcbiAgICBjb25zdCBwYXJlbnQgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgaWYgKGlzQ29sbGVjdGlvbihwYXJlbnQpKSB7XG4gICAgICAgIHBhcmVudC5pdGVtc1trZXldID0gbm9kZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNQYWlyKHBhcmVudCkpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gJ2tleScpXG4gICAgICAgICAgICBwYXJlbnQua2V5ID0gbm9kZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcGFyZW50LnZhbHVlID0gbm9kZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNEb2N1bWVudChwYXJlbnQpKSB7XG4gICAgICAgIHBhcmVudC5jb250ZW50cyA9IG5vZGU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBwdCA9IGlzQWxpYXMocGFyZW50KSA/ICdhbGlhcycgOiAnc2NhbGFyJztcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgcmVwbGFjZSBub2RlIHdpdGggJHtwdH0gcGFyZW50YCk7XG4gICAgfVxufVxuXG5leHBvcnQgeyB2aXNpdCwgdmlzaXRBc3luYyB9O1xuIiwiaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgdmlzaXQgfSBmcm9tICcuLi92aXNpdC5qcyc7XG5cbmNvbnN0IGVzY2FwZUNoYXJzID0ge1xuICAgICchJzogJyUyMScsXG4gICAgJywnOiAnJTJDJyxcbiAgICAnWyc6ICclNUInLFxuICAgICddJzogJyU1RCcsXG4gICAgJ3snOiAnJTdCJyxcbiAgICAnfSc6ICclN0QnXG59O1xuY29uc3QgZXNjYXBlVGFnTmFtZSA9ICh0bikgPT4gdG4ucmVwbGFjZSgvWyEsW1xcXXt9XS9nLCBjaCA9PiBlc2NhcGVDaGFyc1tjaF0pO1xuY2xhc3MgRGlyZWN0aXZlcyB7XG4gICAgY29uc3RydWN0b3IoeWFtbCwgdGFncykge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGRpcmVjdGl2ZXMtZW5kL2RvYy1zdGFydCBtYXJrZXIgYC0tLWAuIElmIGBudWxsYCwgYSBtYXJrZXIgbWF5IHN0aWxsIGJlXG4gICAgICAgICAqIGluY2x1ZGVkIGluIHRoZSBkb2N1bWVudCdzIHN0cmluZ2lmaWVkIHJlcHJlc2VudGF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kb2NTdGFydCA9IG51bGw7XG4gICAgICAgIC8qKiBUaGUgZG9jLWVuZCBtYXJrZXIgYC4uLmAuICAqL1xuICAgICAgICB0aGlzLmRvY0VuZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnlhbWwgPSBPYmplY3QuYXNzaWduKHt9LCBEaXJlY3RpdmVzLmRlZmF1bHRZYW1sLCB5YW1sKTtcbiAgICAgICAgdGhpcy50YWdzID0gT2JqZWN0LmFzc2lnbih7fSwgRGlyZWN0aXZlcy5kZWZhdWx0VGFncywgdGFncyk7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCBjb3B5ID0gbmV3IERpcmVjdGl2ZXModGhpcy55YW1sLCB0aGlzLnRhZ3MpO1xuICAgICAgICBjb3B5LmRvY1N0YXJ0ID0gdGhpcy5kb2NTdGFydDtcbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIER1cmluZyBwYXJzaW5nLCBnZXQgYSBEaXJlY3RpdmVzIGluc3RhbmNlIGZvciB0aGUgY3VycmVudCBkb2N1bWVudCBhbmRcbiAgICAgKiB1cGRhdGUgdGhlIHN0cmVhbSBzdGF0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgdmVyc2lvbidzIHNwZWMuXG4gICAgICovXG4gICAgYXREb2N1bWVudCgpIHtcbiAgICAgICAgY29uc3QgcmVzID0gbmV3IERpcmVjdGl2ZXModGhpcy55YW1sLCB0aGlzLnRhZ3MpO1xuICAgICAgICBzd2l0Y2ggKHRoaXMueWFtbC52ZXJzaW9uKSB7XG4gICAgICAgICAgICBjYXNlICcxLjEnOlxuICAgICAgICAgICAgICAgIHRoaXMuYXROZXh0RG9jdW1lbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnMS4yJzpcbiAgICAgICAgICAgICAgICB0aGlzLmF0TmV4dERvY3VtZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy55YW1sID0ge1xuICAgICAgICAgICAgICAgICAgICBleHBsaWNpdDogRGlyZWN0aXZlcy5kZWZhdWx0WWFtbC5leHBsaWNpdCxcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogJzEuMidcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMudGFncyA9IE9iamVjdC5hc3NpZ24oe30sIERpcmVjdGl2ZXMuZGVmYXVsdFRhZ3MpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBvbkVycm9yIC0gTWF5IGJlIGNhbGxlZCBldmVuIGlmIHRoZSBhY3Rpb24gd2FzIHN1Y2Nlc3NmdWxcbiAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgb24gc3VjY2Vzc1xuICAgICAqL1xuICAgIGFkZChsaW5lLCBvbkVycm9yKSB7XG4gICAgICAgIGlmICh0aGlzLmF0TmV4dERvY3VtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnlhbWwgPSB7IGV4cGxpY2l0OiBEaXJlY3RpdmVzLmRlZmF1bHRZYW1sLmV4cGxpY2l0LCB2ZXJzaW9uOiAnMS4xJyB9O1xuICAgICAgICAgICAgdGhpcy50YWdzID0gT2JqZWN0LmFzc2lnbih7fSwgRGlyZWN0aXZlcy5kZWZhdWx0VGFncyk7XG4gICAgICAgICAgICB0aGlzLmF0TmV4dERvY3VtZW50ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFydHMgPSBsaW5lLnRyaW0oKS5zcGxpdCgvWyBcXHRdKy8pO1xuICAgICAgICBjb25zdCBuYW1lID0gcGFydHMuc2hpZnQoKTtcbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgICBjYXNlICclVEFHJzoge1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcigwLCAnJVRBRyBkaXJlY3RpdmUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSB0d28gcGFydHMnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA8IDIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IFtoYW5kbGUsIHByZWZpeF0gPSBwYXJ0cztcbiAgICAgICAgICAgICAgICB0aGlzLnRhZ3NbaGFuZGxlXSA9IHByZWZpeDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJyVZQU1MJzoge1xuICAgICAgICAgICAgICAgIHRoaXMueWFtbC5leHBsaWNpdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKDAsICclWUFNTCBkaXJlY3RpdmUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgcGFydCcpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IFt2ZXJzaW9uXSA9IHBhcnRzO1xuICAgICAgICAgICAgICAgIGlmICh2ZXJzaW9uID09PSAnMS4xJyB8fCB2ZXJzaW9uID09PSAnMS4yJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnlhbWwudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IC9eXFxkK1xcLlxcZCskLy50ZXN0KHZlcnNpb24pO1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKDYsIGBVbnN1cHBvcnRlZCBZQU1MIHZlcnNpb24gJHt2ZXJzaW9ufWAsIGlzVmFsaWQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBvbkVycm9yKDAsIGBVbmtub3duIGRpcmVjdGl2ZSAke25hbWV9YCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc29sdmVzIGEgdGFnLCBtYXRjaGluZyBoYW5kbGVzIHRvIHRob3NlIGRlZmluZWQgaW4gJVRBRyBkaXJlY3RpdmVzLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmVzb2x2ZWQgdGFnLCB3aGljaCBtYXkgYWxzbyBiZSB0aGUgbm9uLXNwZWNpZmljIHRhZyBgJyEnYCBvciBhXG4gICAgICogICBgJyFsb2NhbCdgIHRhZywgb3IgYG51bGxgIGlmIHVucmVzb2x2YWJsZS5cbiAgICAgKi9cbiAgICB0YWdOYW1lKHNvdXJjZSwgb25FcnJvcikge1xuICAgICAgICBpZiAoc291cmNlID09PSAnIScpXG4gICAgICAgICAgICByZXR1cm4gJyEnOyAvLyBub24tc3BlY2lmaWMgdGFnXG4gICAgICAgIGlmIChzb3VyY2VbMF0gIT09ICchJykge1xuICAgICAgICAgICAgb25FcnJvcihgTm90IGEgdmFsaWQgdGFnOiAke3NvdXJjZX1gKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3VyY2VbMV0gPT09ICc8Jykge1xuICAgICAgICAgICAgY29uc3QgdmVyYmF0aW0gPSBzb3VyY2Uuc2xpY2UoMiwgLTEpO1xuICAgICAgICAgICAgaWYgKHZlcmJhdGltID09PSAnIScgfHwgdmVyYmF0aW0gPT09ICchIScpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKGBWZXJiYXRpbSB0YWdzIGFyZW4ndCByZXNvbHZlZCwgc28gJHtzb3VyY2V9IGlzIGludmFsaWQuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc291cmNlW3NvdXJjZS5sZW5ndGggLSAxXSAhPT0gJz4nKVxuICAgICAgICAgICAgICAgIG9uRXJyb3IoJ1ZlcmJhdGltIHRhZ3MgbXVzdCBlbmQgd2l0aCBhID4nKTtcbiAgICAgICAgICAgIHJldHVybiB2ZXJiYXRpbTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBbLCBoYW5kbGUsIHN1ZmZpeF0gPSBzb3VyY2UubWF0Y2goL14oLiohKShbXiFdKikkL3MpO1xuICAgICAgICBpZiAoIXN1ZmZpeClcbiAgICAgICAgICAgIG9uRXJyb3IoYFRoZSAke3NvdXJjZX0gdGFnIGhhcyBubyBzdWZmaXhgKTtcbiAgICAgICAgY29uc3QgcHJlZml4ID0gdGhpcy50YWdzW2hhbmRsZV07XG4gICAgICAgIGlmIChwcmVmaXgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZWZpeCArIGRlY29kZVVSSUNvbXBvbmVudChzdWZmaXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihTdHJpbmcoZXJyb3IpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFuZGxlID09PSAnIScpXG4gICAgICAgICAgICByZXR1cm4gc291cmNlOyAvLyBsb2NhbCB0YWdcbiAgICAgICAgb25FcnJvcihgQ291bGQgbm90IHJlc29sdmUgdGFnOiAke3NvdXJjZX1gKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgZnVsbHkgcmVzb2x2ZWQgdGFnLCByZXR1cm5zIGl0cyBwcmludGFibGUgc3RyaW5nIGZvcm0sXG4gICAgICogdGFraW5nIGludG8gYWNjb3VudCBjdXJyZW50IHRhZyBwcmVmaXhlcyBhbmQgZGVmYXVsdHMuXG4gICAgICovXG4gICAgdGFnU3RyaW5nKHRhZykge1xuICAgICAgICBmb3IgKGNvbnN0IFtoYW5kbGUsIHByZWZpeF0gb2YgT2JqZWN0LmVudHJpZXModGhpcy50YWdzKSkge1xuICAgICAgICAgICAgaWYgKHRhZy5zdGFydHNXaXRoKHByZWZpeCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZSArIGVzY2FwZVRhZ05hbWUodGFnLnN1YnN0cmluZyhwcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhZ1swXSA9PT0gJyEnID8gdGFnIDogYCE8JHt0YWd9PmA7XG4gICAgfVxuICAgIHRvU3RyaW5nKGRvYykge1xuICAgICAgICBjb25zdCBsaW5lcyA9IHRoaXMueWFtbC5leHBsaWNpdFxuICAgICAgICAgICAgPyBbYCVZQU1MICR7dGhpcy55YW1sLnZlcnNpb24gfHwgJzEuMid9YF1cbiAgICAgICAgICAgIDogW107XG4gICAgICAgIGNvbnN0IHRhZ0VudHJpZXMgPSBPYmplY3QuZW50cmllcyh0aGlzLnRhZ3MpO1xuICAgICAgICBsZXQgdGFnTmFtZXM7XG4gICAgICAgIGlmIChkb2MgJiYgdGFnRW50cmllcy5sZW5ndGggPiAwICYmIGlzTm9kZShkb2MuY29udGVudHMpKSB7XG4gICAgICAgICAgICBjb25zdCB0YWdzID0ge307XG4gICAgICAgICAgICB2aXNpdChkb2MuY29udGVudHMsIChfa2V5LCBub2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGlzTm9kZShub2RlKSAmJiBub2RlLnRhZylcbiAgICAgICAgICAgICAgICAgICAgdGFnc1tub2RlLnRhZ10gPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0YWdOYW1lcyA9IE9iamVjdC5rZXlzKHRhZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRhZ05hbWVzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgW2hhbmRsZSwgcHJlZml4XSBvZiB0YWdFbnRyaWVzKSB7XG4gICAgICAgICAgICBpZiAoaGFuZGxlID09PSAnISEnICYmIHByZWZpeCA9PT0gJ3RhZzp5YW1sLm9yZywyMDAyOicpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAoIWRvYyB8fCB0YWdOYW1lcy5zb21lKHRuID0+IHRuLnN0YXJ0c1dpdGgocHJlZml4KSkpXG4gICAgICAgICAgICAgICAgbGluZXMucHVzaChgJVRBRyAke2hhbmRsZX0gJHtwcmVmaXh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpbmVzLmpvaW4oJ1xcbicpO1xuICAgIH1cbn1cbkRpcmVjdGl2ZXMuZGVmYXVsdFlhbWwgPSB7IGV4cGxpY2l0OiBmYWxzZSwgdmVyc2lvbjogJzEuMicgfTtcbkRpcmVjdGl2ZXMuZGVmYXVsdFRhZ3MgPSB7ICchISc6ICd0YWc6eWFtbC5vcmcsMjAwMjonIH07XG5cbmV4cG9ydCB7IERpcmVjdGl2ZXMgfTtcbiIsImltcG9ydCB7IGlzU2NhbGFyLCBpc0NvbGxlY3Rpb24gfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyB2aXNpdCB9IGZyb20gJy4uL3Zpc2l0LmpzJztcblxuLyoqXG4gKiBWZXJpZnkgdGhhdCB0aGUgaW5wdXQgc3RyaW5nIGlzIGEgdmFsaWQgYW5jaG9yLlxuICpcbiAqIFdpbGwgdGhyb3cgb24gZXJyb3JzLlxuICovXG5mdW5jdGlvbiBhbmNob3JJc1ZhbGlkKGFuY2hvcikge1xuICAgIGlmICgvW1xceDAwLVxceDE5XFxzLFtcXF17fV0vLnRlc3QoYW5jaG9yKSkge1xuICAgICAgICBjb25zdCBzYSA9IEpTT04uc3RyaW5naWZ5KGFuY2hvcik7XG4gICAgICAgIGNvbnN0IG1zZyA9IGBBbmNob3IgbXVzdCBub3QgY29udGFpbiB3aGl0ZXNwYWNlIG9yIGNvbnRyb2wgY2hhcmFjdGVyczogJHtzYX1gO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBhbmNob3JOYW1lcyhyb290KSB7XG4gICAgY29uc3QgYW5jaG9ycyA9IG5ldyBTZXQoKTtcbiAgICB2aXNpdChyb290LCB7XG4gICAgICAgIFZhbHVlKF9rZXksIG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmFuY2hvcilcbiAgICAgICAgICAgICAgICBhbmNob3JzLmFkZChub2RlLmFuY2hvcik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYW5jaG9ycztcbn1cbi8qKiBGaW5kIGEgbmV3IGFuY2hvciBuYW1lIHdpdGggdGhlIGdpdmVuIGBwcmVmaXhgIGFuZCBhIG9uZS1pbmRleGVkIHN1ZmZpeC4gKi9cbmZ1bmN0aW9uIGZpbmROZXdBbmNob3IocHJlZml4LCBleGNsdWRlKSB7XG4gICAgZm9yIChsZXQgaSA9IDE7IHRydWU7ICsraSkge1xuICAgICAgICBjb25zdCBuYW1lID0gYCR7cHJlZml4fSR7aX1gO1xuICAgICAgICBpZiAoIWV4Y2x1ZGUuaGFzKG5hbWUpKVxuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlTm9kZUFuY2hvcnMoZG9jLCBwcmVmaXgpIHtcbiAgICBjb25zdCBhbGlhc09iamVjdHMgPSBbXTtcbiAgICBjb25zdCBzb3VyY2VPYmplY3RzID0gbmV3IE1hcCgpO1xuICAgIGxldCBwcmV2QW5jaG9ycyA9IG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb25BbmNob3I6IChzb3VyY2UpID0+IHtcbiAgICAgICAgICAgIGFsaWFzT2JqZWN0cy5wdXNoKHNvdXJjZSk7XG4gICAgICAgICAgICBwcmV2QW5jaG9ycyA/PyAocHJldkFuY2hvcnMgPSBhbmNob3JOYW1lcyhkb2MpKTtcbiAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IGZpbmROZXdBbmNob3IocHJlZml4LCBwcmV2QW5jaG9ycyk7XG4gICAgICAgICAgICBwcmV2QW5jaG9ycy5hZGQoYW5jaG9yKTtcbiAgICAgICAgICAgIHJldHVybiBhbmNob3I7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaXRoIGNpcmN1bGFyIHJlZmVyZW5jZXMsIHRoZSBzb3VyY2Ugbm9kZSBpcyBvbmx5IHJlc29sdmVkIGFmdGVyIGFsbFxuICAgICAgICAgKiBvZiBpdHMgY2hpbGQgbm9kZXMgYXJlLiBUaGlzIGlzIHdoeSBhbmNob3JzIGFyZSBzZXQgb25seSBhZnRlciBhbGwgb2ZcbiAgICAgICAgICogdGhlIG5vZGVzIGhhdmUgYmVlbiBjcmVhdGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0QW5jaG9yczogKCkgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBzb3VyY2Ugb2YgYWxpYXNPYmplY3RzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVmID0gc291cmNlT2JqZWN0cy5nZXQoc291cmNlKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlZiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAgICAgcmVmLmFuY2hvciAmJlxuICAgICAgICAgICAgICAgICAgICAoaXNTY2FsYXIocmVmLm5vZGUpIHx8IGlzQ29sbGVjdGlvbihyZWYubm9kZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZi5ub2RlLmFuY2hvciA9IHJlZi5hbmNob3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignRmFpbGVkIHRvIHJlc29sdmUgcmVwZWF0ZWQgb2JqZWN0ICh0aGlzIHNob3VsZCBub3QgaGFwcGVuKScpO1xuICAgICAgICAgICAgICAgICAgICBlcnJvci5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc291cmNlT2JqZWN0c1xuICAgIH07XG59XG5cbmV4cG9ydCB7IGFuY2hvcklzVmFsaWQsIGFuY2hvck5hbWVzLCBjcmVhdGVOb2RlQW5jaG9ycywgZmluZE5ld0FuY2hvciB9O1xuIiwiLyoqXG4gKiBBcHBsaWVzIHRoZSBKU09OLnBhcnNlIHJldml2ZXIgYWxnb3JpdGhtIGFzIGRlZmluZWQgaW4gdGhlIEVDTUEtMjYyIHNwZWMsXG4gKiBpbiBzZWN0aW9uIDI0LjUuMS4xIFwiUnVudGltZSBTZW1hbnRpY3M6IEludGVybmFsaXplSlNPTlByb3BlcnR5XCIgb2YgdGhlXG4gKiAyMDIxIGVkaXRpb246IGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi5wYXJzZVxuICpcbiAqIEluY2x1ZGVzIGV4dGVuc2lvbnMgZm9yIGhhbmRsaW5nIE1hcCBhbmQgU2V0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5UmV2aXZlcihyZXZpdmVyLCBvYmosIGtleSwgdmFsKSB7XG4gICAgaWYgKHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdmFsLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdjAgPSB2YWxbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgdjEgPSBhcHBseVJldml2ZXIocmV2aXZlciwgdmFsLCBTdHJpbmcoaSksIHYwKTtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWFycmF5LWRlbGV0ZVxuICAgICAgICAgICAgICAgIGlmICh2MSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdmFsW2ldO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHYxICE9PSB2MClcbiAgICAgICAgICAgICAgICAgICAgdmFsW2ldID0gdjE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGsgb2YgQXJyYXkuZnJvbSh2YWwua2V5cygpKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYwID0gdmFsLmdldChrKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2MSA9IGFwcGx5UmV2aXZlcihyZXZpdmVyLCB2YWwsIGssIHYwKTtcbiAgICAgICAgICAgICAgICBpZiAodjEgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgdmFsLmRlbGV0ZShrKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2MSAhPT0gdjApXG4gICAgICAgICAgICAgICAgICAgIHZhbC5zZXQoaywgdjEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbCBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCB2MCBvZiBBcnJheS5mcm9tKHZhbCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2MSA9IGFwcGx5UmV2aXZlcihyZXZpdmVyLCB2YWwsIHYwLCB2MCk7XG4gICAgICAgICAgICAgICAgaWYgKHYxID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHZhbC5kZWxldGUodjApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHYxICE9PSB2MCkge1xuICAgICAgICAgICAgICAgICAgICB2YWwuZGVsZXRlKHYwKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsLmFkZCh2MSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbaywgdjBdIG9mIE9iamVjdC5lbnRyaWVzKHZhbCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2MSA9IGFwcGx5UmV2aXZlcihyZXZpdmVyLCB2YWwsIGssIHYwKTtcbiAgICAgICAgICAgICAgICBpZiAodjEgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHZhbFtrXTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2MSAhPT0gdjApXG4gICAgICAgICAgICAgICAgICAgIHZhbFtrXSA9IHYxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXZpdmVyLmNhbGwob2JqLCBrZXksIHZhbCk7XG59XG5cbmV4cG9ydCB7IGFwcGx5UmV2aXZlciB9O1xuIiwiaW1wb3J0IHsgaGFzQW5jaG9yIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgY29udmVydCBhbnkgbm9kZSBvciBpdHMgY29udGVudHMgdG8gbmF0aXZlIEphdmFTY3JpcHRcbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgaW5wdXQgdmFsdWVcbiAqIEBwYXJhbSBhcmcgLSBJZiBgdmFsdWVgIGRlZmluZXMgYSBgdG9KU09OKClgIG1ldGhvZCwgdXNlIHRoaXNcbiAqICAgYXMgaXRzIGZpcnN0IGFyZ3VtZW50XG4gKiBAcGFyYW0gY3R4IC0gQ29udmVyc2lvbiBjb250ZXh0LCBvcmlnaW5hbGx5IHNldCBpbiBEb2N1bWVudCN0b0pTKCkuIElmXG4gKiAgIGB7IGtlZXA6IHRydWUgfWAgaXMgbm90IHNldCwgb3V0cHV0IHNob3VsZCBiZSBzdWl0YWJsZSBmb3IgSlNPTlxuICogICBzdHJpbmdpZmljYXRpb24uXG4gKi9cbmZ1bmN0aW9uIHRvSlModmFsdWUsIGFyZywgY3R4KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtcmV0dXJuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKVxuICAgICAgICByZXR1cm4gdmFsdWUubWFwKCh2LCBpKSA9PiB0b0pTKHYsIFN0cmluZyhpKSwgY3R4KSk7XG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZS50b0pTT04gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtY2FsbFxuICAgICAgICBpZiAoIWN0eCB8fCAhaGFzQW5jaG9yKHZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b0pTT04oYXJnLCBjdHgpO1xuICAgICAgICBjb25zdCBkYXRhID0geyBhbGlhc0NvdW50OiAwLCBjb3VudDogMSwgcmVzOiB1bmRlZmluZWQgfTtcbiAgICAgICAgY3R4LmFuY2hvcnMuc2V0KHZhbHVlLCBkYXRhKTtcbiAgICAgICAgY3R4Lm9uQ3JlYXRlID0gcmVzID0+IHtcbiAgICAgICAgICAgIGRhdGEucmVzID0gcmVzO1xuICAgICAgICAgICAgZGVsZXRlIGN0eC5vbkNyZWF0ZTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzID0gdmFsdWUudG9KU09OKGFyZywgY3R4KTtcbiAgICAgICAgaWYgKGN0eC5vbkNyZWF0ZSlcbiAgICAgICAgICAgIGN0eC5vbkNyZWF0ZShyZXMpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYmlnaW50JyAmJiAhY3R4Py5rZWVwKVxuICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydCB7IHRvSlMgfTtcbiIsImltcG9ydCB7IGFwcGx5UmV2aXZlciB9IGZyb20gJy4uL2RvYy9hcHBseVJldml2ZXIuanMnO1xuaW1wb3J0IHsgTk9ERV9UWVBFLCBpc0RvY3VtZW50IH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyB0b0pTIH0gZnJvbSAnLi90b0pTLmpzJztcblxuY2xhc3MgTm9kZUJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIE5PREVfVFlQRSwgeyB2YWx1ZTogdHlwZSB9KTtcbiAgICB9XG4gICAgLyoqIENyZWF0ZSBhIGNvcHkgb2YgdGhpcyBub2RlLiAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgY29uc3QgY29weSA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0aGlzKSk7XG4gICAgICAgIGlmICh0aGlzLnJhbmdlKVxuICAgICAgICAgICAgY29weS5yYW5nZSA9IHRoaXMucmFuZ2Uuc2xpY2UoKTtcbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfVxuICAgIC8qKiBBIHBsYWluIEphdmFTY3JpcHQgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBub2RlLiAqL1xuICAgIHRvSlMoZG9jLCB7IG1hcEFzTWFwLCBtYXhBbGlhc0NvdW50LCBvbkFuY2hvciwgcmV2aXZlciB9ID0ge30pIHtcbiAgICAgICAgaWYgKCFpc0RvY3VtZW50KGRvYykpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBIGRvY3VtZW50IGFyZ3VtZW50IGlzIHJlcXVpcmVkJyk7XG4gICAgICAgIGNvbnN0IGN0eCA9IHtcbiAgICAgICAgICAgIGFuY2hvcnM6IG5ldyBNYXAoKSxcbiAgICAgICAgICAgIGRvYyxcbiAgICAgICAgICAgIGtlZXA6IHRydWUsXG4gICAgICAgICAgICBtYXBBc01hcDogbWFwQXNNYXAgPT09IHRydWUsXG4gICAgICAgICAgICBtYXBLZXlXYXJuZWQ6IGZhbHNlLFxuICAgICAgICAgICAgbWF4QWxpYXNDb3VudDogdHlwZW9mIG1heEFsaWFzQ291bnQgPT09ICdudW1iZXInID8gbWF4QWxpYXNDb3VudCA6IDEwMFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXMgPSB0b0pTKHRoaXMsICcnLCBjdHgpO1xuICAgICAgICBpZiAodHlwZW9mIG9uQW5jaG9yID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgZm9yIChjb25zdCB7IGNvdW50LCByZXMgfSBvZiBjdHguYW5jaG9ycy52YWx1ZXMoKSlcbiAgICAgICAgICAgICAgICBvbkFuY2hvcihyZXMsIGNvdW50KTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiByZXZpdmVyID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IGFwcGx5UmV2aXZlcihyZXZpdmVyLCB7ICcnOiByZXMgfSwgJycsIHJlcylcbiAgICAgICAgICAgIDogcmVzO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgTm9kZUJhc2UgfTtcbiIsImltcG9ydCB7IGFuY2hvcklzVmFsaWQgfSBmcm9tICcuLi9kb2MvYW5jaG9ycy5qcyc7XG5pbXBvcnQgeyB2aXNpdCB9IGZyb20gJy4uL3Zpc2l0LmpzJztcbmltcG9ydCB7IEFMSUFTLCBpc0FsaWFzLCBpc0NvbGxlY3Rpb24sIGlzUGFpciwgaGFzQW5jaG9yIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBOb2RlQmFzZSB9IGZyb20gJy4vTm9kZS5qcyc7XG5pbXBvcnQgeyB0b0pTIH0gZnJvbSAnLi90b0pTLmpzJztcblxuY2xhc3MgQWxpYXMgZXh0ZW5kcyBOb2RlQmFzZSB7XG4gICAgY29uc3RydWN0b3Ioc291cmNlKSB7XG4gICAgICAgIHN1cGVyKEFMSUFTKTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndGFnJywge1xuICAgICAgICAgICAgc2V0KCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQWxpYXMgbm9kZXMgY2Fubm90IGhhdmUgdGFncycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzb2x2ZSB0aGUgdmFsdWUgb2YgdGhpcyBhbGlhcyB3aXRoaW4gYGRvY2AsIGZpbmRpbmcgdGhlIGxhc3RcbiAgICAgKiBpbnN0YW5jZSBvZiB0aGUgYHNvdXJjZWAgYW5jaG9yIGJlZm9yZSB0aGlzIG5vZGUuXG4gICAgICovXG4gICAgcmVzb2x2ZShkb2MsIGN0eCkge1xuICAgICAgICBsZXQgbm9kZXM7XG4gICAgICAgIGlmIChjdHg/LmFsaWFzUmVzb2x2ZUNhY2hlKSB7XG4gICAgICAgICAgICBub2RlcyA9IGN0eC5hbGlhc1Jlc29sdmVDYWNoZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vZGVzID0gW107XG4gICAgICAgICAgICB2aXNpdChkb2MsIHtcbiAgICAgICAgICAgICAgICBOb2RlOiAoX2tleSwgbm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNBbGlhcyhub2RlKSB8fCBoYXNBbmNob3Iobm9kZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGN0eClcbiAgICAgICAgICAgICAgICBjdHguYWxpYXNSZXNvbHZlQ2FjaGUgPSBub2RlcztcbiAgICAgICAgfVxuICAgICAgICBsZXQgZm91bmQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xuICAgICAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBpZiAobm9kZS5hbmNob3IgPT09IHRoaXMuc291cmNlKVxuICAgICAgICAgICAgICAgIGZvdW5kID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgfVxuICAgIHRvSlNPTihfYXJnLCBjdHgpIHtcbiAgICAgICAgaWYgKCFjdHgpXG4gICAgICAgICAgICByZXR1cm4geyBzb3VyY2U6IHRoaXMuc291cmNlIH07XG4gICAgICAgIGNvbnN0IHsgYW5jaG9ycywgZG9jLCBtYXhBbGlhc0NvdW50IH0gPSBjdHg7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IHRoaXMucmVzb2x2ZShkb2MsIGN0eCk7XG4gICAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBgVW5yZXNvbHZlZCBhbGlhcyAodGhlIGFuY2hvciBtdXN0IGJlIHNldCBiZWZvcmUgdGhlIGFsaWFzKTogJHt0aGlzLnNvdXJjZX1gO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRhdGEgPSBhbmNob3JzLmdldChzb3VyY2UpO1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIC8vIFJlc29sdmUgYW5jaG9ycyBmb3IgTm9kZS5wcm90b3R5cGUudG9KUygpXG4gICAgICAgICAgICB0b0pTKHNvdXJjZSwgbnVsbCwgY3R4KTtcbiAgICAgICAgICAgIGRhdGEgPSBhbmNob3JzLmdldChzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIWRhdGEgfHwgZGF0YS5yZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gJ1RoaXMgc2hvdWxkIG5vdCBoYXBwZW46IEFsaWFzIGFuY2hvciB3YXMgbm90IHJlc29sdmVkPyc7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IobXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4QWxpYXNDb3VudCA+PSAwKSB7XG4gICAgICAgICAgICBkYXRhLmNvdW50ICs9IDE7XG4gICAgICAgICAgICBpZiAoZGF0YS5hbGlhc0NvdW50ID09PSAwKVxuICAgICAgICAgICAgICAgIGRhdGEuYWxpYXNDb3VudCA9IGdldEFsaWFzQ291bnQoZG9jLCBzb3VyY2UsIGFuY2hvcnMpO1xuICAgICAgICAgICAgaWYgKGRhdGEuY291bnQgKiBkYXRhLmFsaWFzQ291bnQgPiBtYXhBbGlhc0NvdW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbXNnID0gJ0V4Y2Vzc2l2ZSBhbGlhcyBjb3VudCBpbmRpY2F0ZXMgYSByZXNvdXJjZSBleGhhdXN0aW9uIGF0dGFjayc7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGEucmVzO1xuICAgIH1cbiAgICB0b1N0cmluZyhjdHgsIF9vbkNvbW1lbnQsIF9vbkNob21wS2VlcCkge1xuICAgICAgICBjb25zdCBzcmMgPSBgKiR7dGhpcy5zb3VyY2V9YDtcbiAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgYW5jaG9ySXNWYWxpZCh0aGlzLnNvdXJjZSk7XG4gICAgICAgICAgICBpZiAoY3R4Lm9wdGlvbnMudmVyaWZ5QWxpYXNPcmRlciAmJiAhY3R4LmFuY2hvcnMuaGFzKHRoaXMuc291cmNlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IGBVbnJlc29sdmVkIGFsaWFzICh0aGUgYW5jaG9yIG11c3QgYmUgc2V0IGJlZm9yZSB0aGUgYWxpYXMpOiAke3RoaXMuc291cmNlfWA7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3R4LmltcGxpY2l0S2V5KVxuICAgICAgICAgICAgICAgIHJldHVybiBgJHtzcmN9IGA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNyYztcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRBbGlhc0NvdW50KGRvYywgbm9kZSwgYW5jaG9ycykge1xuICAgIGlmIChpc0FsaWFzKG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IG5vZGUucmVzb2x2ZShkb2MpO1xuICAgICAgICBjb25zdCBhbmNob3IgPSBhbmNob3JzICYmIHNvdXJjZSAmJiBhbmNob3JzLmdldChzb3VyY2UpO1xuICAgICAgICByZXR1cm4gYW5jaG9yID8gYW5jaG9yLmNvdW50ICogYW5jaG9yLmFsaWFzQ291bnQgOiAwO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0NvbGxlY3Rpb24obm9kZSkpIHtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIG5vZGUuaXRlbXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBnZXRBbGlhc0NvdW50KGRvYywgaXRlbSwgYW5jaG9ycyk7XG4gICAgICAgICAgICBpZiAoYyA+IGNvdW50KVxuICAgICAgICAgICAgICAgIGNvdW50ID0gYztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGFpcihub2RlKSkge1xuICAgICAgICBjb25zdCBrYyA9IGdldEFsaWFzQ291bnQoZG9jLCBub2RlLmtleSwgYW5jaG9ycyk7XG4gICAgICAgIGNvbnN0IHZjID0gZ2V0QWxpYXNDb3VudChkb2MsIG5vZGUudmFsdWUsIGFuY2hvcnMpO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoa2MsIHZjKTtcbiAgICB9XG4gICAgcmV0dXJuIDE7XG59XG5cbmV4cG9ydCB7IEFsaWFzIH07XG4iLCJpbXBvcnQgeyBTQ0FMQVIgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IE5vZGVCYXNlIH0gZnJvbSAnLi9Ob2RlLmpzJztcbmltcG9ydCB7IHRvSlMgfSBmcm9tICcuL3RvSlMuanMnO1xuXG5jb25zdCBpc1NjYWxhclZhbHVlID0gKHZhbHVlKSA9PiAhdmFsdWUgfHwgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKTtcbmNsYXNzIFNjYWxhciBleHRlbmRzIE5vZGVCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgICAgICBzdXBlcihTQ0FMQVIpO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIHRvSlNPTihhcmcsIGN0eCkge1xuICAgICAgICByZXR1cm4gY3R4Py5rZWVwID8gdGhpcy52YWx1ZSA6IHRvSlModGhpcy52YWx1ZSwgYXJnLCBjdHgpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzLnZhbHVlKTtcbiAgICB9XG59XG5TY2FsYXIuQkxPQ0tfRk9MREVEID0gJ0JMT0NLX0ZPTERFRCc7XG5TY2FsYXIuQkxPQ0tfTElURVJBTCA9ICdCTE9DS19MSVRFUkFMJztcblNjYWxhci5QTEFJTiA9ICdQTEFJTic7XG5TY2FsYXIuUVVPVEVfRE9VQkxFID0gJ1FVT1RFX0RPVUJMRSc7XG5TY2FsYXIuUVVPVEVfU0lOR0xFID0gJ1FVT1RFX1NJTkdMRSc7XG5cbmV4cG9ydCB7IFNjYWxhciwgaXNTY2FsYXJWYWx1ZSB9O1xuIiwiaW1wb3J0IHsgQWxpYXMgfSBmcm9tICcuLi9ub2Rlcy9BbGlhcy5qcyc7XG5pbXBvcnQgeyBpc05vZGUsIGlzUGFpciwgTUFQLCBTRVEsIGlzRG9jdW1lbnQgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9TY2FsYXIuanMnO1xuXG5jb25zdCBkZWZhdWx0VGFnUHJlZml4ID0gJ3RhZzp5YW1sLm9yZywyMDAyOic7XG5mdW5jdGlvbiBmaW5kVGFnT2JqZWN0KHZhbHVlLCB0YWdOYW1lLCB0YWdzKSB7XG4gICAgaWYgKHRhZ05hbWUpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0YWdzLmZpbHRlcih0ID0+IHQudGFnID09PSB0YWdOYW1lKTtcbiAgICAgICAgY29uc3QgdGFnT2JqID0gbWF0Y2guZmluZCh0ID0+ICF0LmZvcm1hdCkgPz8gbWF0Y2hbMF07XG4gICAgICAgIGlmICghdGFnT2JqKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUYWcgJHt0YWdOYW1lfSBub3QgZm91bmRgKTtcbiAgICAgICAgcmV0dXJuIHRhZ09iajtcbiAgICB9XG4gICAgcmV0dXJuIHRhZ3MuZmluZCh0ID0+IHQuaWRlbnRpZnk/Lih2YWx1ZSkgJiYgIXQuZm9ybWF0KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU5vZGUodmFsdWUsIHRhZ05hbWUsIGN0eCkge1xuICAgIGlmIChpc0RvY3VtZW50KHZhbHVlKSlcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5jb250ZW50cztcbiAgICBpZiAoaXNOb2RlKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIGlmIChpc1BhaXIodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IGN0eC5zY2hlbWFbTUFQXS5jcmVhdGVOb2RlPy4oY3R4LnNjaGVtYSwgbnVsbCwgY3R4KTtcbiAgICAgICAgbWFwLml0ZW1zLnB1c2godmFsdWUpO1xuICAgICAgICByZXR1cm4gbWFwO1xuICAgIH1cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBTdHJpbmcgfHxcbiAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIgfHxcbiAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBCb29sZWFuIHx8XG4gICAgICAgICh0eXBlb2YgQmlnSW50ICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEJpZ0ludCkgLy8gbm90IHN1cHBvcnRlZCBldmVyeXdoZXJlXG4gICAgKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2VyaWFsaXplanNvbnByb3BlcnR5XG4gICAgICAgIHZhbHVlID0gdmFsdWUudmFsdWVPZigpO1xuICAgIH1cbiAgICBjb25zdCB7IGFsaWFzRHVwbGljYXRlT2JqZWN0cywgb25BbmNob3IsIG9uVGFnT2JqLCBzY2hlbWEsIHNvdXJjZU9iamVjdHMgfSA9IGN0eDtcbiAgICAvLyBEZXRlY3QgZHVwbGljYXRlIHJlZmVyZW5jZXMgdG8gdGhlIHNhbWUgb2JqZWN0ICYgdXNlIEFsaWFzIG5vZGVzIGZvciBhbGxcbiAgICAvLyBhZnRlciBmaXJzdC4gVGhlIGByZWZgIHdyYXBwZXIgYWxsb3dzIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIHRvIHJlc29sdmUuXG4gICAgbGV0IHJlZiA9IHVuZGVmaW5lZDtcbiAgICBpZiAoYWxpYXNEdXBsaWNhdGVPYmplY3RzICYmIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmVmID0gc291cmNlT2JqZWN0cy5nZXQodmFsdWUpO1xuICAgICAgICBpZiAocmVmKSB7XG4gICAgICAgICAgICByZWYuYW5jaG9yID8/IChyZWYuYW5jaG9yID0gb25BbmNob3IodmFsdWUpKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQWxpYXMocmVmLmFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZWYgPSB7IGFuY2hvcjogbnVsbCwgbm9kZTogbnVsbCB9O1xuICAgICAgICAgICAgc291cmNlT2JqZWN0cy5zZXQodmFsdWUsIHJlZik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRhZ05hbWU/LnN0YXJ0c1dpdGgoJyEhJykpXG4gICAgICAgIHRhZ05hbWUgPSBkZWZhdWx0VGFnUHJlZml4ICsgdGFnTmFtZS5zbGljZSgyKTtcbiAgICBsZXQgdGFnT2JqID0gZmluZFRhZ09iamVjdCh2YWx1ZSwgdGFnTmFtZSwgc2NoZW1hLnRhZ3MpO1xuICAgIGlmICghdGFnT2JqKSB7XG4gICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1jYWxsXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBTY2FsYXIodmFsdWUpO1xuICAgICAgICAgICAgaWYgKHJlZilcbiAgICAgICAgICAgICAgICByZWYubm9kZSA9IG5vZGU7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICB0YWdPYmogPVxuICAgICAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBNYXBcbiAgICAgICAgICAgICAgICA/IHNjaGVtYVtNQVBdXG4gICAgICAgICAgICAgICAgOiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA/IHNjaGVtYVtTRVFdXG4gICAgICAgICAgICAgICAgICAgIDogc2NoZW1hW01BUF07XG4gICAgfVxuICAgIGlmIChvblRhZ09iaikge1xuICAgICAgICBvblRhZ09iaih0YWdPYmopO1xuICAgICAgICBkZWxldGUgY3R4Lm9uVGFnT2JqO1xuICAgIH1cbiAgICBjb25zdCBub2RlID0gdGFnT2JqPy5jcmVhdGVOb2RlXG4gICAgICAgID8gdGFnT2JqLmNyZWF0ZU5vZGUoY3R4LnNjaGVtYSwgdmFsdWUsIGN0eClcbiAgICAgICAgOiB0eXBlb2YgdGFnT2JqPy5ub2RlQ2xhc3M/LmZyb20gPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gdGFnT2JqLm5vZGVDbGFzcy5mcm9tKGN0eC5zY2hlbWEsIHZhbHVlLCBjdHgpXG4gICAgICAgICAgICA6IG5ldyBTY2FsYXIodmFsdWUpO1xuICAgIGlmICh0YWdOYW1lKVxuICAgICAgICBub2RlLnRhZyA9IHRhZ05hbWU7XG4gICAgZWxzZSBpZiAoIXRhZ09iai5kZWZhdWx0KVxuICAgICAgICBub2RlLnRhZyA9IHRhZ09iai50YWc7XG4gICAgaWYgKHJlZilcbiAgICAgICAgcmVmLm5vZGUgPSBub2RlO1xuICAgIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgeyBjcmVhdGVOb2RlIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVOb2RlIH0gZnJvbSAnLi4vZG9jL2NyZWF0ZU5vZGUuanMnO1xuaW1wb3J0IHsgaXNOb2RlLCBpc1BhaXIsIGlzQ29sbGVjdGlvbiwgaXNTY2FsYXIgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IE5vZGVCYXNlIH0gZnJvbSAnLi9Ob2RlLmpzJztcblxuZnVuY3Rpb24gY29sbGVjdGlvbkZyb21QYXRoKHNjaGVtYSwgcGF0aCwgdmFsdWUpIHtcbiAgICBsZXQgdiA9IHZhbHVlO1xuICAgIGZvciAobGV0IGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIGNvbnN0IGsgPSBwYXRoW2ldO1xuICAgICAgICBpZiAodHlwZW9mIGsgPT09ICdudW1iZXInICYmIE51bWJlci5pc0ludGVnZXIoaykgJiYgayA+PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBhID0gW107XG4gICAgICAgICAgICBhW2tdID0gdjtcbiAgICAgICAgICAgIHYgPSBhO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdiA9IG5ldyBNYXAoW1trLCB2XV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVOb2RlKHYsIHVuZGVmaW5lZCwge1xuICAgICAgICBhbGlhc0R1cGxpY2F0ZU9iamVjdHM6IGZhbHNlLFxuICAgICAgICBrZWVwVW5kZWZpbmVkOiBmYWxzZSxcbiAgICAgICAgb25BbmNob3I6ICgpID0+IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBzaG91bGQgbm90IGhhcHBlbiwgcGxlYXNlIHJlcG9ydCBhIGJ1Zy4nKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBzb3VyY2VPYmplY3RzOiBuZXcgTWFwKClcbiAgICB9KTtcbn1cbi8vIFR5cGUgZ3VhcmQgaXMgaW50ZW50aW9uYWxseSBhIGxpdHRsZSB3cm9uZyBzbyBhcyB0byBiZSBtb3JlIHVzZWZ1bCxcbi8vIGFzIGl0IGRvZXMgbm90IGNvdmVyIHVudHlwYWJsZSBlbXB0eSBub24tc3RyaW5nIGl0ZXJhYmxlcyAoZS5nLiBbXSkuXG5jb25zdCBpc0VtcHR5UGF0aCA9IChwYXRoKSA9PiBwYXRoID09IG51bGwgfHxcbiAgICAodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmICEhcGF0aFtTeW1ib2wuaXRlcmF0b3JdKCkubmV4dCgpLmRvbmUpO1xuY2xhc3MgQ29sbGVjdGlvbiBleHRlbmRzIE5vZGVCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBzY2hlbWEpIHtcbiAgICAgICAgc3VwZXIodHlwZSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NoZW1hJywge1xuICAgICAgICAgICAgdmFsdWU6IHNjaGVtYSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNvcHkgb2YgdGhpcyBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjaGVtYSAtIElmIGRlZmluZWQsIG92ZXJ3cml0ZXMgdGhlIG9yaWdpbmFsJ3Mgc2NoZW1hXG4gICAgICovXG4gICAgY2xvbmUoc2NoZW1hKSB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModGhpcykpO1xuICAgICAgICBpZiAoc2NoZW1hKVxuICAgICAgICAgICAgY29weS5zY2hlbWEgPSBzY2hlbWE7XG4gICAgICAgIGNvcHkuaXRlbXMgPSBjb3B5Lml0ZW1zLm1hcChpdCA9PiBpc05vZGUoaXQpIHx8IGlzUGFpcihpdCkgPyBpdC5jbG9uZShzY2hlbWEpIDogaXQpO1xuICAgICAgICBpZiAodGhpcy5yYW5nZSlcbiAgICAgICAgICAgIGNvcHkucmFuZ2UgPSB0aGlzLnJhbmdlLnNsaWNlKCk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgdmFsdWUgdG8gdGhlIGNvbGxlY3Rpb24uIEZvciBgISFtYXBgIGFuZCBgISFvbWFwYCB0aGUgdmFsdWUgbXVzdFxuICAgICAqIGJlIGEgUGFpciBpbnN0YW5jZSBvciBhIGB7IGtleSwgdmFsdWUgfWAgb2JqZWN0LCB3aGljaCBtYXkgbm90IGhhdmUgYSBrZXlcbiAgICAgKiB0aGF0IGFscmVhZHkgZXhpc3RzIGluIHRoZSBtYXAuXG4gICAgICovXG4gICAgYWRkSW4ocGF0aCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzRW1wdHlQYXRoKHBhdGgpKVxuICAgICAgICAgICAgdGhpcy5hZGQodmFsdWUpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gcGF0aDtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldChrZXksIHRydWUpO1xuICAgICAgICAgICAgaWYgKGlzQ29sbGVjdGlvbihub2RlKSlcbiAgICAgICAgICAgICAgICBub2RlLmFkZEluKHJlc3QsIHZhbHVlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCAmJiB0aGlzLnNjaGVtYSlcbiAgICAgICAgICAgICAgICB0aGlzLnNldChrZXksIGNvbGxlY3Rpb25Gcm9tUGF0aCh0aGlzLnNjaGVtYSwgcmVzdCwgdmFsdWUpKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIFlBTUwgY29sbGVjdGlvbiBhdCAke2tleX0uIFJlbWFpbmluZyBwYXRoOiAke3Jlc3R9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHZhbHVlIGZyb20gdGhlIGNvbGxlY3Rpb24uXG4gICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBpdGVtIHdhcyBmb3VuZCBhbmQgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBkZWxldGVJbihwYXRoKSB7XG4gICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gcGF0aDtcbiAgICAgICAgaWYgKHJlc3QubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlKGtleSk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldChrZXksIHRydWUpO1xuICAgICAgICBpZiAoaXNDb2xsZWN0aW9uKG5vZGUpKVxuICAgICAgICAgICAgcmV0dXJuIG5vZGUuZGVsZXRlSW4ocmVzdCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgWUFNTCBjb2xsZWN0aW9uIGF0ICR7a2V5fS4gUmVtYWluaW5nIHBhdGg6ICR7cmVzdH1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpdGVtIGF0IGBrZXlgLCBvciBgdW5kZWZpbmVkYCBpZiBub3QgZm91bmQuIEJ5IGRlZmF1bHQgdW53cmFwc1xuICAgICAqIHNjYWxhciB2YWx1ZXMgZnJvbSB0aGVpciBzdXJyb3VuZGluZyBub2RlOyB0byBkaXNhYmxlIHNldCBga2VlcFNjYWxhcmAgdG9cbiAgICAgKiBgdHJ1ZWAgKGNvbGxlY3Rpb25zIGFyZSBhbHdheXMgcmV0dXJuZWQgaW50YWN0KS5cbiAgICAgKi9cbiAgICBnZXRJbihwYXRoLCBrZWVwU2NhbGFyKSB7XG4gICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gcGF0aDtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZ2V0KGtleSwgdHJ1ZSk7XG4gICAgICAgIGlmIChyZXN0Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiAha2VlcFNjYWxhciAmJiBpc1NjYWxhcihub2RlKSA/IG5vZGUudmFsdWUgOiBub2RlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gaXNDb2xsZWN0aW9uKG5vZGUpID8gbm9kZS5nZXRJbihyZXN0LCBrZWVwU2NhbGFyKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaGFzQWxsTnVsbFZhbHVlcyhhbGxvd1NjYWxhcikge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5ldmVyeShub2RlID0+IHtcbiAgICAgICAgICAgIGlmICghaXNQYWlyKG5vZGUpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBub2RlLnZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIChuID09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAoYWxsb3dTY2FsYXIgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNTY2FsYXIobikgJiZcbiAgICAgICAgICAgICAgICAgICAgbi52YWx1ZSA9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICFuLmNvbW1lbnRCZWZvcmUgJiZcbiAgICAgICAgICAgICAgICAgICAgIW4uY29tbWVudCAmJlxuICAgICAgICAgICAgICAgICAgICAhbi50YWcpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgY29sbGVjdGlvbiBpbmNsdWRlcyBhIHZhbHVlIHdpdGggdGhlIGtleSBga2V5YC5cbiAgICAgKi9cbiAgICBoYXNJbihwYXRoKSB7XG4gICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gcGF0aDtcbiAgICAgICAgaWYgKHJlc3QubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFzKGtleSk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldChrZXksIHRydWUpO1xuICAgICAgICByZXR1cm4gaXNDb2xsZWN0aW9uKG5vZGUpID8gbm9kZS5oYXNJbihyZXN0KSA6IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdmFsdWUgaW4gdGhpcyBjb2xsZWN0aW9uLiBGb3IgYCEhc2V0YCwgYHZhbHVlYCBuZWVkcyB0byBiZSBhXG4gICAgICogYm9vbGVhbiB0byBhZGQvcmVtb3ZlIHRoZSBpdGVtIGZyb20gdGhlIHNldC5cbiAgICAgKi9cbiAgICBzZXRJbihwYXRoLCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBba2V5LCAuLi5yZXN0XSA9IHBhdGg7XG4gICAgICAgIGlmIChyZXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5nZXQoa2V5LCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChpc0NvbGxlY3Rpb24obm9kZSkpXG4gICAgICAgICAgICAgICAgbm9kZS5zZXRJbihyZXN0LCB2YWx1ZSk7XG4gICAgICAgICAgICBlbHNlIGlmIChub2RlID09PSB1bmRlZmluZWQgJiYgdGhpcy5zY2hlbWEpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCBjb2xsZWN0aW9uRnJvbVBhdGgodGhpcy5zY2hlbWEsIHJlc3QsIHZhbHVlKSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBZQU1MIGNvbGxlY3Rpb24gYXQgJHtrZXl9LiBSZW1haW5pbmcgcGF0aDogJHtyZXN0fWApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBDb2xsZWN0aW9uLCBjb2xsZWN0aW9uRnJvbVBhdGgsIGlzRW1wdHlQYXRoIH07XG4iLCIvKipcbiAqIFN0cmluZ2lmaWVzIGEgY29tbWVudC5cbiAqXG4gKiBFbXB0eSBjb21tZW50IGxpbmVzIGFyZSBsZWZ0IGVtcHR5LFxuICogbGluZXMgY29uc2lzdGluZyBvZiBhIHNpbmdsZSBzcGFjZSBhcmUgcmVwbGFjZWQgYnkgYCNgLFxuICogYW5kIGFsbCBvdGhlciBsaW5lcyBhcmUgcHJlZml4ZWQgd2l0aCBhIGAjYC5cbiAqL1xuY29uc3Qgc3RyaW5naWZ5Q29tbWVudCA9IChzdHIpID0+IHN0ci5yZXBsYWNlKC9eKD8hJCkoPzogJCk/L2dtLCAnIycpO1xuZnVuY3Rpb24gaW5kZW50Q29tbWVudChjb21tZW50LCBpbmRlbnQpIHtcbiAgICBpZiAoL15cXG4rJC8udGVzdChjb21tZW50KSlcbiAgICAgICAgcmV0dXJuIGNvbW1lbnQuc3Vic3RyaW5nKDEpO1xuICAgIHJldHVybiBpbmRlbnQgPyBjb21tZW50LnJlcGxhY2UoL14oPyEgKiQpL2dtLCBpbmRlbnQpIDogY29tbWVudDtcbn1cbmNvbnN0IGxpbmVDb21tZW50ID0gKHN0ciwgaW5kZW50LCBjb21tZW50KSA9PiBzdHIuZW5kc1dpdGgoJ1xcbicpXG4gICAgPyBpbmRlbnRDb21tZW50KGNvbW1lbnQsIGluZGVudClcbiAgICA6IGNvbW1lbnQuaW5jbHVkZXMoJ1xcbicpXG4gICAgICAgID8gJ1xcbicgKyBpbmRlbnRDb21tZW50KGNvbW1lbnQsIGluZGVudClcbiAgICAgICAgOiAoc3RyLmVuZHNXaXRoKCcgJykgPyAnJyA6ICcgJykgKyBjb21tZW50O1xuXG5leHBvcnQgeyBpbmRlbnRDb21tZW50LCBsaW5lQ29tbWVudCwgc3RyaW5naWZ5Q29tbWVudCB9O1xuIiwiY29uc3QgRk9MRF9GTE9XID0gJ2Zsb3cnO1xuY29uc3QgRk9MRF9CTE9DSyA9ICdibG9jayc7XG5jb25zdCBGT0xEX1FVT1RFRCA9ICdxdW90ZWQnO1xuLyoqXG4gKiBUcmllcyB0byBrZWVwIGlucHV0IGF0IHVwIHRvIGBsaW5lV2lkdGhgIGNoYXJhY3RlcnMsIHNwbGl0dGluZyBvbmx5IG9uIHNwYWNlc1xuICogbm90IGZvbGxvd2VkIGJ5IG5ld2xpbmVzIG9yIHNwYWNlcyB1bmxlc3MgYG1vZGVgIGlzIGAncXVvdGVkJ2AuIExpbmVzIGFyZVxuICogdGVybWluYXRlZCB3aXRoIGBcXG5gIGFuZCBzdGFydGVkIHdpdGggYGluZGVudGAuXG4gKi9cbmZ1bmN0aW9uIGZvbGRGbG93TGluZXModGV4dCwgaW5kZW50LCBtb2RlID0gJ2Zsb3cnLCB7IGluZGVudEF0U3RhcnQsIGxpbmVXaWR0aCA9IDgwLCBtaW5Db250ZW50V2lkdGggPSAyMCwgb25Gb2xkLCBvbk92ZXJmbG93IH0gPSB7fSkge1xuICAgIGlmICghbGluZVdpZHRoIHx8IGxpbmVXaWR0aCA8IDApXG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIGlmIChsaW5lV2lkdGggPCBtaW5Db250ZW50V2lkdGgpXG4gICAgICAgIG1pbkNvbnRlbnRXaWR0aCA9IDA7XG4gICAgY29uc3QgZW5kU3RlcCA9IE1hdGgubWF4KDEgKyBtaW5Db250ZW50V2lkdGgsIDEgKyBsaW5lV2lkdGggLSBpbmRlbnQubGVuZ3RoKTtcbiAgICBpZiAodGV4dC5sZW5ndGggPD0gZW5kU3RlcClcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgY29uc3QgZm9sZHMgPSBbXTtcbiAgICBjb25zdCBlc2NhcGVkRm9sZHMgPSB7fTtcbiAgICBsZXQgZW5kID0gbGluZVdpZHRoIC0gaW5kZW50Lmxlbmd0aDtcbiAgICBpZiAodHlwZW9mIGluZGVudEF0U3RhcnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmIChpbmRlbnRBdFN0YXJ0ID4gbGluZVdpZHRoIC0gTWF0aC5tYXgoMiwgbWluQ29udGVudFdpZHRoKSlcbiAgICAgICAgICAgIGZvbGRzLnB1c2goMCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGVuZCA9IGxpbmVXaWR0aCAtIGluZGVudEF0U3RhcnQ7XG4gICAgfVxuICAgIGxldCBzcGxpdCA9IHVuZGVmaW5lZDtcbiAgICBsZXQgcHJldiA9IHVuZGVmaW5lZDtcbiAgICBsZXQgb3ZlcmZsb3cgPSBmYWxzZTtcbiAgICBsZXQgaSA9IC0xO1xuICAgIGxldCBlc2NTdGFydCA9IC0xO1xuICAgIGxldCBlc2NFbmQgPSAtMTtcbiAgICBpZiAobW9kZSA9PT0gRk9MRF9CTE9DSykge1xuICAgICAgICBpID0gY29uc3VtZU1vcmVJbmRlbnRlZExpbmVzKHRleHQsIGksIGluZGVudC5sZW5ndGgpO1xuICAgICAgICBpZiAoaSAhPT0gLTEpXG4gICAgICAgICAgICBlbmQgPSBpICsgZW5kU3RlcDtcbiAgICB9XG4gICAgZm9yIChsZXQgY2g7IChjaCA9IHRleHRbKGkgKz0gMSldKTspIHtcbiAgICAgICAgaWYgKG1vZGUgPT09IEZPTERfUVVPVEVEICYmIGNoID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIGVzY1N0YXJ0ID0gaTtcbiAgICAgICAgICAgIHN3aXRjaCAodGV4dFtpICsgMV0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICd4JzpcbiAgICAgICAgICAgICAgICAgICAgaSArPSAzO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd1JzpcbiAgICAgICAgICAgICAgICAgICAgaSArPSA1O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdVJzpcbiAgICAgICAgICAgICAgICAgICAgaSArPSA5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlc2NFbmQgPSBpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgIGlmIChtb2RlID09PSBGT0xEX0JMT0NLKVxuICAgICAgICAgICAgICAgIGkgPSBjb25zdW1lTW9yZUluZGVudGVkTGluZXModGV4dCwgaSwgaW5kZW50Lmxlbmd0aCk7XG4gICAgICAgICAgICBlbmQgPSBpICsgaW5kZW50Lmxlbmd0aCArIGVuZFN0ZXA7XG4gICAgICAgICAgICBzcGxpdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJyAnICYmXG4gICAgICAgICAgICAgICAgcHJldiAmJlxuICAgICAgICAgICAgICAgIHByZXYgIT09ICcgJyAmJlxuICAgICAgICAgICAgICAgIHByZXYgIT09ICdcXG4nICYmXG4gICAgICAgICAgICAgICAgcHJldiAhPT0gJ1xcdCcpIHtcbiAgICAgICAgICAgICAgICAvLyBzcGFjZSBzdXJyb3VuZGVkIGJ5IG5vbi1zcGFjZSBjYW4gYmUgcmVwbGFjZWQgd2l0aCBuZXdsaW5lICsgaW5kZW50XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRleHRbaSArIDFdO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQgIT09ICcgJyAmJiBuZXh0ICE9PSAnXFxuJyAmJiBuZXh0ICE9PSAnXFx0JylcbiAgICAgICAgICAgICAgICAgICAgc3BsaXQgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGkgPj0gZW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNwbGl0KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbGRzLnB1c2goc3BsaXQpO1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBzcGxpdCArIGVuZFN0ZXA7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb2RlID09PSBGT0xEX1FVT1RFRCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB3aGl0ZS1zcGFjZSBjb2xsZWN0ZWQgYXQgZW5kIG1heSBzdHJldGNoIHBhc3QgbGluZVdpZHRoXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwcmV2ID09PSAnICcgfHwgcHJldiA9PT0gJ1xcdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoID0gdGV4dFsoaSArPSAxKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQWNjb3VudCBmb3IgbmV3bGluZSBlc2NhcGUsIGJ1dCBkb24ndCBicmVhayBwcmVjZWRpbmcgZXNjYXBlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGogPSBpID4gZXNjRW5kICsgMSA/IGkgLSAyIDogZXNjU3RhcnQgLSAxO1xuICAgICAgICAgICAgICAgICAgICAvLyBCYWlsIG91dCBpZiBsaW5lV2lkdGggJiBtaW5Db250ZW50V2lkdGggYXJlIHNob3J0ZXIgdGhhbiBhbiBlc2NhcGUgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIGlmIChlc2NhcGVkRm9sZHNbal0pXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgICAgICAgICAgICAgZm9sZHMucHVzaChqKTtcbiAgICAgICAgICAgICAgICAgICAgZXNjYXBlZEZvbGRzW2pdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gaiArIGVuZFN0ZXA7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcmV2ID0gY2g7XG4gICAgfVxuICAgIGlmIChvdmVyZmxvdyAmJiBvbk92ZXJmbG93KVxuICAgICAgICBvbk92ZXJmbG93KCk7XG4gICAgaWYgKGZvbGRzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgaWYgKG9uRm9sZClcbiAgICAgICAgb25Gb2xkKCk7XG4gICAgbGV0IHJlcyA9IHRleHQuc2xpY2UoMCwgZm9sZHNbMF0pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm9sZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgZm9sZCA9IGZvbGRzW2ldO1xuICAgICAgICBjb25zdCBlbmQgPSBmb2xkc1tpICsgMV0gfHwgdGV4dC5sZW5ndGg7XG4gICAgICAgIGlmIChmb2xkID09PSAwKVxuICAgICAgICAgICAgcmVzID0gYFxcbiR7aW5kZW50fSR7dGV4dC5zbGljZSgwLCBlbmQpfWA7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKG1vZGUgPT09IEZPTERfUVVPVEVEICYmIGVzY2FwZWRGb2xkc1tmb2xkXSlcbiAgICAgICAgICAgICAgICByZXMgKz0gYCR7dGV4dFtmb2xkXX1cXFxcYDtcbiAgICAgICAgICAgIHJlcyArPSBgXFxuJHtpbmRlbnR9JHt0ZXh0LnNsaWNlKGZvbGQgKyAxLCBlbmQpfWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8qKlxuICogUHJlc3VtZXMgYGkgKyAxYCBpcyBhdCB0aGUgc3RhcnQgb2YgYSBsaW5lXG4gKiBAcmV0dXJucyBpbmRleCBvZiBsYXN0IG5ld2xpbmUgaW4gbW9yZS1pbmRlbnRlZCBibG9ja1xuICovXG5mdW5jdGlvbiBjb25zdW1lTW9yZUluZGVudGVkTGluZXModGV4dCwgaSwgaW5kZW50KSB7XG4gICAgbGV0IGVuZCA9IGk7XG4gICAgbGV0IHN0YXJ0ID0gaSArIDE7XG4gICAgbGV0IGNoID0gdGV4dFtzdGFydF07XG4gICAgd2hpbGUgKGNoID09PSAnICcgfHwgY2ggPT09ICdcXHQnKSB7XG4gICAgICAgIGlmIChpIDwgc3RhcnQgKyBpbmRlbnQpIHtcbiAgICAgICAgICAgIGNoID0gdGV4dFsrK2ldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGNoID0gdGV4dFsrK2ldO1xuICAgICAgICAgICAgfSB3aGlsZSAoY2ggJiYgY2ggIT09ICdcXG4nKTtcbiAgICAgICAgICAgIGVuZCA9IGk7XG4gICAgICAgICAgICBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgY2ggPSB0ZXh0W3N0YXJ0XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW5kO1xufVxuXG5leHBvcnQgeyBGT0xEX0JMT0NLLCBGT0xEX0ZMT1csIEZPTERfUVVPVEVELCBmb2xkRmxvd0xpbmVzIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9TY2FsYXIuanMnO1xuaW1wb3J0IHsgZm9sZEZsb3dMaW5lcywgRk9MRF9GTE9XLCBGT0xEX1FVT1RFRCwgRk9MRF9CTE9DSyB9IGZyb20gJy4vZm9sZEZsb3dMaW5lcy5qcyc7XG5cbmNvbnN0IGdldEZvbGRPcHRpb25zID0gKGN0eCwgaXNCbG9jaykgPT4gKHtcbiAgICBpbmRlbnRBdFN0YXJ0OiBpc0Jsb2NrID8gY3R4LmluZGVudC5sZW5ndGggOiBjdHguaW5kZW50QXRTdGFydCxcbiAgICBsaW5lV2lkdGg6IGN0eC5vcHRpb25zLmxpbmVXaWR0aCxcbiAgICBtaW5Db250ZW50V2lkdGg6IGN0eC5vcHRpb25zLm1pbkNvbnRlbnRXaWR0aFxufSk7XG4vLyBBbHNvIGNoZWNrcyBmb3IgbGluZXMgc3RhcnRpbmcgd2l0aCAlLCBhcyBwYXJzaW5nIHRoZSBvdXRwdXQgYXMgWUFNTCAxLjEgd2lsbFxuLy8gcHJlc3VtZSB0aGF0J3Mgc3RhcnRpbmcgYSBuZXcgZG9jdW1lbnQuXG5jb25zdCBjb250YWluc0RvY3VtZW50TWFya2VyID0gKHN0cikgPT4gL14oJXwtLS18XFwuXFwuXFwuKS9tLnRlc3Qoc3RyKTtcbmZ1bmN0aW9uIGxpbmVMZW5ndGhPdmVyTGltaXQoc3RyLCBsaW5lV2lkdGgsIGluZGVudExlbmd0aCkge1xuICAgIGlmICghbGluZVdpZHRoIHx8IGxpbmVXaWR0aCA8IDApXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBsaW1pdCA9IGxpbmVXaWR0aCAtIGluZGVudExlbmd0aDtcbiAgICBjb25zdCBzdHJMZW4gPSBzdHIubGVuZ3RoO1xuICAgIGlmIChzdHJMZW4gPD0gbGltaXQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMCwgc3RhcnQgPSAwOyBpIDwgc3RyTGVuOyArK2kpIHtcbiAgICAgICAgaWYgKHN0cltpXSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgIGlmIChpIC0gc3RhcnQgPiBsaW1pdClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICBpZiAoc3RyTGVuIC0gc3RhcnQgPD0gbGltaXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gZG91YmxlUXVvdGVkU3RyaW5nKHZhbHVlLCBjdHgpIHtcbiAgICBjb25zdCBqc29uID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIGlmIChjdHgub3B0aW9ucy5kb3VibGVRdW90ZWRBc0pTT04pXG4gICAgICAgIHJldHVybiBqc29uO1xuICAgIGNvbnN0IHsgaW1wbGljaXRLZXkgfSA9IGN0eDtcbiAgICBjb25zdCBtaW5NdWx0aUxpbmVMZW5ndGggPSBjdHgub3B0aW9ucy5kb3VibGVRdW90ZWRNaW5NdWx0aUxpbmVMZW5ndGg7XG4gICAgY29uc3QgaW5kZW50ID0gY3R4LmluZGVudCB8fCAoY29udGFpbnNEb2N1bWVudE1hcmtlcih2YWx1ZSkgPyAnICAnIDogJycpO1xuICAgIGxldCBzdHIgPSAnJztcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwLCBjaCA9IGpzb25baV07IGNoOyBjaCA9IGpzb25bKytpXSkge1xuICAgICAgICBpZiAoY2ggPT09ICcgJyAmJiBqc29uW2kgKyAxXSA9PT0gJ1xcXFwnICYmIGpzb25baSArIDJdID09PSAnbicpIHtcbiAgICAgICAgICAgIC8vIHNwYWNlIGJlZm9yZSBuZXdsaW5lIG5lZWRzIHRvIGJlIGVzY2FwZWQgdG8gbm90IGJlIGZvbGRlZFxuICAgICAgICAgICAgc3RyICs9IGpzb24uc2xpY2Uoc3RhcnQsIGkpICsgJ1xcXFwgJztcbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgIHN0YXJ0ID0gaTtcbiAgICAgICAgICAgIGNoID0gJ1xcXFwnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcXFwnKVxuICAgICAgICAgICAgc3dpdGNoIChqc29uW2kgKyAxXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3UnOlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0ganNvbi5zbGljZShzdGFydCwgaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2RlID0ganNvbi5zdWJzdHIoaSArIDIsIDQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMDAwMCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXDAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcwMDA3JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcYSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzAwMGInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFx2JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMDAxYic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXGUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcwMDg1JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcTic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzAwYTAnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFxfJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMjAyOCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXEwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcyMDI5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcUCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2RlLnN1YnN0cigwLCAyKSA9PT0gJzAwJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXHgnICsgY29kZS5zdWJzdHIoMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBqc29uLnN1YnN0cihpLCA2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gNTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbic6XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbXBsaWNpdEtleSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAganNvbltpICsgMl0gPT09ICdcIicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzb24ubGVuZ3RoIDwgbWluTXVsdGlMaW5lTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb2xkaW5nIHdpbGwgZWF0IGZpcnN0IG5ld2xpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBqc29uLnNsaWNlKHN0YXJ0LCBpKSArICdcXG5cXG4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGpzb25baSArIDJdID09PSAnXFxcXCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uW2kgKyAzXSA9PT0gJ24nICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbltpICsgNF0gIT09ICdcIicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IGluZGVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNwYWNlIGFmdGVyIG5ld2xpbmUgbmVlZHMgdG8gYmUgZXNjYXBlZCB0byBub3QgYmUgZm9sZGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvbltpICsgMl0gPT09ICcgJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgfVxuICAgIHN0ciA9IHN0YXJ0ID8gc3RyICsganNvbi5zbGljZShzdGFydCkgOiBqc29uO1xuICAgIHJldHVybiBpbXBsaWNpdEtleVxuICAgICAgICA/IHN0clxuICAgICAgICA6IGZvbGRGbG93TGluZXMoc3RyLCBpbmRlbnQsIEZPTERfUVVPVEVELCBnZXRGb2xkT3B0aW9ucyhjdHgsIGZhbHNlKSk7XG59XG5mdW5jdGlvbiBzaW5nbGVRdW90ZWRTdHJpbmcodmFsdWUsIGN0eCkge1xuICAgIGlmIChjdHgub3B0aW9ucy5zaW5nbGVRdW90ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGN0eC5pbXBsaWNpdEtleSAmJiB2YWx1ZS5pbmNsdWRlcygnXFxuJykpIHx8XG4gICAgICAgIC9bIFxcdF1cXG58XFxuWyBcXHRdLy50ZXN0KHZhbHVlKSAvLyBzaW5nbGUgcXVvdGVkIHN0cmluZyBjYW4ndCBoYXZlIGxlYWRpbmcgb3IgdHJhaWxpbmcgd2hpdGVzcGFjZSBhcm91bmQgbmV3bGluZVxuICAgIClcbiAgICAgICAgcmV0dXJuIGRvdWJsZVF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KTtcbiAgICBjb25zdCBpbmRlbnQgPSBjdHguaW5kZW50IHx8IChjb250YWluc0RvY3VtZW50TWFya2VyKHZhbHVlKSA/ICcgICcgOiAnJyk7XG4gICAgY29uc3QgcmVzID0gXCInXCIgKyB2YWx1ZS5yZXBsYWNlKC8nL2csIFwiJydcIikucmVwbGFjZSgvXFxuKy9nLCBgJCZcXG4ke2luZGVudH1gKSArIFwiJ1wiO1xuICAgIHJldHVybiBjdHguaW1wbGljaXRLZXlcbiAgICAgICAgPyByZXNcbiAgICAgICAgOiBmb2xkRmxvd0xpbmVzKHJlcywgaW5kZW50LCBGT0xEX0ZMT1csIGdldEZvbGRPcHRpb25zKGN0eCwgZmFsc2UpKTtcbn1cbmZ1bmN0aW9uIHF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KSB7XG4gICAgY29uc3QgeyBzaW5nbGVRdW90ZSB9ID0gY3R4Lm9wdGlvbnM7XG4gICAgbGV0IHFzO1xuICAgIGlmIChzaW5nbGVRdW90ZSA9PT0gZmFsc2UpXG4gICAgICAgIHFzID0gZG91YmxlUXVvdGVkU3RyaW5nO1xuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBoYXNEb3VibGUgPSB2YWx1ZS5pbmNsdWRlcygnXCInKTtcbiAgICAgICAgY29uc3QgaGFzU2luZ2xlID0gdmFsdWUuaW5jbHVkZXMoXCInXCIpO1xuICAgICAgICBpZiAoaGFzRG91YmxlICYmICFoYXNTaW5nbGUpXG4gICAgICAgICAgICBxcyA9IHNpbmdsZVF1b3RlZFN0cmluZztcbiAgICAgICAgZWxzZSBpZiAoaGFzU2luZ2xlICYmICFoYXNEb3VibGUpXG4gICAgICAgICAgICBxcyA9IGRvdWJsZVF1b3RlZFN0cmluZztcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcXMgPSBzaW5nbGVRdW90ZSA/IHNpbmdsZVF1b3RlZFN0cmluZyA6IGRvdWJsZVF1b3RlZFN0cmluZztcbiAgICB9XG4gICAgcmV0dXJuIHFzKHZhbHVlLCBjdHgpO1xufVxuLy8gVGhlIG5lZ2F0aXZlIGxvb2tiZWhpbmQgYXZvaWRzIGEgcG9seW5vbWlhbCBzZWFyY2gsXG4vLyBidXQgaXNuJ3Qgc3VwcG9ydGVkIHlldCBvbiBTYWZhcmk6IGh0dHBzOi8vY2FuaXVzZS5jb20vanMtcmVnZXhwLWxvb2tiZWhpbmRcbmxldCBibG9ja0VuZE5ld2xpbmVzO1xudHJ5IHtcbiAgICBibG9ja0VuZE5ld2xpbmVzID0gbmV3IFJlZ0V4cCgnKF58KD88IVxcbikpXFxuKyg/IVxcbnwkKScsICdnJyk7XG59XG5jYXRjaCB7XG4gICAgYmxvY2tFbmROZXdsaW5lcyA9IC9cXG4rKD8hXFxufCQpL2c7XG59XG5mdW5jdGlvbiBibG9ja1N0cmluZyh7IGNvbW1lbnQsIHR5cGUsIHZhbHVlIH0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgIGNvbnN0IHsgYmxvY2tRdW90ZSwgY29tbWVudFN0cmluZywgbGluZVdpZHRoIH0gPSBjdHgub3B0aW9ucztcbiAgICAvLyAxLiBCbG9jayBjYW4ndCBlbmQgaW4gd2hpdGVzcGFjZSB1bmxlc3MgdGhlIGxhc3QgbGluZSBpcyBub24tZW1wdHkuXG4gICAgLy8gMi4gU3RyaW5ncyBjb25zaXN0aW5nIG9mIG9ubHkgd2hpdGVzcGFjZSBhcmUgYmVzdCByZW5kZXJlZCBleHBsaWNpdGx5LlxuICAgIGlmICghYmxvY2tRdW90ZSB8fCAvXFxuW1xcdCBdKyQvLnRlc3QodmFsdWUpIHx8IC9eXFxzKiQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBxdW90ZWRTdHJpbmcodmFsdWUsIGN0eCk7XG4gICAgfVxuICAgIGNvbnN0IGluZGVudCA9IGN0eC5pbmRlbnQgfHxcbiAgICAgICAgKGN0eC5mb3JjZUJsb2NrSW5kZW50IHx8IGNvbnRhaW5zRG9jdW1lbnRNYXJrZXIodmFsdWUpID8gJyAgJyA6ICcnKTtcbiAgICBjb25zdCBsaXRlcmFsID0gYmxvY2tRdW90ZSA9PT0gJ2xpdGVyYWwnXG4gICAgICAgID8gdHJ1ZVxuICAgICAgICA6IGJsb2NrUXVvdGUgPT09ICdmb2xkZWQnIHx8IHR5cGUgPT09IFNjYWxhci5CTE9DS19GT0xERURcbiAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgIDogdHlwZSA9PT0gU2NhbGFyLkJMT0NLX0xJVEVSQUxcbiAgICAgICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgICAgICA6ICFsaW5lTGVuZ3RoT3ZlckxpbWl0KHZhbHVlLCBsaW5lV2lkdGgsIGluZGVudC5sZW5ndGgpO1xuICAgIGlmICghdmFsdWUpXG4gICAgICAgIHJldHVybiBsaXRlcmFsID8gJ3xcXG4nIDogJz5cXG4nO1xuICAgIC8vIGRldGVybWluZSBjaG9tcGluZyBmcm9tIHdoaXRlc3BhY2UgYXQgdmFsdWUgZW5kXG4gICAgbGV0IGNob21wO1xuICAgIGxldCBlbmRTdGFydDtcbiAgICBmb3IgKGVuZFN0YXJ0ID0gdmFsdWUubGVuZ3RoOyBlbmRTdGFydCA+IDA7IC0tZW5kU3RhcnQpIHtcbiAgICAgICAgY29uc3QgY2ggPSB2YWx1ZVtlbmRTdGFydCAtIDFdO1xuICAgICAgICBpZiAoY2ggIT09ICdcXG4nICYmIGNoICE9PSAnXFx0JyAmJiBjaCAhPT0gJyAnKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGxldCBlbmQgPSB2YWx1ZS5zdWJzdHJpbmcoZW5kU3RhcnQpO1xuICAgIGNvbnN0IGVuZE5sUG9zID0gZW5kLmluZGV4T2YoJ1xcbicpO1xuICAgIGlmIChlbmRObFBvcyA9PT0gLTEpIHtcbiAgICAgICAgY2hvbXAgPSAnLSc7IC8vIHN0cmlwXG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlID09PSBlbmQgfHwgZW5kTmxQb3MgIT09IGVuZC5sZW5ndGggLSAxKSB7XG4gICAgICAgIGNob21wID0gJysnOyAvLyBrZWVwXG4gICAgICAgIGlmIChvbkNob21wS2VlcClcbiAgICAgICAgICAgIG9uQ2hvbXBLZWVwKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjaG9tcCA9ICcnOyAvLyBjbGlwXG4gICAgfVxuICAgIGlmIChlbmQpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCAtZW5kLmxlbmd0aCk7XG4gICAgICAgIGlmIChlbmRbZW5kLmxlbmd0aCAtIDFdID09PSAnXFxuJylcbiAgICAgICAgICAgIGVuZCA9IGVuZC5zbGljZSgwLCAtMSk7XG4gICAgICAgIGVuZCA9IGVuZC5yZXBsYWNlKGJsb2NrRW5kTmV3bGluZXMsIGAkJiR7aW5kZW50fWApO1xuICAgIH1cbiAgICAvLyBkZXRlcm1pbmUgaW5kZW50IGluZGljYXRvciBmcm9tIHdoaXRlc3BhY2UgYXQgdmFsdWUgc3RhcnRcbiAgICBsZXQgc3RhcnRXaXRoU3BhY2UgPSBmYWxzZTtcbiAgICBsZXQgc3RhcnRFbmQ7XG4gICAgbGV0IHN0YXJ0TmxQb3MgPSAtMTtcbiAgICBmb3IgKHN0YXJ0RW5kID0gMDsgc3RhcnRFbmQgPCB2YWx1ZS5sZW5ndGg7ICsrc3RhcnRFbmQpIHtcbiAgICAgICAgY29uc3QgY2ggPSB2YWx1ZVtzdGFydEVuZF07XG4gICAgICAgIGlmIChjaCA9PT0gJyAnKVxuICAgICAgICAgICAgc3RhcnRXaXRoU3BhY2UgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjaCA9PT0gJ1xcbicpXG4gICAgICAgICAgICBzdGFydE5sUG9zID0gc3RhcnRFbmQ7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBsZXQgc3RhcnQgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgc3RhcnRObFBvcyA8IHN0YXJ0RW5kID8gc3RhcnRObFBvcyArIDEgOiBzdGFydEVuZCk7XG4gICAgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKHN0YXJ0Lmxlbmd0aCk7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQucmVwbGFjZSgvXFxuKy9nLCBgJCYke2luZGVudH1gKTtcbiAgICB9XG4gICAgY29uc3QgaW5kZW50U2l6ZSA9IGluZGVudCA/ICcyJyA6ICcxJzsgLy8gcm9vdCBpcyBhdCAtMVxuICAgIC8vIExlYWRpbmcgfCBvciA+IGlzIGFkZGVkIGxhdGVyXG4gICAgbGV0IGhlYWRlciA9IChzdGFydFdpdGhTcGFjZSA/IGluZGVudFNpemUgOiAnJykgKyBjaG9tcDtcbiAgICBpZiAoY29tbWVudCkge1xuICAgICAgICBoZWFkZXIgKz0gJyAnICsgY29tbWVudFN0cmluZyhjb21tZW50LnJlcGxhY2UoLyA/W1xcclxcbl0rL2csICcgJykpO1xuICAgICAgICBpZiAob25Db21tZW50KVxuICAgICAgICAgICAgb25Db21tZW50KCk7XG4gICAgfVxuICAgIGlmICghbGl0ZXJhbCkge1xuICAgICAgICBjb25zdCBmb2xkZWRWYWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxuKy9nLCAnXFxuJCYnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyg/Ol58XFxuKShbXFx0IF0uKikoPzooW1xcblxcdCBdKilcXG4oPyFbXFxuXFx0IF0pKT8vZywgJyQxJDInKSAvLyBtb3JlLWluZGVudGVkIGxpbmVzIGFyZW4ndCBmb2xkZWRcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIF4gbW9yZS1pbmQuIF4gZW1wdHkgICAgIF4gY2FwdHVyZSBuZXh0IGVtcHR5IGxpbmVzIG9ubHkgYXQgZW5kIG9mIGluZGVudFxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcbisvZywgYCQmJHtpbmRlbnR9YCk7XG4gICAgICAgIGxldCBsaXRlcmFsRmFsbGJhY2sgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgZm9sZE9wdGlvbnMgPSBnZXRGb2xkT3B0aW9ucyhjdHgsIHRydWUpO1xuICAgICAgICBpZiAoYmxvY2tRdW90ZSAhPT0gJ2ZvbGRlZCcgJiYgdHlwZSAhPT0gU2NhbGFyLkJMT0NLX0ZPTERFRCkge1xuICAgICAgICAgICAgZm9sZE9wdGlvbnMub25PdmVyZmxvdyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBsaXRlcmFsRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBib2R5ID0gZm9sZEZsb3dMaW5lcyhgJHtzdGFydH0ke2ZvbGRlZFZhbHVlfSR7ZW5kfWAsIGluZGVudCwgRk9MRF9CTE9DSywgZm9sZE9wdGlvbnMpO1xuICAgICAgICBpZiAoIWxpdGVyYWxGYWxsYmFjaylcbiAgICAgICAgICAgIHJldHVybiBgPiR7aGVhZGVyfVxcbiR7aW5kZW50fSR7Ym9keX1gO1xuICAgIH1cbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcbisvZywgYCQmJHtpbmRlbnR9YCk7XG4gICAgcmV0dXJuIGB8JHtoZWFkZXJ9XFxuJHtpbmRlbnR9JHtzdGFydH0ke3ZhbHVlfSR7ZW5kfWA7XG59XG5mdW5jdGlvbiBwbGFpblN0cmluZyhpdGVtLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICBjb25zdCB7IHR5cGUsIHZhbHVlIH0gPSBpdGVtO1xuICAgIGNvbnN0IHsgYWN0dWFsU3RyaW5nLCBpbXBsaWNpdEtleSwgaW5kZW50LCBpbmRlbnRTdGVwLCBpbkZsb3cgfSA9IGN0eDtcbiAgICBpZiAoKGltcGxpY2l0S2V5ICYmIHZhbHVlLmluY2x1ZGVzKCdcXG4nKSkgfHxcbiAgICAgICAgKGluRmxvdyAmJiAvW1tcXF17fSxdLy50ZXN0KHZhbHVlKSkpIHtcbiAgICAgICAgcmV0dXJuIHF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KTtcbiAgICB9XG4gICAgaWYgKC9eW1xcblxcdCAsW1xcXXt9IyYqIXw+J1wiJUBgXXxeWz8tXSR8Xls/LV1bIFxcdF18W1xcbjpdWyBcXHRdfFsgXFx0XVxcbnxbXFxuXFx0IF0jfFtcXG5cXHQgOl0kLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICAvLyBub3QgYWxsb3dlZDpcbiAgICAgICAgLy8gLSAnLScgb3IgJz8nXG4gICAgICAgIC8vIC0gc3RhcnQgd2l0aCBhbiBpbmRpY2F0b3IgY2hhcmFjdGVyIChleGNlcHQgWz86LV0pIG9yIC9bPy1dIC9cbiAgICAgICAgLy8gLSAnXFxuICcsICc6ICcgb3IgJyBcXG4nIGFueXdoZXJlXG4gICAgICAgIC8vIC0gJyMnIG5vdCBwcmVjZWRlZCBieSBhIG5vbi1zcGFjZSBjaGFyXG4gICAgICAgIC8vIC0gZW5kIHdpdGggJyAnIG9yICc6J1xuICAgICAgICByZXR1cm4gaW1wbGljaXRLZXkgfHwgaW5GbG93IHx8ICF2YWx1ZS5pbmNsdWRlcygnXFxuJylcbiAgICAgICAgICAgID8gcXVvdGVkU3RyaW5nKHZhbHVlLCBjdHgpXG4gICAgICAgICAgICA6IGJsb2NrU3RyaW5nKGl0ZW0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgfVxuICAgIGlmICghaW1wbGljaXRLZXkgJiZcbiAgICAgICAgIWluRmxvdyAmJlxuICAgICAgICB0eXBlICE9PSBTY2FsYXIuUExBSU4gJiZcbiAgICAgICAgdmFsdWUuaW5jbHVkZXMoJ1xcbicpKSB7XG4gICAgICAgIC8vIFdoZXJlIGFsbG93ZWQgJiB0eXBlIG5vdCBzZXQgZXhwbGljaXRseSwgcHJlZmVyIGJsb2NrIHN0eWxlIGZvciBtdWx0aWxpbmUgc3RyaW5nc1xuICAgICAgICByZXR1cm4gYmxvY2tTdHJpbmcoaXRlbSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKTtcbiAgICB9XG4gICAgaWYgKGNvbnRhaW5zRG9jdW1lbnRNYXJrZXIodmFsdWUpKSB7XG4gICAgICAgIGlmIChpbmRlbnQgPT09ICcnKSB7XG4gICAgICAgICAgICBjdHguZm9yY2VCbG9ja0luZGVudCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gYmxvY2tTdHJpbmcoaXRlbSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbXBsaWNpdEtleSAmJiBpbmRlbnQgPT09IGluZGVudFN0ZXApIHtcbiAgICAgICAgICAgIHJldHVybiBxdW90ZWRTdHJpbmcodmFsdWUsIGN0eCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc3RyID0gdmFsdWUucmVwbGFjZSgvXFxuKy9nLCBgJCZcXG4ke2luZGVudH1gKTtcbiAgICAvLyBWZXJpZnkgdGhhdCBvdXRwdXQgd2lsbCBiZSBwYXJzZWQgYXMgYSBzdHJpbmcsIGFzIGUuZy4gcGxhaW4gbnVtYmVycyBhbmRcbiAgICAvLyBib29sZWFucyBnZXQgcGFyc2VkIHdpdGggdGhvc2UgdHlwZXMgaW4gdjEuMiAoZS5nLiAnNDInLCAndHJ1ZScgJiAnMC45ZS0zJyksXG4gICAgLy8gYW5kIG90aGVycyBpbiB2MS4xLlxuICAgIGlmIChhY3R1YWxTdHJpbmcpIHtcbiAgICAgICAgY29uc3QgdGVzdCA9ICh0YWcpID0+IHRhZy5kZWZhdWx0ICYmIHRhZy50YWcgIT09ICd0YWc6eWFtbC5vcmcsMjAwMjpzdHInICYmIHRhZy50ZXN0Py50ZXN0KHN0cik7XG4gICAgICAgIGNvbnN0IHsgY29tcGF0LCB0YWdzIH0gPSBjdHguZG9jLnNjaGVtYTtcbiAgICAgICAgaWYgKHRhZ3Muc29tZSh0ZXN0KSB8fCBjb21wYXQ/LnNvbWUodGVzdCkpXG4gICAgICAgICAgICByZXR1cm4gcXVvdGVkU3RyaW5nKHZhbHVlLCBjdHgpO1xuICAgIH1cbiAgICByZXR1cm4gaW1wbGljaXRLZXlcbiAgICAgICAgPyBzdHJcbiAgICAgICAgOiBmb2xkRmxvd0xpbmVzKHN0ciwgaW5kZW50LCBGT0xEX0ZMT1csIGdldEZvbGRPcHRpb25zKGN0eCwgZmFsc2UpKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVN0cmluZyhpdGVtLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICBjb25zdCB7IGltcGxpY2l0S2V5LCBpbkZsb3cgfSA9IGN0eDtcbiAgICBjb25zdCBzcyA9IHR5cGVvZiBpdGVtLnZhbHVlID09PSAnc3RyaW5nJ1xuICAgICAgICA/IGl0ZW1cbiAgICAgICAgOiBPYmplY3QuYXNzaWduKHt9LCBpdGVtLCB7IHZhbHVlOiBTdHJpbmcoaXRlbS52YWx1ZSkgfSk7XG4gICAgbGV0IHsgdHlwZSB9ID0gaXRlbTtcbiAgICBpZiAodHlwZSAhPT0gU2NhbGFyLlFVT1RFX0RPVUJMRSkge1xuICAgICAgICAvLyBmb3JjZSBkb3VibGUgcXVvdGVzIG9uIGNvbnRyb2wgY2hhcmFjdGVycyAmIHVucGFpcmVkIHN1cnJvZ2F0ZXNcbiAgICAgICAgaWYgKC9bXFx4MDAtXFx4MDhcXHgwYi1cXHgxZlxceDdmLVxceDlmXFx1e0Q4MDB9LVxcdXtERkZGfV0vdS50ZXN0KHNzLnZhbHVlKSlcbiAgICAgICAgICAgIHR5cGUgPSBTY2FsYXIuUVVPVEVfRE9VQkxFO1xuICAgIH1cbiAgICBjb25zdCBfc3RyaW5naWZ5ID0gKF90eXBlKSA9PiB7XG4gICAgICAgIHN3aXRjaCAoX3R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyLkJMT0NLX0ZPTERFRDpcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyLkJMT0NLX0xJVEVSQUw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGltcGxpY2l0S2V5IHx8IGluRmxvd1xuICAgICAgICAgICAgICAgICAgICA/IHF1b3RlZFN0cmluZyhzcy52YWx1ZSwgY3R4KSAvLyBibG9ja3MgYXJlIG5vdCB2YWxpZCBpbnNpZGUgZmxvdyBjb250YWluZXJzXG4gICAgICAgICAgICAgICAgICAgIDogYmxvY2tTdHJpbmcoc3MsIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgICAgICAgICBjYXNlIFNjYWxhci5RVU9URV9ET1VCTEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvdWJsZVF1b3RlZFN0cmluZyhzcy52YWx1ZSwgY3R4KTtcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyLlFVT1RFX1NJTkdMRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gc2luZ2xlUXVvdGVkU3RyaW5nKHNzLnZhbHVlLCBjdHgpO1xuICAgICAgICAgICAgY2FzZSBTY2FsYXIuUExBSU46XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBsYWluU3RyaW5nKHNzLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgbGV0IHJlcyA9IF9zdHJpbmdpZnkodHlwZSk7XG4gICAgaWYgKHJlcyA9PT0gbnVsbCkge1xuICAgICAgICBjb25zdCB7IGRlZmF1bHRLZXlUeXBlLCBkZWZhdWx0U3RyaW5nVHlwZSB9ID0gY3R4Lm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHQgPSAoaW1wbGljaXRLZXkgJiYgZGVmYXVsdEtleVR5cGUpIHx8IGRlZmF1bHRTdHJpbmdUeXBlO1xuICAgICAgICByZXMgPSBfc3RyaW5naWZ5KHQpO1xuICAgICAgICBpZiAocmVzID09PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBkZWZhdWx0IHN0cmluZyB0eXBlICR7dH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IHsgc3RyaW5naWZ5U3RyaW5nIH07XG4iLCJpbXBvcnQgeyBhbmNob3JJc1ZhbGlkIH0gZnJvbSAnLi4vZG9jL2FuY2hvcnMuanMnO1xuaW1wb3J0IHsgaXNQYWlyLCBpc0FsaWFzLCBpc05vZGUsIGlzU2NhbGFyLCBpc0NvbGxlY3Rpb24gfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlDb21tZW50IH0gZnJvbSAnLi9zdHJpbmdpZnlDb21tZW50LmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeVN0cmluZyB9IGZyb20gJy4vc3RyaW5naWZ5U3RyaW5nLmpzJztcblxuZnVuY3Rpb24gY3JlYXRlU3RyaW5naWZ5Q29udGV4dChkb2MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBvcHQgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgYmxvY2tRdW90ZTogdHJ1ZSxcbiAgICAgICAgY29tbWVudFN0cmluZzogc3RyaW5naWZ5Q29tbWVudCxcbiAgICAgICAgZGVmYXVsdEtleVR5cGU6IG51bGwsXG4gICAgICAgIGRlZmF1bHRTdHJpbmdUeXBlOiAnUExBSU4nLFxuICAgICAgICBkaXJlY3RpdmVzOiBudWxsLFxuICAgICAgICBkb3VibGVRdW90ZWRBc0pTT046IGZhbHNlLFxuICAgICAgICBkb3VibGVRdW90ZWRNaW5NdWx0aUxpbmVMZW5ndGg6IDQwLFxuICAgICAgICBmYWxzZVN0cjogJ2ZhbHNlJyxcbiAgICAgICAgZmxvd0NvbGxlY3Rpb25QYWRkaW5nOiB0cnVlLFxuICAgICAgICBpbmRlbnRTZXE6IHRydWUsXG4gICAgICAgIGxpbmVXaWR0aDogODAsXG4gICAgICAgIG1pbkNvbnRlbnRXaWR0aDogMjAsXG4gICAgICAgIG51bGxTdHI6ICdudWxsJyxcbiAgICAgICAgc2ltcGxlS2V5czogZmFsc2UsXG4gICAgICAgIHNpbmdsZVF1b3RlOiBudWxsLFxuICAgICAgICB0cnVlU3RyOiAndHJ1ZScsXG4gICAgICAgIHZlcmlmeUFsaWFzT3JkZXI6IHRydWVcbiAgICB9LCBkb2Muc2NoZW1hLnRvU3RyaW5nT3B0aW9ucywgb3B0aW9ucyk7XG4gICAgbGV0IGluRmxvdztcbiAgICBzd2l0Y2ggKG9wdC5jb2xsZWN0aW9uU3R5bGUpIHtcbiAgICAgICAgY2FzZSAnYmxvY2snOlxuICAgICAgICAgICAgaW5GbG93ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZmxvdyc6XG4gICAgICAgICAgICBpbkZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpbkZsb3cgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhbmNob3JzOiBuZXcgU2V0KCksXG4gICAgICAgIGRvYyxcbiAgICAgICAgZmxvd0NvbGxlY3Rpb25QYWRkaW5nOiBvcHQuZmxvd0NvbGxlY3Rpb25QYWRkaW5nID8gJyAnIDogJycsXG4gICAgICAgIGluZGVudDogJycsXG4gICAgICAgIGluZGVudFN0ZXA6IHR5cGVvZiBvcHQuaW5kZW50ID09PSAnbnVtYmVyJyA/ICcgJy5yZXBlYXQob3B0LmluZGVudCkgOiAnICAnLFxuICAgICAgICBpbkZsb3csXG4gICAgICAgIG9wdGlvbnM6IG9wdFxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRUYWdPYmplY3QodGFncywgaXRlbSkge1xuICAgIGlmIChpdGVtLnRhZykge1xuICAgICAgICBjb25zdCBtYXRjaCA9IHRhZ3MuZmlsdGVyKHQgPT4gdC50YWcgPT09IGl0ZW0udGFnKTtcbiAgICAgICAgaWYgKG1hdGNoLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2guZmluZCh0ID0+IHQuZm9ybWF0ID09PSBpdGVtLmZvcm1hdCkgPz8gbWF0Y2hbMF07XG4gICAgfVxuICAgIGxldCB0YWdPYmogPSB1bmRlZmluZWQ7XG4gICAgbGV0IG9iajtcbiAgICBpZiAoaXNTY2FsYXIoaXRlbSkpIHtcbiAgICAgICAgb2JqID0gaXRlbS52YWx1ZTtcbiAgICAgICAgbGV0IG1hdGNoID0gdGFncy5maWx0ZXIodCA9PiB0LmlkZW50aWZ5Py4ob2JqKSk7XG4gICAgICAgIGlmIChtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBjb25zdCB0ZXN0TWF0Y2ggPSBtYXRjaC5maWx0ZXIodCA9PiB0LnRlc3QpO1xuICAgICAgICAgICAgaWYgKHRlc3RNYXRjaC5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgIG1hdGNoID0gdGVzdE1hdGNoO1xuICAgICAgICB9XG4gICAgICAgIHRhZ09iaiA9XG4gICAgICAgICAgICBtYXRjaC5maW5kKHQgPT4gdC5mb3JtYXQgPT09IGl0ZW0uZm9ybWF0KSA/PyBtYXRjaC5maW5kKHQgPT4gIXQuZm9ybWF0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG9iaiA9IGl0ZW07XG4gICAgICAgIHRhZ09iaiA9IHRhZ3MuZmluZCh0ID0+IHQubm9kZUNsYXNzICYmIG9iaiBpbnN0YW5jZW9mIHQubm9kZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKCF0YWdPYmopIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IG9iaj8uY29uc3RydWN0b3I/Lm5hbWUgPz8gKG9iaiA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBvYmopO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRhZyBub3QgcmVzb2x2ZWQgZm9yICR7bmFtZX0gdmFsdWVgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhZ09iajtcbn1cbi8vIG5lZWRzIHRvIGJlIGNhbGxlZCBiZWZvcmUgdmFsdWUgc3RyaW5naWZpZXIgdG8gYWxsb3cgZm9yIGNpcmN1bGFyIGFuY2hvciByZWZzXG5mdW5jdGlvbiBzdHJpbmdpZnlQcm9wcyhub2RlLCB0YWdPYmosIHsgYW5jaG9ycywgZG9jIH0pIHtcbiAgICBpZiAoIWRvYy5kaXJlY3RpdmVzKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgY29uc3QgcHJvcHMgPSBbXTtcbiAgICBjb25zdCBhbmNob3IgPSAoaXNTY2FsYXIobm9kZSkgfHwgaXNDb2xsZWN0aW9uKG5vZGUpKSAmJiBub2RlLmFuY2hvcjtcbiAgICBpZiAoYW5jaG9yICYmIGFuY2hvcklzVmFsaWQoYW5jaG9yKSkge1xuICAgICAgICBhbmNob3JzLmFkZChhbmNob3IpO1xuICAgICAgICBwcm9wcy5wdXNoKGAmJHthbmNob3J9YCk7XG4gICAgfVxuICAgIGNvbnN0IHRhZyA9IG5vZGUudGFnID8/ICh0YWdPYmouZGVmYXVsdCA/IG51bGwgOiB0YWdPYmoudGFnKTtcbiAgICBpZiAodGFnKVxuICAgICAgICBwcm9wcy5wdXNoKGRvYy5kaXJlY3RpdmVzLnRhZ1N0cmluZyh0YWcpKTtcbiAgICByZXR1cm4gcHJvcHMuam9pbignICcpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5KGl0ZW0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgIGlmIChpc1BhaXIoaXRlbSkpXG4gICAgICAgIHJldHVybiBpdGVtLnRvU3RyaW5nKGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgaWYgKGlzQWxpYXMoaXRlbSkpIHtcbiAgICAgICAgaWYgKGN0eC5kb2MuZGlyZWN0aXZlcylcbiAgICAgICAgICAgIHJldHVybiBpdGVtLnRvU3RyaW5nKGN0eCk7XG4gICAgICAgIGlmIChjdHgucmVzb2x2ZWRBbGlhc2VzPy5oYXMoaXRlbSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYENhbm5vdCBzdHJpbmdpZnkgY2lyY3VsYXIgc3RydWN0dXJlIHdpdGhvdXQgYWxpYXMgbm9kZXNgKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjdHgucmVzb2x2ZWRBbGlhc2VzKVxuICAgICAgICAgICAgICAgIGN0eC5yZXNvbHZlZEFsaWFzZXMuYWRkKGl0ZW0pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGN0eC5yZXNvbHZlZEFsaWFzZXMgPSBuZXcgU2V0KFtpdGVtXSk7XG4gICAgICAgICAgICBpdGVtID0gaXRlbS5yZXNvbHZlKGN0eC5kb2MpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCB0YWdPYmogPSB1bmRlZmluZWQ7XG4gICAgY29uc3Qgbm9kZSA9IGlzTm9kZShpdGVtKVxuICAgICAgICA/IGl0ZW1cbiAgICAgICAgOiBjdHguZG9jLmNyZWF0ZU5vZGUoaXRlbSwgeyBvblRhZ09iajogbyA9PiAodGFnT2JqID0gbykgfSk7XG4gICAgdGFnT2JqID8/ICh0YWdPYmogPSBnZXRUYWdPYmplY3QoY3R4LmRvYy5zY2hlbWEudGFncywgbm9kZSkpO1xuICAgIGNvbnN0IHByb3BzID0gc3RyaW5naWZ5UHJvcHMobm9kZSwgdGFnT2JqLCBjdHgpO1xuICAgIGlmIChwcm9wcy5sZW5ndGggPiAwKVxuICAgICAgICBjdHguaW5kZW50QXRTdGFydCA9IChjdHguaW5kZW50QXRTdGFydCA/PyAwKSArIHByb3BzLmxlbmd0aCArIDE7XG4gICAgY29uc3Qgc3RyID0gdHlwZW9mIHRhZ09iai5zdHJpbmdpZnkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB0YWdPYmouc3RyaW5naWZ5KG5vZGUsIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcClcbiAgICAgICAgOiBpc1NjYWxhcihub2RlKVxuICAgICAgICAgICAgPyBzdHJpbmdpZnlTdHJpbmcobm9kZSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKVxuICAgICAgICAgICAgOiBub2RlLnRvU3RyaW5nKGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgaWYgKCFwcm9wcylcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICByZXR1cm4gaXNTY2FsYXIobm9kZSkgfHwgc3RyWzBdID09PSAneycgfHwgc3RyWzBdID09PSAnWydcbiAgICAgICAgPyBgJHtwcm9wc30gJHtzdHJ9YFxuICAgICAgICA6IGAke3Byb3BzfVxcbiR7Y3R4LmluZGVudH0ke3N0cn1gO1xufVxuXG5leHBvcnQgeyBjcmVhdGVTdHJpbmdpZnlDb250ZXh0LCBzdHJpbmdpZnkgfTtcbiIsImZ1bmN0aW9uIGRlYnVnKGxvZ0xldmVsLCAuLi5tZXNzYWdlcykge1xuICAgIGlmIChsb2dMZXZlbCA9PT0gJ2RlYnVnJylcbiAgICAgICAgY29uc29sZS5sb2coLi4ubWVzc2FnZXMpO1xufVxuZnVuY3Rpb24gd2Fybihsb2dMZXZlbCwgd2FybmluZykge1xuICAgIGlmIChsb2dMZXZlbCA9PT0gJ2RlYnVnJyB8fCBsb2dMZXZlbCA9PT0gJ3dhcm4nKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IGRlYnVnLCB3YXJuIH07XG4iLCJpbXBvcnQgeyBpc1NjYWxhciwgaXNBbGlhcywgaXNTZXEsIGlzTWFwIH0gZnJvbSAnLi4vLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcblxuLy8gSWYgdGhlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBhIG1lcmdlIGtleSBpcyBhIHNpbmdsZSBtYXBwaW5nIG5vZGUsIGVhY2ggb2Zcbi8vIGl0cyBrZXkvdmFsdWUgcGFpcnMgaXMgaW5zZXJ0ZWQgaW50byB0aGUgY3VycmVudCBtYXBwaW5nLCB1bmxlc3MgdGhlIGtleVxuLy8gYWxyZWFkeSBleGlzdHMgaW4gaXQuIElmIHRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIG1lcmdlIGtleSBpcyBhXG4vLyBzZXF1ZW5jZSwgdGhlbiB0aGlzIHNlcXVlbmNlIGlzIGV4cGVjdGVkIHRvIGNvbnRhaW4gbWFwcGluZyBub2RlcyBhbmQgZWFjaFxuLy8gb2YgdGhlc2Ugbm9kZXMgaXMgbWVyZ2VkIGluIHR1cm4gYWNjb3JkaW5nIHRvIGl0cyBvcmRlciBpbiB0aGUgc2VxdWVuY2UuXG4vLyBLZXlzIGluIG1hcHBpbmcgbm9kZXMgZWFybGllciBpbiB0aGUgc2VxdWVuY2Ugb3ZlcnJpZGUga2V5cyBzcGVjaWZpZWQgaW5cbi8vIGxhdGVyIG1hcHBpbmcgbm9kZXMuIC0tIGh0dHA6Ly95YW1sLm9yZy90eXBlL21lcmdlLmh0bWxcbmNvbnN0IE1FUkdFX0tFWSA9ICc8PCc7XG5jb25zdCBtZXJnZSA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgPT09IE1FUkdFX0tFWSB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyAmJiB2YWx1ZS5kZXNjcmlwdGlvbiA9PT0gTUVSR0VfS0VZKSxcbiAgICBkZWZhdWx0OiAna2V5JyxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjptZXJnZScsXG4gICAgdGVzdDogL148PCQvLFxuICAgIHJlc29sdmU6ICgpID0+IE9iamVjdC5hc3NpZ24obmV3IFNjYWxhcihTeW1ib2woTUVSR0VfS0VZKSksIHtcbiAgICAgICAgYWRkVG9KU01hcDogYWRkTWVyZ2VUb0pTTWFwXG4gICAgfSksXG4gICAgc3RyaW5naWZ5OiAoKSA9PiBNRVJHRV9LRVlcbn07XG5jb25zdCBpc01lcmdlS2V5ID0gKGN0eCwga2V5KSA9PiAobWVyZ2UuaWRlbnRpZnkoa2V5KSB8fFxuICAgIChpc1NjYWxhcihrZXkpICYmXG4gICAgICAgICgha2V5LnR5cGUgfHwga2V5LnR5cGUgPT09IFNjYWxhci5QTEFJTikgJiZcbiAgICAgICAgbWVyZ2UuaWRlbnRpZnkoa2V5LnZhbHVlKSkpICYmXG4gICAgY3R4Py5kb2Muc2NoZW1hLnRhZ3Muc29tZSh0YWcgPT4gdGFnLnRhZyA9PT0gbWVyZ2UudGFnICYmIHRhZy5kZWZhdWx0KTtcbmZ1bmN0aW9uIGFkZE1lcmdlVG9KU01hcChjdHgsIG1hcCwgdmFsdWUpIHtcbiAgICB2YWx1ZSA9IGN0eCAmJiBpc0FsaWFzKHZhbHVlKSA/IHZhbHVlLnJlc29sdmUoY3R4LmRvYykgOiB2YWx1ZTtcbiAgICBpZiAoaXNTZXEodmFsdWUpKVxuICAgICAgICBmb3IgKGNvbnN0IGl0IG9mIHZhbHVlLml0ZW1zKVxuICAgICAgICAgICAgbWVyZ2VWYWx1ZShjdHgsIG1hcCwgaXQpO1xuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKVxuICAgICAgICBmb3IgKGNvbnN0IGl0IG9mIHZhbHVlKVxuICAgICAgICAgICAgbWVyZ2VWYWx1ZShjdHgsIG1hcCwgaXQpO1xuICAgIGVsc2VcbiAgICAgICAgbWVyZ2VWYWx1ZShjdHgsIG1hcCwgdmFsdWUpO1xufVxuZnVuY3Rpb24gbWVyZ2VWYWx1ZShjdHgsIG1hcCwgdmFsdWUpIHtcbiAgICBjb25zdCBzb3VyY2UgPSBjdHggJiYgaXNBbGlhcyh2YWx1ZSkgPyB2YWx1ZS5yZXNvbHZlKGN0eC5kb2MpIDogdmFsdWU7XG4gICAgaWYgKCFpc01hcChzb3VyY2UpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01lcmdlIHNvdXJjZXMgbXVzdCBiZSBtYXBzIG9yIG1hcCBhbGlhc2VzJyk7XG4gICAgY29uc3Qgc3JjTWFwID0gc291cmNlLnRvSlNPTihudWxsLCBjdHgsIE1hcCk7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2Ygc3JjTWFwKSB7XG4gICAgICAgIGlmIChtYXAgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgICAgIGlmICghbWFwLmhhcyhrZXkpKVxuICAgICAgICAgICAgICAgIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWFwIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgICAgICBtYXAuYWRkKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtYXAsIGtleSkpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtYXAsIGtleSwge1xuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWFwO1xufVxuXG5leHBvcnQgeyBhZGRNZXJnZVRvSlNNYXAsIGlzTWVyZ2VLZXksIG1lcmdlIH07XG4iLCJpbXBvcnQgeyB3YXJuIH0gZnJvbSAnLi4vbG9nLmpzJztcbmltcG9ydCB7IGlzTWVyZ2VLZXksIGFkZE1lcmdlVG9KU01hcCB9IGZyb20gJy4uL3NjaGVtYS95YW1sLTEuMS9tZXJnZS5qcyc7XG5pbXBvcnQgeyBjcmVhdGVTdHJpbmdpZnlDb250ZXh0IH0gZnJvbSAnLi4vc3RyaW5naWZ5L3N0cmluZ2lmeS5qcyc7XG5pbXBvcnQgeyBpc05vZGUgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IHRvSlMgfSBmcm9tICcuL3RvSlMuanMnO1xuXG5mdW5jdGlvbiBhZGRQYWlyVG9KU01hcChjdHgsIG1hcCwgeyBrZXksIHZhbHVlIH0pIHtcbiAgICBpZiAoaXNOb2RlKGtleSkgJiYga2V5LmFkZFRvSlNNYXApXG4gICAgICAgIGtleS5hZGRUb0pTTWFwKGN0eCwgbWFwLCB2YWx1ZSk7XG4gICAgLy8gVE9ETzogU2hvdWxkIGRyb3AgdGhpcyBzcGVjaWFsIGNhc2UgZm9yIGJhcmUgPDwgaGFuZGxpbmdcbiAgICBlbHNlIGlmIChpc01lcmdlS2V5KGN0eCwga2V5KSlcbiAgICAgICAgYWRkTWVyZ2VUb0pTTWFwKGN0eCwgbWFwLCB2YWx1ZSk7XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGpzS2V5ID0gdG9KUyhrZXksICcnLCBjdHgpO1xuICAgICAgICBpZiAobWFwIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICBtYXAuc2V0KGpzS2V5LCB0b0pTKHZhbHVlLCBqc0tleSwgY3R4KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWFwIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgICAgICBtYXAuYWRkKGpzS2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmluZ0tleSA9IHN0cmluZ2lmeUtleShrZXksIGpzS2V5LCBjdHgpO1xuICAgICAgICAgICAgY29uc3QganNWYWx1ZSA9IHRvSlModmFsdWUsIHN0cmluZ0tleSwgY3R4KTtcbiAgICAgICAgICAgIGlmIChzdHJpbmdLZXkgaW4gbWFwKVxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtYXAsIHN0cmluZ0tleSwge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZToganNWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG1hcFtzdHJpbmdLZXldID0ganNWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWFwO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5S2V5KGtleSwganNLZXksIGN0eCkge1xuICAgIGlmIChqc0tleSA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tYmFzZS10by1zdHJpbmdcbiAgICBpZiAodHlwZW9mIGpzS2V5ICE9PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIFN0cmluZyhqc0tleSk7XG4gICAgaWYgKGlzTm9kZShrZXkpICYmIGN0eD8uZG9jKSB7XG4gICAgICAgIGNvbnN0IHN0ckN0eCA9IGNyZWF0ZVN0cmluZ2lmeUNvbnRleHQoY3R4LmRvYywge30pO1xuICAgICAgICBzdHJDdHguYW5jaG9ycyA9IG5ldyBTZXQoKTtcbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIGN0eC5hbmNob3JzLmtleXMoKSlcbiAgICAgICAgICAgIHN0ckN0eC5hbmNob3JzLmFkZChub2RlLmFuY2hvcik7XG4gICAgICAgIHN0ckN0eC5pbkZsb3cgPSB0cnVlO1xuICAgICAgICBzdHJDdHguaW5TdHJpbmdpZnlLZXkgPSB0cnVlO1xuICAgICAgICBjb25zdCBzdHJLZXkgPSBrZXkudG9TdHJpbmcoc3RyQ3R4KTtcbiAgICAgICAgaWYgKCFjdHgubWFwS2V5V2FybmVkKSB7XG4gICAgICAgICAgICBsZXQganNvblN0ciA9IEpTT04uc3RyaW5naWZ5KHN0cktleSk7XG4gICAgICAgICAgICBpZiAoanNvblN0ci5sZW5ndGggPiA0MClcbiAgICAgICAgICAgICAgICBqc29uU3RyID0ganNvblN0ci5zdWJzdHJpbmcoMCwgMzYpICsgJy4uLlwiJztcbiAgICAgICAgICAgIHdhcm4oY3R4LmRvYy5vcHRpb25zLmxvZ0xldmVsLCBgS2V5cyB3aXRoIGNvbGxlY3Rpb24gdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWQgZHVlIHRvIEpTIE9iamVjdCByZXN0cmljdGlvbnM6ICR7anNvblN0cn0uIFNldCBtYXBBc01hcDogdHJ1ZSB0byB1c2Ugb2JqZWN0IGtleXMuYCk7XG4gICAgICAgICAgICBjdHgubWFwS2V5V2FybmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyS2V5O1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoanNLZXkpO1xufVxuXG5leHBvcnQgeyBhZGRQYWlyVG9KU01hcCB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlTm9kZSB9IGZyb20gJy4uL2RvYy9jcmVhdGVOb2RlLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeVBhaXIgfSBmcm9tICcuLi9zdHJpbmdpZnkvc3RyaW5naWZ5UGFpci5qcyc7XG5pbXBvcnQgeyBhZGRQYWlyVG9KU01hcCB9IGZyb20gJy4vYWRkUGFpclRvSlNNYXAuanMnO1xuaW1wb3J0IHsgTk9ERV9UWVBFLCBQQUlSLCBpc05vZGUgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcblxuZnVuY3Rpb24gY3JlYXRlUGFpcihrZXksIHZhbHVlLCBjdHgpIHtcbiAgICBjb25zdCBrID0gY3JlYXRlTm9kZShrZXksIHVuZGVmaW5lZCwgY3R4KTtcbiAgICBjb25zdCB2ID0gY3JlYXRlTm9kZSh2YWx1ZSwgdW5kZWZpbmVkLCBjdHgpO1xuICAgIHJldHVybiBuZXcgUGFpcihrLCB2KTtcbn1cbmNsYXNzIFBhaXIge1xuICAgIGNvbnN0cnVjdG9yKGtleSwgdmFsdWUgPSBudWxsKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBOT0RFX1RZUEUsIHsgdmFsdWU6IFBBSVIgfSk7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNsb25lKHNjaGVtYSkge1xuICAgICAgICBsZXQgeyBrZXksIHZhbHVlIH0gPSB0aGlzO1xuICAgICAgICBpZiAoaXNOb2RlKGtleSkpXG4gICAgICAgICAgICBrZXkgPSBrZXkuY2xvbmUoc2NoZW1hKTtcbiAgICAgICAgaWYgKGlzTm9kZSh2YWx1ZSkpXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmNsb25lKHNjaGVtYSk7XG4gICAgICAgIHJldHVybiBuZXcgUGFpcihrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgdG9KU09OKF8sIGN0eCkge1xuICAgICAgICBjb25zdCBwYWlyID0gY3R4Py5tYXBBc01hcCA/IG5ldyBNYXAoKSA6IHt9O1xuICAgICAgICByZXR1cm4gYWRkUGFpclRvSlNNYXAoY3R4LCBwYWlyLCB0aGlzKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIHJldHVybiBjdHg/LmRvY1xuICAgICAgICAgICAgPyBzdHJpbmdpZnlQYWlyKHRoaXMsIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcClcbiAgICAgICAgICAgIDogSlNPTi5zdHJpbmdpZnkodGhpcyk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBQYWlyLCBjcmVhdGVQYWlyIH07XG4iLCJpbXBvcnQgeyBpc0NvbGxlY3Rpb24sIGlzTm9kZSwgaXNTY2FsYXIsIGlzU2VxIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmltcG9ydCB7IGxpbmVDb21tZW50LCBpbmRlbnRDb21tZW50IH0gZnJvbSAnLi9zdHJpbmdpZnlDb21tZW50LmpzJztcblxuZnVuY3Rpb24gc3RyaW5naWZ5UGFpcih7IGtleSwgdmFsdWUgfSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgY29uc3QgeyBhbGxOdWxsVmFsdWVzLCBkb2MsIGluZGVudCwgaW5kZW50U3RlcCwgb3B0aW9uczogeyBjb21tZW50U3RyaW5nLCBpbmRlbnRTZXEsIHNpbXBsZUtleXMgfSB9ID0gY3R4O1xuICAgIGxldCBrZXlDb21tZW50ID0gKGlzTm9kZShrZXkpICYmIGtleS5jb21tZW50KSB8fCBudWxsO1xuICAgIGlmIChzaW1wbGVLZXlzKSB7XG4gICAgICAgIGlmIChrZXlDb21tZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dpdGggc2ltcGxlIGtleXMsIGtleSBub2RlcyBjYW5ub3QgaGF2ZSBjb21tZW50cycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0NvbGxlY3Rpb24oa2V5KSB8fCAoIWlzTm9kZShrZXkpICYmIHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSkge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gJ1dpdGggc2ltcGxlIGtleXMsIGNvbGxlY3Rpb24gY2Fubm90IGJlIHVzZWQgYXMgYSBrZXkgdmFsdWUnO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IGV4cGxpY2l0S2V5ID0gIXNpbXBsZUtleXMgJiZcbiAgICAgICAgKCFrZXkgfHxcbiAgICAgICAgICAgIChrZXlDb21tZW50ICYmIHZhbHVlID09IG51bGwgJiYgIWN0eC5pbkZsb3cpIHx8XG4gICAgICAgICAgICBpc0NvbGxlY3Rpb24oa2V5KSB8fFxuICAgICAgICAgICAgKGlzU2NhbGFyKGtleSlcbiAgICAgICAgICAgICAgICA/IGtleS50eXBlID09PSBTY2FsYXIuQkxPQ0tfRk9MREVEIHx8IGtleS50eXBlID09PSBTY2FsYXIuQkxPQ0tfTElURVJBTFxuICAgICAgICAgICAgICAgIDogdHlwZW9mIGtleSA9PT0gJ29iamVjdCcpKTtcbiAgICBjdHggPSBPYmplY3QuYXNzaWduKHt9LCBjdHgsIHtcbiAgICAgICAgYWxsTnVsbFZhbHVlczogZmFsc2UsXG4gICAgICAgIGltcGxpY2l0S2V5OiAhZXhwbGljaXRLZXkgJiYgKHNpbXBsZUtleXMgfHwgIWFsbE51bGxWYWx1ZXMpLFxuICAgICAgICBpbmRlbnQ6IGluZGVudCArIGluZGVudFN0ZXBcbiAgICB9KTtcbiAgICBsZXQga2V5Q29tbWVudERvbmUgPSBmYWxzZTtcbiAgICBsZXQgY2hvbXBLZWVwID0gZmFsc2U7XG4gICAgbGV0IHN0ciA9IHN0cmluZ2lmeShrZXksIGN0eCwgKCkgPT4gKGtleUNvbW1lbnREb25lID0gdHJ1ZSksICgpID0+IChjaG9tcEtlZXAgPSB0cnVlKSk7XG4gICAgaWYgKCFleHBsaWNpdEtleSAmJiAhY3R4LmluRmxvdyAmJiBzdHIubGVuZ3RoID4gMTAyNCkge1xuICAgICAgICBpZiAoc2ltcGxlS2V5cylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2l0aCBzaW1wbGUga2V5cywgc2luZ2xlIGxpbmUgc2NhbGFyIG11c3Qgbm90IHNwYW4gbW9yZSB0aGFuIDEwMjQgY2hhcmFjdGVycycpO1xuICAgICAgICBleHBsaWNpdEtleSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChjdHguaW5GbG93KSB7XG4gICAgICAgIGlmIChhbGxOdWxsVmFsdWVzIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChrZXlDb21tZW50RG9uZSAmJiBvbkNvbW1lbnQpXG4gICAgICAgICAgICAgICAgb25Db21tZW50KCk7XG4gICAgICAgICAgICByZXR1cm4gc3RyID09PSAnJyA/ICc/JyA6IGV4cGxpY2l0S2V5ID8gYD8gJHtzdHJ9YCA6IHN0cjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgoYWxsTnVsbFZhbHVlcyAmJiAhc2ltcGxlS2V5cykgfHwgKHZhbHVlID09IG51bGwgJiYgZXhwbGljaXRLZXkpKSB7XG4gICAgICAgIHN0ciA9IGA/ICR7c3RyfWA7XG4gICAgICAgIGlmIChrZXlDb21tZW50ICYmICFrZXlDb21tZW50RG9uZSkge1xuICAgICAgICAgICAgc3RyICs9IGxpbmVDb21tZW50KHN0ciwgY3R4LmluZGVudCwgY29tbWVudFN0cmluZyhrZXlDb21tZW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2hvbXBLZWVwICYmIG9uQ2hvbXBLZWVwKVxuICAgICAgICAgICAgb25DaG9tcEtlZXAoKTtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgaWYgKGtleUNvbW1lbnREb25lKVxuICAgICAgICBrZXlDb21tZW50ID0gbnVsbDtcbiAgICBpZiAoZXhwbGljaXRLZXkpIHtcbiAgICAgICAgaWYgKGtleUNvbW1lbnQpXG4gICAgICAgICAgICBzdHIgKz0gbGluZUNvbW1lbnQoc3RyLCBjdHguaW5kZW50LCBjb21tZW50U3RyaW5nKGtleUNvbW1lbnQpKTtcbiAgICAgICAgc3RyID0gYD8gJHtzdHJ9XFxuJHtpbmRlbnR9OmA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdHIgPSBgJHtzdHJ9OmA7XG4gICAgICAgIGlmIChrZXlDb21tZW50KVxuICAgICAgICAgICAgc3RyICs9IGxpbmVDb21tZW50KHN0ciwgY3R4LmluZGVudCwgY29tbWVudFN0cmluZyhrZXlDb21tZW50KSk7XG4gICAgfVxuICAgIGxldCB2c2IsIHZjYiwgdmFsdWVDb21tZW50O1xuICAgIGlmIChpc05vZGUodmFsdWUpKSB7XG4gICAgICAgIHZzYiA9ICEhdmFsdWUuc3BhY2VCZWZvcmU7XG4gICAgICAgIHZjYiA9IHZhbHVlLmNvbW1lbnRCZWZvcmU7XG4gICAgICAgIHZhbHVlQ29tbWVudCA9IHZhbHVlLmNvbW1lbnQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2c2IgPSBmYWxzZTtcbiAgICAgICAgdmNiID0gbnVsbDtcbiAgICAgICAgdmFsdWVDb21tZW50ID0gbnVsbDtcbiAgICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpXG4gICAgICAgICAgICB2YWx1ZSA9IGRvYy5jcmVhdGVOb2RlKHZhbHVlKTtcbiAgICB9XG4gICAgY3R4LmltcGxpY2l0S2V5ID0gZmFsc2U7XG4gICAgaWYgKCFleHBsaWNpdEtleSAmJiAha2V5Q29tbWVudCAmJiBpc1NjYWxhcih2YWx1ZSkpXG4gICAgICAgIGN0eC5pbmRlbnRBdFN0YXJ0ID0gc3RyLmxlbmd0aCArIDE7XG4gICAgY2hvbXBLZWVwID0gZmFsc2U7XG4gICAgaWYgKCFpbmRlbnRTZXEgJiZcbiAgICAgICAgaW5kZW50U3RlcC5sZW5ndGggPj0gMiAmJlxuICAgICAgICAhY3R4LmluRmxvdyAmJlxuICAgICAgICAhZXhwbGljaXRLZXkgJiZcbiAgICAgICAgaXNTZXEodmFsdWUpICYmXG4gICAgICAgICF2YWx1ZS5mbG93ICYmXG4gICAgICAgICF2YWx1ZS50YWcgJiZcbiAgICAgICAgIXZhbHVlLmFuY2hvcikge1xuICAgICAgICAvLyBJZiBpbmRlbnRTZXEgPT09IGZhbHNlLCBjb25zaWRlciAnLSAnIGFzIHBhcnQgb2YgaW5kZW50YXRpb24gd2hlcmUgcG9zc2libGVcbiAgICAgICAgY3R4LmluZGVudCA9IGN0eC5pbmRlbnQuc3Vic3RyaW5nKDIpO1xuICAgIH1cbiAgICBsZXQgdmFsdWVDb21tZW50RG9uZSA9IGZhbHNlO1xuICAgIGNvbnN0IHZhbHVlU3RyID0gc3RyaW5naWZ5KHZhbHVlLCBjdHgsICgpID0+ICh2YWx1ZUNvbW1lbnREb25lID0gdHJ1ZSksICgpID0+IChjaG9tcEtlZXAgPSB0cnVlKSk7XG4gICAgbGV0IHdzID0gJyAnO1xuICAgIGlmIChrZXlDb21tZW50IHx8IHZzYiB8fCB2Y2IpIHtcbiAgICAgICAgd3MgPSB2c2IgPyAnXFxuJyA6ICcnO1xuICAgICAgICBpZiAodmNiKSB7XG4gICAgICAgICAgICBjb25zdCBjcyA9IGNvbW1lbnRTdHJpbmcodmNiKTtcbiAgICAgICAgICAgIHdzICs9IGBcXG4ke2luZGVudENvbW1lbnQoY3MsIGN0eC5pbmRlbnQpfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlU3RyID09PSAnJyAmJiAhY3R4LmluRmxvdykge1xuICAgICAgICAgICAgaWYgKHdzID09PSAnXFxuJylcbiAgICAgICAgICAgICAgICB3cyA9ICdcXG5cXG4nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd3MgKz0gYFxcbiR7Y3R4LmluZGVudH1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKCFleHBsaWNpdEtleSAmJiBpc0NvbGxlY3Rpb24odmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHZzMCA9IHZhbHVlU3RyWzBdO1xuICAgICAgICBjb25zdCBubDAgPSB2YWx1ZVN0ci5pbmRleE9mKCdcXG4nKTtcbiAgICAgICAgY29uc3QgaGFzTmV3bGluZSA9IG5sMCAhPT0gLTE7XG4gICAgICAgIGNvbnN0IGZsb3cgPSBjdHguaW5GbG93ID8/IHZhbHVlLmZsb3cgPz8gdmFsdWUuaXRlbXMubGVuZ3RoID09PSAwO1xuICAgICAgICBpZiAoaGFzTmV3bGluZSB8fCAhZmxvdykge1xuICAgICAgICAgICAgbGV0IGhhc1Byb3BzTGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGhhc05ld2xpbmUgJiYgKHZzMCA9PT0gJyYnIHx8IHZzMCA9PT0gJyEnKSkge1xuICAgICAgICAgICAgICAgIGxldCBzcDAgPSB2YWx1ZVN0ci5pbmRleE9mKCcgJyk7XG4gICAgICAgICAgICAgICAgaWYgKHZzMCA9PT0gJyYnICYmXG4gICAgICAgICAgICAgICAgICAgIHNwMCAhPT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgc3AwIDwgbmwwICYmXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlU3RyW3NwMCArIDFdID09PSAnIScpIHtcbiAgICAgICAgICAgICAgICAgICAgc3AwID0gdmFsdWVTdHIuaW5kZXhPZignICcsIHNwMCArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3AwID09PSAtMSB8fCBubDAgPCBzcDApXG4gICAgICAgICAgICAgICAgICAgIGhhc1Byb3BzTGluZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWhhc1Byb3BzTGluZSlcbiAgICAgICAgICAgICAgICB3cyA9IGBcXG4ke2N0eC5pbmRlbnR9YDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZVN0ciA9PT0gJycgfHwgdmFsdWVTdHJbMF0gPT09ICdcXG4nKSB7XG4gICAgICAgIHdzID0gJyc7XG4gICAgfVxuICAgIHN0ciArPSB3cyArIHZhbHVlU3RyO1xuICAgIGlmIChjdHguaW5GbG93KSB7XG4gICAgICAgIGlmICh2YWx1ZUNvbW1lbnREb25lICYmIG9uQ29tbWVudClcbiAgICAgICAgICAgIG9uQ29tbWVudCgpO1xuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZUNvbW1lbnQgJiYgIXZhbHVlQ29tbWVudERvbmUpIHtcbiAgICAgICAgc3RyICs9IGxpbmVDb21tZW50KHN0ciwgY3R4LmluZGVudCwgY29tbWVudFN0cmluZyh2YWx1ZUNvbW1lbnQpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hvbXBLZWVwICYmIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIG9uQ2hvbXBLZWVwKCk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5cbmV4cG9ydCB7IHN0cmluZ2lmeVBhaXIgfTtcbiIsImltcG9ydCB7IGlzTm9kZSwgaXNQYWlyIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHsgbGluZUNvbW1lbnQsIGluZGVudENvbW1lbnQgfSBmcm9tICcuL3N0cmluZ2lmeUNvbW1lbnQuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlDb2xsZWN0aW9uKGNvbGxlY3Rpb24sIGN0eCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGZsb3cgPSBjdHguaW5GbG93ID8/IGNvbGxlY3Rpb24uZmxvdztcbiAgICBjb25zdCBzdHJpbmdpZnkgPSBmbG93ID8gc3RyaW5naWZ5Rmxvd0NvbGxlY3Rpb24gOiBzdHJpbmdpZnlCbG9ja0NvbGxlY3Rpb247XG4gICAgcmV0dXJuIHN0cmluZ2lmeShjb2xsZWN0aW9uLCBjdHgsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5QmxvY2tDb2xsZWN0aW9uKHsgY29tbWVudCwgaXRlbXMgfSwgY3R4LCB7IGJsb2NrSXRlbVByZWZpeCwgZmxvd0NoYXJzLCBpdGVtSW5kZW50LCBvbkNob21wS2VlcCwgb25Db21tZW50IH0pIHtcbiAgICBjb25zdCB7IGluZGVudCwgb3B0aW9uczogeyBjb21tZW50U3RyaW5nIH0gfSA9IGN0eDtcbiAgICBjb25zdCBpdGVtQ3R4ID0gT2JqZWN0LmFzc2lnbih7fSwgY3R4LCB7IGluZGVudDogaXRlbUluZGVudCwgdHlwZTogbnVsbCB9KTtcbiAgICBsZXQgY2hvbXBLZWVwID0gZmFsc2U7IC8vIGZsYWcgZm9yIHRoZSBwcmVjZWRpbmcgbm9kZSdzIHN0YXR1c1xuICAgIGNvbnN0IGxpbmVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgIGxldCBjb21tZW50ID0gbnVsbDtcbiAgICAgICAgaWYgKGlzTm9kZShpdGVtKSkge1xuICAgICAgICAgICAgaWYgKCFjaG9tcEtlZXAgJiYgaXRlbS5zcGFjZUJlZm9yZSlcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKCcnKTtcbiAgICAgICAgICAgIGFkZENvbW1lbnRCZWZvcmUoY3R4LCBsaW5lcywgaXRlbS5jb21tZW50QmVmb3JlLCBjaG9tcEtlZXApO1xuICAgICAgICAgICAgaWYgKGl0ZW0uY29tbWVudClcbiAgICAgICAgICAgICAgICBjb21tZW50ID0gaXRlbS5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGFpcihpdGVtKSkge1xuICAgICAgICAgICAgY29uc3QgaWsgPSBpc05vZGUoaXRlbS5rZXkpID8gaXRlbS5rZXkgOiBudWxsO1xuICAgICAgICAgICAgaWYgKGlrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjaG9tcEtlZXAgJiYgaWsuc3BhY2VCZWZvcmUpXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJycpO1xuICAgICAgICAgICAgICAgIGFkZENvbW1lbnRCZWZvcmUoY3R4LCBsaW5lcywgaWsuY29tbWVudEJlZm9yZSwgY2hvbXBLZWVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjaG9tcEtlZXAgPSBmYWxzZTtcbiAgICAgICAgbGV0IHN0ciA9IHN0cmluZ2lmeShpdGVtLCBpdGVtQ3R4LCAoKSA9PiAoY29tbWVudCA9IG51bGwpLCAoKSA9PiAoY2hvbXBLZWVwID0gdHJ1ZSkpO1xuICAgICAgICBpZiAoY29tbWVudClcbiAgICAgICAgICAgIHN0ciArPSBsaW5lQ29tbWVudChzdHIsIGl0ZW1JbmRlbnQsIGNvbW1lbnRTdHJpbmcoY29tbWVudCkpO1xuICAgICAgICBpZiAoY2hvbXBLZWVwICYmIGNvbW1lbnQpXG4gICAgICAgICAgICBjaG9tcEtlZXAgPSBmYWxzZTtcbiAgICAgICAgbGluZXMucHVzaChibG9ja0l0ZW1QcmVmaXggKyBzdHIpO1xuICAgIH1cbiAgICBsZXQgc3RyO1xuICAgIGlmIChsaW5lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgc3RyID0gZmxvd0NoYXJzLnN0YXJ0ICsgZmxvd0NoYXJzLmVuZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN0ciA9IGxpbmVzWzBdO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lID0gbGluZXNbaV07XG4gICAgICAgICAgICBzdHIgKz0gbGluZSA/IGBcXG4ke2luZGVudH0ke2xpbmV9YCA6ICdcXG4nO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChjb21tZW50KSB7XG4gICAgICAgIHN0ciArPSAnXFxuJyArIGluZGVudENvbW1lbnQoY29tbWVudFN0cmluZyhjb21tZW50KSwgaW5kZW50KTtcbiAgICAgICAgaWYgKG9uQ29tbWVudClcbiAgICAgICAgICAgIG9uQ29tbWVudCgpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaG9tcEtlZXAgJiYgb25DaG9tcEtlZXApXG4gICAgICAgIG9uQ2hvbXBLZWVwKCk7XG4gICAgcmV0dXJuIHN0cjtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeUZsb3dDb2xsZWN0aW9uKHsgaXRlbXMgfSwgY3R4LCB7IGZsb3dDaGFycywgaXRlbUluZGVudCB9KSB7XG4gICAgY29uc3QgeyBpbmRlbnQsIGluZGVudFN0ZXAsIGZsb3dDb2xsZWN0aW9uUGFkZGluZzogZmNQYWRkaW5nLCBvcHRpb25zOiB7IGNvbW1lbnRTdHJpbmcgfSB9ID0gY3R4O1xuICAgIGl0ZW1JbmRlbnQgKz0gaW5kZW50U3RlcDtcbiAgICBjb25zdCBpdGVtQ3R4ID0gT2JqZWN0LmFzc2lnbih7fSwgY3R4LCB7XG4gICAgICAgIGluZGVudDogaXRlbUluZGVudCxcbiAgICAgICAgaW5GbG93OiB0cnVlLFxuICAgICAgICB0eXBlOiBudWxsXG4gICAgfSk7XG4gICAgbGV0IHJlcU5ld2xpbmUgPSBmYWxzZTtcbiAgICBsZXQgbGluZXNBdFZhbHVlID0gMDtcbiAgICBjb25zdCBsaW5lcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICBsZXQgY29tbWVudCA9IG51bGw7XG4gICAgICAgIGlmIChpc05vZGUoaXRlbSkpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLnNwYWNlQmVmb3JlKVxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJycpO1xuICAgICAgICAgICAgYWRkQ29tbWVudEJlZm9yZShjdHgsIGxpbmVzLCBpdGVtLmNvbW1lbnRCZWZvcmUsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChpdGVtLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgY29tbWVudCA9IGl0ZW0uY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BhaXIoaXRlbSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGlrID0gaXNOb2RlKGl0ZW0ua2V5KSA/IGl0ZW0ua2V5IDogbnVsbDtcbiAgICAgICAgICAgIGlmIChpaykge1xuICAgICAgICAgICAgICAgIGlmIChpay5zcGFjZUJlZm9yZSlcbiAgICAgICAgICAgICAgICAgICAgbGluZXMucHVzaCgnJyk7XG4gICAgICAgICAgICAgICAgYWRkQ29tbWVudEJlZm9yZShjdHgsIGxpbmVzLCBpay5jb21tZW50QmVmb3JlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlrLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIHJlcU5ld2xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXYgPSBpc05vZGUoaXRlbS52YWx1ZSkgPyBpdGVtLnZhbHVlIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChpdikge1xuICAgICAgICAgICAgICAgIGlmIChpdi5jb21tZW50KVxuICAgICAgICAgICAgICAgICAgICBjb21tZW50ID0gaXYuY29tbWVudDtcbiAgICAgICAgICAgICAgICBpZiAoaXYuY29tbWVudEJlZm9yZSlcbiAgICAgICAgICAgICAgICAgICAgcmVxTmV3bGluZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpdGVtLnZhbHVlID09IG51bGwgJiYgaWs/LmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBjb21tZW50ID0gaWsuY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tbWVudClcbiAgICAgICAgICAgIHJlcU5ld2xpbmUgPSB0cnVlO1xuICAgICAgICBsZXQgc3RyID0gc3RyaW5naWZ5KGl0ZW0sIGl0ZW1DdHgsICgpID0+IChjb21tZW50ID0gbnVsbCkpO1xuICAgICAgICBpZiAoaSA8IGl0ZW1zLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICBzdHIgKz0gJywnO1xuICAgICAgICBpZiAoY29tbWVudClcbiAgICAgICAgICAgIHN0ciArPSBsaW5lQ29tbWVudChzdHIsIGl0ZW1JbmRlbnQsIGNvbW1lbnRTdHJpbmcoY29tbWVudCkpO1xuICAgICAgICBpZiAoIXJlcU5ld2xpbmUgJiYgKGxpbmVzLmxlbmd0aCA+IGxpbmVzQXRWYWx1ZSB8fCBzdHIuaW5jbHVkZXMoJ1xcbicpKSlcbiAgICAgICAgICAgIHJlcU5ld2xpbmUgPSB0cnVlO1xuICAgICAgICBsaW5lcy5wdXNoKHN0cik7XG4gICAgICAgIGxpbmVzQXRWYWx1ZSA9IGxpbmVzLmxlbmd0aDtcbiAgICB9XG4gICAgY29uc3QgeyBzdGFydCwgZW5kIH0gPSBmbG93Q2hhcnM7XG4gICAgaWYgKGxpbmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBlbmQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIXJlcU5ld2xpbmUpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IGxpbmVzLnJlZHVjZSgoc3VtLCBsaW5lKSA9PiBzdW0gKyBsaW5lLmxlbmd0aCArIDIsIDIpO1xuICAgICAgICAgICAgcmVxTmV3bGluZSA9IGN0eC5vcHRpb25zLmxpbmVXaWR0aCA+IDAgJiYgbGVuID4gY3R4Lm9wdGlvbnMubGluZVdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXFOZXdsaW5lKSB7XG4gICAgICAgICAgICBsZXQgc3RyID0gc3RhcnQ7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpXG4gICAgICAgICAgICAgICAgc3RyICs9IGxpbmUgPyBgXFxuJHtpbmRlbnRTdGVwfSR7aW5kZW50fSR7bGluZX1gIDogJ1xcbic7XG4gICAgICAgICAgICByZXR1cm4gYCR7c3RyfVxcbiR7aW5kZW50fSR7ZW5kfWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7c3RhcnR9JHtmY1BhZGRpbmd9JHtsaW5lcy5qb2luKCcgJyl9JHtmY1BhZGRpbmd9JHtlbmR9YDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZENvbW1lbnRCZWZvcmUoeyBpbmRlbnQsIG9wdGlvbnM6IHsgY29tbWVudFN0cmluZyB9IH0sIGxpbmVzLCBjb21tZW50LCBjaG9tcEtlZXApIHtcbiAgICBpZiAoY29tbWVudCAmJiBjaG9tcEtlZXApXG4gICAgICAgIGNvbW1lbnQgPSBjb21tZW50LnJlcGxhY2UoL15cXG4rLywgJycpO1xuICAgIGlmIChjb21tZW50KSB7XG4gICAgICAgIGNvbnN0IGljID0gaW5kZW50Q29tbWVudChjb21tZW50U3RyaW5nKGNvbW1lbnQpLCBpbmRlbnQpO1xuICAgICAgICBsaW5lcy5wdXNoKGljLnRyaW1TdGFydCgpKTsgLy8gQXZvaWQgZG91YmxlIGluZGVudCBvbiBmaXJzdCBsaW5lXG4gICAgfVxufVxuXG5leHBvcnQgeyBzdHJpbmdpZnlDb2xsZWN0aW9uIH07XG4iLCJpbXBvcnQgeyBzdHJpbmdpZnlDb2xsZWN0aW9uIH0gZnJvbSAnLi4vc3RyaW5naWZ5L3N0cmluZ2lmeUNvbGxlY3Rpb24uanMnO1xuaW1wb3J0IHsgYWRkUGFpclRvSlNNYXAgfSBmcm9tICcuL2FkZFBhaXJUb0pTTWFwLmpzJztcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tICcuL0NvbGxlY3Rpb24uanMnO1xuaW1wb3J0IHsgTUFQLCBpc1BhaXIsIGlzU2NhbGFyIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBQYWlyLCBjcmVhdGVQYWlyIH0gZnJvbSAnLi9QYWlyLmpzJztcbmltcG9ydCB7IGlzU2NhbGFyVmFsdWUgfSBmcm9tICcuL1NjYWxhci5qcyc7XG5cbmZ1bmN0aW9uIGZpbmRQYWlyKGl0ZW1zLCBrZXkpIHtcbiAgICBjb25zdCBrID0gaXNTY2FsYXIoa2V5KSA/IGtleS52YWx1ZSA6IGtleTtcbiAgICBmb3IgKGNvbnN0IGl0IG9mIGl0ZW1zKSB7XG4gICAgICAgIGlmIChpc1BhaXIoaXQpKSB7XG4gICAgICAgICAgICBpZiAoaXQua2V5ID09PSBrZXkgfHwgaXQua2V5ID09PSBrKVxuICAgICAgICAgICAgICAgIHJldHVybiBpdDtcbiAgICAgICAgICAgIGlmIChpc1NjYWxhcihpdC5rZXkpICYmIGl0LmtleS52YWx1ZSA9PT0gaylcbiAgICAgICAgICAgICAgICByZXR1cm4gaXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmNsYXNzIFlBTUxNYXAgZXh0ZW5kcyBDb2xsZWN0aW9uIHtcbiAgICBzdGF0aWMgZ2V0IHRhZ05hbWUoKSB7XG4gICAgICAgIHJldHVybiAndGFnOnlhbWwub3JnLDIwMDI6bWFwJztcbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hKSB7XG4gICAgICAgIHN1cGVyKE1BUCwgc2NoZW1hKTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIGdlbmVyaWMgY29sbGVjdGlvbiBwYXJzaW5nIG1ldGhvZCB0aGF0IGNhbiBiZSBleHRlbmRlZFxuICAgICAqIHRvIG90aGVyIG5vZGUgY2xhc3NlcyB0aGF0IGluaGVyaXQgZnJvbSBZQU1MTWFwXG4gICAgICovXG4gICAgc3RhdGljIGZyb20oc2NoZW1hLCBvYmosIGN0eCkge1xuICAgICAgICBjb25zdCB7IGtlZXBVbmRlZmluZWQsIHJlcGxhY2VyIH0gPSBjdHg7XG4gICAgICAgIGNvbnN0IG1hcCA9IG5ldyB0aGlzKHNjaGVtYSk7XG4gICAgICAgIGNvbnN0IGFkZCA9IChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVwbGFjZXIuY2FsbChvYmosIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXBsYWNlcikgJiYgIXJlcGxhY2VyLmluY2x1ZGVzKGtleSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgfHwga2VlcFVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaChjcmVhdGVQYWlyKGtleSwgdmFsdWUsIGN0eCkpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBvYmopXG4gICAgICAgICAgICAgICAgYWRkKGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMob2JqKSlcbiAgICAgICAgICAgICAgICBhZGQoa2V5LCBvYmpba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEuc29ydE1hcEVudHJpZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG1hcC5pdGVtcy5zb3J0KHNjaGVtYS5zb3J0TWFwRW50cmllcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIHZhbHVlIHRvIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIG92ZXJ3cml0ZSAtIElmIG5vdCBzZXQgYHRydWVgLCB1c2luZyBhIGtleSB0aGF0IGlzIGFscmVhZHkgaW4gdGhlXG4gICAgICogICBjb2xsZWN0aW9uIHdpbGwgdGhyb3cuIE90aGVyd2lzZSwgb3ZlcndyaXRlcyB0aGUgcHJldmlvdXMgdmFsdWUuXG4gICAgICovXG4gICAgYWRkKHBhaXIsIG92ZXJ3cml0ZSkge1xuICAgICAgICBsZXQgX3BhaXI7XG4gICAgICAgIGlmIChpc1BhaXIocGFpcikpXG4gICAgICAgICAgICBfcGFpciA9IHBhaXI7XG4gICAgICAgIGVsc2UgaWYgKCFwYWlyIHx8IHR5cGVvZiBwYWlyICE9PSAnb2JqZWN0JyB8fCAhKCdrZXknIGluIHBhaXIpKSB7XG4gICAgICAgICAgICAvLyBJbiBUeXBlU2NyaXB0LCB0aGlzIG5ldmVyIGhhcHBlbnMuXG4gICAgICAgICAgICBfcGFpciA9IG5ldyBQYWlyKHBhaXIsIHBhaXI/LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBfcGFpciA9IG5ldyBQYWlyKHBhaXIua2V5LCBwYWlyLnZhbHVlKTtcbiAgICAgICAgY29uc3QgcHJldiA9IGZpbmRQYWlyKHRoaXMuaXRlbXMsIF9wYWlyLmtleSk7XG4gICAgICAgIGNvbnN0IHNvcnRFbnRyaWVzID0gdGhpcy5zY2hlbWE/LnNvcnRNYXBFbnRyaWVzO1xuICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgaWYgKCFvdmVyd3JpdGUpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBLZXkgJHtfcGFpci5rZXl9IGFscmVhZHkgc2V0YCk7XG4gICAgICAgICAgICAvLyBGb3Igc2NhbGFycywga2VlcCB0aGUgb2xkIG5vZGUgJiBpdHMgY29tbWVudHMgYW5kIGFuY2hvcnNcbiAgICAgICAgICAgIGlmIChpc1NjYWxhcihwcmV2LnZhbHVlKSAmJiBpc1NjYWxhclZhbHVlKF9wYWlyLnZhbHVlKSlcbiAgICAgICAgICAgICAgICBwcmV2LnZhbHVlLnZhbHVlID0gX3BhaXIudmFsdWU7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcHJldi52YWx1ZSA9IF9wYWlyLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNvcnRFbnRyaWVzKSB7XG4gICAgICAgICAgICBjb25zdCBpID0gdGhpcy5pdGVtcy5maW5kSW5kZXgoaXRlbSA9PiBzb3J0RW50cmllcyhfcGFpciwgaXRlbSkgPCAwKTtcbiAgICAgICAgICAgIGlmIChpID09PSAtMSlcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2goX3BhaXIpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKGksIDAsIF9wYWlyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChfcGFpcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVsZXRlKGtleSkge1xuICAgICAgICBjb25zdCBpdCA9IGZpbmRQYWlyKHRoaXMuaXRlbXMsIGtleSk7XG4gICAgICAgIGlmICghaXQpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IGRlbCA9IHRoaXMuaXRlbXMuc3BsaWNlKHRoaXMuaXRlbXMuaW5kZXhPZihpdCksIDEpO1xuICAgICAgICByZXR1cm4gZGVsLmxlbmd0aCA+IDA7XG4gICAgfVxuICAgIGdldChrZXksIGtlZXBTY2FsYXIpIHtcbiAgICAgICAgY29uc3QgaXQgPSBmaW5kUGFpcih0aGlzLml0ZW1zLCBrZXkpO1xuICAgICAgICBjb25zdCBub2RlID0gaXQ/LnZhbHVlO1xuICAgICAgICByZXR1cm4gKCFrZWVwU2NhbGFyICYmIGlzU2NhbGFyKG5vZGUpID8gbm9kZS52YWx1ZSA6IG5vZGUpID8/IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFmaW5kUGFpcih0aGlzLml0ZW1zLCBrZXkpO1xuICAgIH1cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmFkZChuZXcgUGFpcihrZXksIHZhbHVlKSwgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBjdHggLSBDb252ZXJzaW9uIGNvbnRleHQsIG9yaWdpbmFsbHkgc2V0IGluIERvY3VtZW50I3RvSlMoKVxuICAgICAqIEBwYXJhbSB7Q2xhc3N9IFR5cGUgLSBJZiBzZXQsIGZvcmNlcyB0aGUgcmV0dXJuZWQgY29sbGVjdGlvbiB0eXBlXG4gICAgICogQHJldHVybnMgSW5zdGFuY2Ugb2YgVHlwZSwgTWFwLCBvciBPYmplY3RcbiAgICAgKi9cbiAgICB0b0pTT04oXywgY3R4LCBUeXBlKSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IFR5cGUgPyBuZXcgVHlwZSgpIDogY3R4Py5tYXBBc01hcCA/IG5ldyBNYXAoKSA6IHt9O1xuICAgICAgICBpZiAoY3R4Py5vbkNyZWF0ZSlcbiAgICAgICAgICAgIGN0eC5vbkNyZWF0ZShtYXApO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5pdGVtcylcbiAgICAgICAgICAgIGFkZFBhaXJUb0pTTWFwKGN0eCwgbWFwLCBpdGVtKTtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG4gICAgdG9TdHJpbmcoY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIGlmICghY3R4KVxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5pdGVtcykge1xuICAgICAgICAgICAgaWYgKCFpc1BhaXIoaXRlbSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNYXAgaXRlbXMgbXVzdCBhbGwgYmUgcGFpcnM7IGZvdW5kICR7SlNPTi5zdHJpbmdpZnkoaXRlbSl9IGluc3RlYWRgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWN0eC5hbGxOdWxsVmFsdWVzICYmIHRoaXMuaGFzQWxsTnVsbFZhbHVlcyhmYWxzZSkpXG4gICAgICAgICAgICBjdHggPSBPYmplY3QuYXNzaWduKHt9LCBjdHgsIHsgYWxsTnVsbFZhbHVlczogdHJ1ZSB9KTtcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeUNvbGxlY3Rpb24odGhpcywgY3R4LCB7XG4gICAgICAgICAgICBibG9ja0l0ZW1QcmVmaXg6ICcnLFxuICAgICAgICAgICAgZmxvd0NoYXJzOiB7IHN0YXJ0OiAneycsIGVuZDogJ30nIH0sXG4gICAgICAgICAgICBpdGVtSW5kZW50OiBjdHguaW5kZW50IHx8ICcnLFxuICAgICAgICAgICAgb25DaG9tcEtlZXAsXG4gICAgICAgICAgICBvbkNvbW1lbnRcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBZQU1MTWFwLCBmaW5kUGFpciB9O1xuIiwiaW1wb3J0IHsgaXNNYXAgfSBmcm9tICcuLi8uLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBZQU1MTWFwIH0gZnJvbSAnLi4vLi4vbm9kZXMvWUFNTE1hcC5qcyc7XG5cbmNvbnN0IG1hcCA9IHtcbiAgICBjb2xsZWN0aW9uOiAnbWFwJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIG5vZGVDbGFzczogWUFNTE1hcCxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjptYXAnLFxuICAgIHJlc29sdmUobWFwLCBvbkVycm9yKSB7XG4gICAgICAgIGlmICghaXNNYXAobWFwKSlcbiAgICAgICAgICAgIG9uRXJyb3IoJ0V4cGVjdGVkIGEgbWFwcGluZyBmb3IgdGhpcyB0YWcnKTtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9LFxuICAgIGNyZWF0ZU5vZGU6IChzY2hlbWEsIG9iaiwgY3R4KSA9PiBZQU1MTWFwLmZyb20oc2NoZW1hLCBvYmosIGN0eClcbn07XG5cbmV4cG9ydCB7IG1hcCB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlTm9kZSB9IGZyb20gJy4uL2RvYy9jcmVhdGVOb2RlLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeUNvbGxlY3Rpb24gfSBmcm9tICcuLi9zdHJpbmdpZnkvc3RyaW5naWZ5Q29sbGVjdGlvbi5qcyc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSAnLi9Db2xsZWN0aW9uLmpzJztcbmltcG9ydCB7IFNFUSwgaXNTY2FsYXIgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IGlzU2NhbGFyVmFsdWUgfSBmcm9tICcuL1NjYWxhci5qcyc7XG5pbXBvcnQgeyB0b0pTIH0gZnJvbSAnLi90b0pTLmpzJztcblxuY2xhc3MgWUFNTFNlcSBleHRlbmRzIENvbGxlY3Rpb24ge1xuICAgIHN0YXRpYyBnZXQgdGFnTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICd0YWc6eWFtbC5vcmcsMjAwMjpzZXEnO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzY2hlbWEpIHtcbiAgICAgICAgc3VwZXIoU0VRLCBzY2hlbWEpO1xuICAgICAgICB0aGlzLml0ZW1zID0gW107XG4gICAgfVxuICAgIGFkZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLml0ZW1zLnB1c2godmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgdmFsdWUgZnJvbSB0aGUgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIGBrZXlgIG11c3QgY29udGFpbiBhIHJlcHJlc2VudGF0aW9uIG9mIGFuIGludGVnZXIgZm9yIHRoaXMgdG8gc3VjY2VlZC5cbiAgICAgKiBJdCBtYXkgYmUgd3JhcHBlZCBpbiBhIGBTY2FsYXJgLlxuICAgICAqXG4gICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBpdGVtIHdhcyBmb3VuZCBhbmQgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBkZWxldGUoa2V5KSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IGFzSXRlbUluZGV4KGtleSk7XG4gICAgICAgIGlmICh0eXBlb2YgaWR4ICE9PSAnbnVtYmVyJylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgZGVsID0gdGhpcy5pdGVtcy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgcmV0dXJuIGRlbC5sZW5ndGggPiAwO1xuICAgIH1cbiAgICBnZXQoa2V5LCBrZWVwU2NhbGFyKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IGFzSXRlbUluZGV4KGtleSk7XG4gICAgICAgIGlmICh0eXBlb2YgaWR4ICE9PSAnbnVtYmVyJylcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGl0ID0gdGhpcy5pdGVtc1tpZHhdO1xuICAgICAgICByZXR1cm4gIWtlZXBTY2FsYXIgJiYgaXNTY2FsYXIoaXQpID8gaXQudmFsdWUgOiBpdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBjb2xsZWN0aW9uIGluY2x1ZGVzIGEgdmFsdWUgd2l0aCB0aGUga2V5IGBrZXlgLlxuICAgICAqXG4gICAgICogYGtleWAgbXVzdCBjb250YWluIGEgcmVwcmVzZW50YXRpb24gb2YgYW4gaW50ZWdlciBmb3IgdGhpcyB0byBzdWNjZWVkLlxuICAgICAqIEl0IG1heSBiZSB3cmFwcGVkIGluIGEgYFNjYWxhcmAuXG4gICAgICovXG4gICAgaGFzKGtleSkge1xuICAgICAgICBjb25zdCBpZHggPSBhc0l0ZW1JbmRleChrZXkpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIGlkeCA9PT0gJ251bWJlcicgJiYgaWR4IDwgdGhpcy5pdGVtcy5sZW5ndGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYSB2YWx1ZSBpbiB0aGlzIGNvbGxlY3Rpb24uIEZvciBgISFzZXRgLCBgdmFsdWVgIG5lZWRzIHRvIGJlIGFcbiAgICAgKiBib29sZWFuIHRvIGFkZC9yZW1vdmUgdGhlIGl0ZW0gZnJvbSB0aGUgc2V0LlxuICAgICAqXG4gICAgICogSWYgYGtleWAgZG9lcyBub3QgY29udGFpbiBhIHJlcHJlc2VudGF0aW9uIG9mIGFuIGludGVnZXIsIHRoaXMgd2lsbCB0aHJvdy5cbiAgICAgKiBJdCBtYXkgYmUgd3JhcHBlZCBpbiBhIGBTY2FsYXJgLlxuICAgICAqL1xuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IGFzSXRlbUluZGV4KGtleSk7XG4gICAgICAgIGlmICh0eXBlb2YgaWR4ICE9PSAnbnVtYmVyJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYSB2YWxpZCBpbmRleCwgbm90ICR7a2V5fS5gKTtcbiAgICAgICAgY29uc3QgcHJldiA9IHRoaXMuaXRlbXNbaWR4XTtcbiAgICAgICAgaWYgKGlzU2NhbGFyKHByZXYpICYmIGlzU2NhbGFyVmFsdWUodmFsdWUpKVxuICAgICAgICAgICAgcHJldi52YWx1ZSA9IHZhbHVlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLml0ZW1zW2lkeF0gPSB2YWx1ZTtcbiAgICB9XG4gICAgdG9KU09OKF8sIGN0eCkge1xuICAgICAgICBjb25zdCBzZXEgPSBbXTtcbiAgICAgICAgaWYgKGN0eD8ub25DcmVhdGUpXG4gICAgICAgICAgICBjdHgub25DcmVhdGUoc2VxKTtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5pdGVtcylcbiAgICAgICAgICAgIHNlcS5wdXNoKHRvSlMoaXRlbSwgU3RyaW5nKGkrKyksIGN0eCkpO1xuICAgICAgICByZXR1cm4gc2VxO1xuICAgIH1cbiAgICB0b1N0cmluZyhjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICAgICAgaWYgKCFjdHgpXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcyk7XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlDb2xsZWN0aW9uKHRoaXMsIGN0eCwge1xuICAgICAgICAgICAgYmxvY2tJdGVtUHJlZml4OiAnLSAnLFxuICAgICAgICAgICAgZmxvd0NoYXJzOiB7IHN0YXJ0OiAnWycsIGVuZDogJ10nIH0sXG4gICAgICAgICAgICBpdGVtSW5kZW50OiAoY3R4LmluZGVudCB8fCAnJykgKyAnICAnLFxuICAgICAgICAgICAgb25DaG9tcEtlZXAsXG4gICAgICAgICAgICBvbkNvbW1lbnRcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tKHNjaGVtYSwgb2JqLCBjdHgpIHtcbiAgICAgICAgY29uc3QgeyByZXBsYWNlciB9ID0gY3R4O1xuICAgICAgICBjb25zdCBzZXEgPSBuZXcgdGhpcyhzY2hlbWEpO1xuICAgICAgICBpZiAob2JqICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3Qob2JqKSkge1xuICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgaXQgb2Ygb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBvYmogaW5zdGFuY2VvZiBTZXQgPyBpdCA6IFN0cmluZyhpKyspO1xuICAgICAgICAgICAgICAgICAgICBpdCA9IHJlcGxhY2VyLmNhbGwob2JqLCBrZXksIGl0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VxLml0ZW1zLnB1c2goY3JlYXRlTm9kZShpdCwgdW5kZWZpbmVkLCBjdHgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VxO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzSXRlbUluZGV4KGtleSkge1xuICAgIGxldCBpZHggPSBpc1NjYWxhcihrZXkpID8ga2V5LnZhbHVlIDoga2V5O1xuICAgIGlmIChpZHggJiYgdHlwZW9mIGlkeCA9PT0gJ3N0cmluZycpXG4gICAgICAgIGlkeCA9IE51bWJlcihpZHgpO1xuICAgIHJldHVybiB0eXBlb2YgaWR4ID09PSAnbnVtYmVyJyAmJiBOdW1iZXIuaXNJbnRlZ2VyKGlkeCkgJiYgaWR4ID49IDBcbiAgICAgICAgPyBpZHhcbiAgICAgICAgOiBudWxsO1xufVxuXG5leHBvcnQgeyBZQU1MU2VxIH07XG4iLCJpbXBvcnQgeyBpc1NlcSB9IGZyb20gJy4uLy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFlBTUxTZXEgfSBmcm9tICcuLi8uLi9ub2Rlcy9ZQU1MU2VxLmpzJztcblxuY29uc3Qgc2VxID0ge1xuICAgIGNvbGxlY3Rpb246ICdzZXEnLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgbm9kZUNsYXNzOiBZQU1MU2VxLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOnNlcScsXG4gICAgcmVzb2x2ZShzZXEsIG9uRXJyb3IpIHtcbiAgICAgICAgaWYgKCFpc1NlcShzZXEpKVxuICAgICAgICAgICAgb25FcnJvcignRXhwZWN0ZWQgYSBzZXF1ZW5jZSBmb3IgdGhpcyB0YWcnKTtcbiAgICAgICAgcmV0dXJuIHNlcTtcbiAgICB9LFxuICAgIGNyZWF0ZU5vZGU6IChzY2hlbWEsIG9iaiwgY3R4KSA9PiBZQU1MU2VxLmZyb20oc2NoZW1hLCBvYmosIGN0eClcbn07XG5cbmV4cG9ydCB7IHNlcSB9O1xuIiwiaW1wb3J0IHsgc3RyaW5naWZ5U3RyaW5nIH0gZnJvbSAnLi4vLi4vc3RyaW5naWZ5L3N0cmluZ2lmeVN0cmluZy5qcyc7XG5cbmNvbnN0IHN0cmluZyA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOnN0cicsXG4gICAgcmVzb2x2ZTogc3RyID0+IHN0cixcbiAgICBzdHJpbmdpZnkoaXRlbSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIGN0eCA9IE9iamVjdC5hc3NpZ24oeyBhY3R1YWxTdHJpbmc6IHRydWUgfSwgY3R4KTtcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeVN0cmluZyhpdGVtLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IHN0cmluZyB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcblxuY29uc3QgbnVsbFRhZyA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgPT0gbnVsbCxcbiAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgU2NhbGFyKG51bGwpLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6bnVsbCcsXG4gICAgdGVzdDogL14oPzp+fFtObl11bGx8TlVMTCk/JC8sXG4gICAgcmVzb2x2ZTogKCkgPT4gbmV3IFNjYWxhcihudWxsKSxcbiAgICBzdHJpbmdpZnk6ICh7IHNvdXJjZSB9LCBjdHgpID0+IHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnICYmIG51bGxUYWcudGVzdC50ZXN0KHNvdXJjZSlcbiAgICAgICAgPyBzb3VyY2VcbiAgICAgICAgOiBjdHgub3B0aW9ucy5udWxsU3RyXG59O1xuXG5leHBvcnQgeyBudWxsVGFnIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9TY2FsYXIuanMnO1xuXG5jb25zdCBib29sVGFnID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmJvb2wnLFxuICAgIHRlc3Q6IC9eKD86W1R0XXJ1ZXxUUlVFfFtGZl1hbHNlfEZBTFNFKSQvLFxuICAgIHJlc29sdmU6IHN0ciA9PiBuZXcgU2NhbGFyKHN0clswXSA9PT0gJ3QnIHx8IHN0clswXSA9PT0gJ1QnKSxcbiAgICBzdHJpbmdpZnkoeyBzb3VyY2UsIHZhbHVlIH0sIGN0eCkge1xuICAgICAgICBpZiAoc291cmNlICYmIGJvb2xUYWcudGVzdC50ZXN0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHN2ID0gc291cmNlWzBdID09PSAndCcgfHwgc291cmNlWzBdID09PSAnVCc7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHN2KVxuICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlID8gY3R4Lm9wdGlvbnMudHJ1ZVN0ciA6IGN0eC5vcHRpb25zLmZhbHNlU3RyO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IGJvb2xUYWcgfTtcbiIsImZ1bmN0aW9uIHN0cmluZ2lmeU51bWJlcih7IGZvcm1hdCwgbWluRnJhY3Rpb25EaWdpdHMsIHRhZywgdmFsdWUgfSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnKVxuICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICBjb25zdCBudW0gPSB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInID8gdmFsdWUgOiBOdW1iZXIodmFsdWUpO1xuICAgIGlmICghaXNGaW5pdGUobnVtKSlcbiAgICAgICAgcmV0dXJuIGlzTmFOKG51bSkgPyAnLm5hbicgOiBudW0gPCAwID8gJy0uaW5mJyA6ICcuaW5mJztcbiAgICBsZXQgbiA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICBpZiAoIWZvcm1hdCAmJlxuICAgICAgICBtaW5GcmFjdGlvbkRpZ2l0cyAmJlxuICAgICAgICAoIXRhZyB8fCB0YWcgPT09ICd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcpICYmXG4gICAgICAgIC9eXFxkLy50ZXN0KG4pKSB7XG4gICAgICAgIGxldCBpID0gbi5pbmRleE9mKCcuJyk7XG4gICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgaSA9IG4ubGVuZ3RoO1xuICAgICAgICAgICAgbiArPSAnLic7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGQgPSBtaW5GcmFjdGlvbkRpZ2l0cyAtIChuLmxlbmd0aCAtIGkgLSAxKTtcbiAgICAgICAgd2hpbGUgKGQtLSA+IDApXG4gICAgICAgICAgICBuICs9ICcwJztcbiAgICB9XG4gICAgcmV0dXJuIG47XG59XG5cbmV4cG9ydCB7IHN0cmluZ2lmeU51bWJlciB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeU51bWJlciB9IGZyb20gJy4uLy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlOdW1iZXIuanMnO1xuXG5jb25zdCBmbG9hdE5hTiA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICB0ZXN0OiAvXig/OlstK10/XFwuKD86aW5mfEluZnxJTkYpfFxcLm5hbnxcXC5OYU58XFwuTkFOKSQvLFxuICAgIHJlc29sdmU6IHN0ciA9PiBzdHIuc2xpY2UoLTMpLnRvTG93ZXJDYXNlKCkgPT09ICduYW4nXG4gICAgICAgID8gTmFOXG4gICAgICAgIDogc3RyWzBdID09PSAnLSdcbiAgICAgICAgICAgID8gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXG4gICAgICAgICAgICA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeU51bWJlclxufTtcbmNvbnN0IGZsb2F0RXhwID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuICAgIGZvcm1hdDogJ0VYUCcsXG4gICAgdGVzdDogL15bLStdPyg/OlxcLlswLTldK3xbMC05XSsoPzpcXC5bMC05XSopPylbZUVdWy0rXT9bMC05XSskLyxcbiAgICByZXNvbHZlOiBzdHIgPT4gcGFyc2VGbG9hdChzdHIpLFxuICAgIHN0cmluZ2lmeShub2RlKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IE51bWJlcihub2RlLnZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGlzRmluaXRlKG51bSkgPyBudW0udG9FeHBvbmVudGlhbCgpIDogc3RyaW5naWZ5TnVtYmVyKG5vZGUpO1xuICAgIH1cbn07XG5jb25zdCBmbG9hdCA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICB0ZXN0OiAvXlstK10/KD86XFwuWzAtOV0rfFswLTldK1xcLlswLTldKikkLyxcbiAgICByZXNvbHZlKHN0cikge1xuICAgICAgICBjb25zdCBub2RlID0gbmV3IFNjYWxhcihwYXJzZUZsb2F0KHN0cikpO1xuICAgICAgICBjb25zdCBkb3QgPSBzdHIuaW5kZXhPZignLicpO1xuICAgICAgICBpZiAoZG90ICE9PSAtMSAmJiBzdHJbc3RyLmxlbmd0aCAtIDFdID09PSAnMCcpXG4gICAgICAgICAgICBub2RlLm1pbkZyYWN0aW9uRGlnaXRzID0gc3RyLmxlbmd0aCAtIGRvdCAtIDE7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH0sXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlOdW1iZXJcbn07XG5cbmV4cG9ydCB7IGZsb2F0LCBmbG9hdEV4cCwgZmxvYXROYU4gfTtcbiIsImltcG9ydCB7IHN0cmluZ2lmeU51bWJlciB9IGZyb20gJy4uLy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlOdW1iZXIuanMnO1xuXG5jb25zdCBpbnRJZGVudGlmeSA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSAnYmlnaW50JyB8fCBOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKTtcbmNvbnN0IGludFJlc29sdmUgPSAoc3RyLCBvZmZzZXQsIHJhZGl4LCB7IGludEFzQmlnSW50IH0pID0+IChpbnRBc0JpZ0ludCA/IEJpZ0ludChzdHIpIDogcGFyc2VJbnQoc3RyLnN1YnN0cmluZyhvZmZzZXQpLCByYWRpeCkpO1xuZnVuY3Rpb24gaW50U3RyaW5naWZ5KG5vZGUsIHJhZGl4LCBwcmVmaXgpIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSBub2RlO1xuICAgIGlmIChpbnRJZGVudGlmeSh2YWx1ZSkgJiYgdmFsdWUgPj0gMClcbiAgICAgICAgcmV0dXJuIHByZWZpeCArIHZhbHVlLnRvU3RyaW5nKHJhZGl4KTtcbiAgICByZXR1cm4gc3RyaW5naWZ5TnVtYmVyKG5vZGUpO1xufVxuY29uc3QgaW50T2N0ID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiBpbnRJZGVudGlmeSh2YWx1ZSkgJiYgdmFsdWUgPj0gMCxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgZm9ybWF0OiAnT0NUJyxcbiAgICB0ZXN0OiAvXjBvWzAtN10rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDIsIDgsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBub2RlID0+IGludFN0cmluZ2lmeShub2RlLCA4LCAnMG8nKVxufTtcbmNvbnN0IGludCA9IHtcbiAgICBpZGVudGlmeTogaW50SWRlbnRpZnksXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgIHRlc3Q6IC9eWy0rXT9bMC05XSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgb3B0KSA9PiBpbnRSZXNvbHZlKHN0ciwgMCwgMTAsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlOdW1iZXJcbn07XG5jb25zdCBpbnRIZXggPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IGludElkZW50aWZ5KHZhbHVlKSAmJiB2YWx1ZSA+PSAwLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICBmb3JtYXQ6ICdIRVgnLFxuICAgIHRlc3Q6IC9eMHhbMC05YS1mQS1GXSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgb3B0KSA9PiBpbnRSZXNvbHZlKHN0ciwgMiwgMTYsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBub2RlID0+IGludFN0cmluZ2lmeShub2RlLCAxNiwgJzB4Jylcbn07XG5cbmV4cG9ydCB7IGludCwgaW50SGV4LCBpbnRPY3QgfTtcbiIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4uL2NvbW1vbi9tYXAuanMnO1xuaW1wb3J0IHsgbnVsbFRhZyB9IGZyb20gJy4uL2NvbW1vbi9udWxsLmpzJztcbmltcG9ydCB7IHNlcSB9IGZyb20gJy4uL2NvbW1vbi9zZXEuanMnO1xuaW1wb3J0IHsgc3RyaW5nIH0gZnJvbSAnLi4vY29tbW9uL3N0cmluZy5qcyc7XG5pbXBvcnQgeyBib29sVGFnIH0gZnJvbSAnLi9ib29sLmpzJztcbmltcG9ydCB7IGZsb2F0TmFOLCBmbG9hdEV4cCwgZmxvYXQgfSBmcm9tICcuL2Zsb2F0LmpzJztcbmltcG9ydCB7IGludE9jdCwgaW50LCBpbnRIZXggfSBmcm9tICcuL2ludC5qcyc7XG5cbmNvbnN0IHNjaGVtYSA9IFtcbiAgICBtYXAsXG4gICAgc2VxLFxuICAgIHN0cmluZyxcbiAgICBudWxsVGFnLFxuICAgIGJvb2xUYWcsXG4gICAgaW50T2N0LFxuICAgIGludCxcbiAgICBpbnRIZXgsXG4gICAgZmxvYXROYU4sXG4gICAgZmxvYXRFeHAsXG4gICAgZmxvYXRcbl07XG5cbmV4cG9ydCB7IHNjaGVtYSB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4uL2NvbW1vbi9tYXAuanMnO1xuaW1wb3J0IHsgc2VxIH0gZnJvbSAnLi4vY29tbW9uL3NlcS5qcyc7XG5cbmZ1bmN0aW9uIGludElkZW50aWZ5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcgfHwgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSk7XG59XG5jb25zdCBzdHJpbmdpZnlKU09OID0gKHsgdmFsdWUgfSkgPT4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuY29uc3QganNvblNjYWxhcnMgPSBbXG4gICAge1xuICAgICAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6c3RyJyxcbiAgICAgICAgcmVzb2x2ZTogc3RyID0+IHN0cixcbiAgICAgICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlKU09OXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSA9PSBudWxsLFxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgU2NhbGFyKG51bGwpLFxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpudWxsJyxcbiAgICAgICAgdGVzdDogL15udWxsJC8sXG4gICAgICAgIHJlc29sdmU6ICgpID0+IG51bGwsXG4gICAgICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5SlNPTlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicsXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmJvb2wnLFxuICAgICAgICB0ZXN0OiAvXnRydWUkfF5mYWxzZSQvLFxuICAgICAgICByZXNvbHZlOiBzdHIgPT4gc3RyID09PSAndHJ1ZScsXG4gICAgICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5SlNPTlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZGVudGlmeTogaW50SWRlbnRpZnksXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgICAgIHRlc3Q6IC9eLT8oPzowfFsxLTldWzAtOV0qKSQvLFxuICAgICAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgeyBpbnRBc0JpZ0ludCB9KSA9PiBpbnRBc0JpZ0ludCA/IEJpZ0ludChzdHIpIDogcGFyc2VJbnQoc3RyLCAxMCksXG4gICAgICAgIHN0cmluZ2lmeTogKHsgdmFsdWUgfSkgPT4gaW50SWRlbnRpZnkodmFsdWUpID8gdmFsdWUudG9TdHJpbmcoKSA6IEpTT04uc3RyaW5naWZ5KHZhbHVlKVxuICAgIH0sXG4gICAge1xuICAgICAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuICAgICAgICB0ZXN0OiAvXi0/KD86MHxbMS05XVswLTldKikoPzpcXC5bMC05XSopPyg/OltlRV1bLStdP1swLTldKyk/JC8sXG4gICAgICAgIHJlc29sdmU6IHN0ciA9PiBwYXJzZUZsb2F0KHN0ciksXG4gICAgICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5SlNPTlxuICAgIH1cbl07XG5jb25zdCBqc29uRXJyb3IgPSB7XG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICcnLFxuICAgIHRlc3Q6IC9eLyxcbiAgICByZXNvbHZlKHN0ciwgb25FcnJvcikge1xuICAgICAgICBvbkVycm9yKGBVbnJlc29sdmVkIHBsYWluIHNjYWxhciAke0pTT04uc3RyaW5naWZ5KHN0cil9YCk7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxufTtcbmNvbnN0IHNjaGVtYSA9IFttYXAsIHNlcV0uY29uY2F0KGpzb25TY2FsYXJzLCBqc29uRXJyb3IpO1xuXG5leHBvcnQgeyBzY2hlbWEgfTtcbiIsImltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlTdHJpbmcgfSBmcm9tICcuLi8uLi9zdHJpbmdpZnkvc3RyaW5naWZ5U3RyaW5nLmpzJztcblxuY29uc3QgYmluYXJ5ID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXksIC8vIEJ1ZmZlciBpbmhlcml0cyBmcm9tIFVpbnQ4QXJyYXlcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpiaW5hcnknLFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBCdWZmZXIgaW4gbm9kZSBhbmQgYW4gVWludDhBcnJheSBpbiBicm93c2Vyc1xuICAgICAqXG4gICAgICogVG8gdXNlIHRoZSByZXN1bHRpbmcgYnVmZmVyIGFzIGFuIGltYWdlLCB5b3UnbGwgd2FudCB0byBkbyBzb21ldGhpbmcgbGlrZTpcbiAgICAgKlxuICAgICAqICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtidWZmZXJdLCB7IHR5cGU6ICdpbWFnZS9qcGVnJyB9KVxuICAgICAqICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Bob3RvJykuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKVxuICAgICAqL1xuICAgIHJlc29sdmUoc3JjLCBvbkVycm9yKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXRvYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gT24gSUUgMTEsIGF0b2IoKSBjYW4ndCBoYW5kbGUgbmV3bGluZXNcbiAgICAgICAgICAgIGNvbnN0IHN0ciA9IGF0b2Ioc3JjLnJlcGxhY2UoL1tcXG5cXHJdL2csICcnKSk7XG4gICAgICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShzdHIubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGJ1ZmZlcltpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9uRXJyb3IoJ1RoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCByZWFkaW5nIGJpbmFyeSB0YWdzOyBlaXRoZXIgQnVmZmVyIG9yIGF0b2IgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgICAgIHJldHVybiBzcmM7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHN0cmluZ2lmeSh7IGNvbW1lbnQsIHR5cGUsIHZhbHVlIH0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgICAgICBpZiAoIXZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICBjb25zdCBidWYgPSB2YWx1ZTsgLy8gY2hlY2tlZCBlYXJsaWVyIGJ5IGJpbmFyeS5pZGVudGlmeSgpXG4gICAgICAgIGxldCBzdHI7XG4gICAgICAgIGlmICh0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbGV0IHMgPSAnJztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pO1xuICAgICAgICAgICAgc3RyID0gYnRvYShzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IHdyaXRpbmcgYmluYXJ5IHRhZ3M7IGVpdGhlciBCdWZmZXIgb3IgYnRvYSBpcyByZXF1aXJlZCcpO1xuICAgICAgICB9XG4gICAgICAgIHR5cGUgPz8gKHR5cGUgPSBTY2FsYXIuQkxPQ0tfTElURVJBTCk7XG4gICAgICAgIGlmICh0eXBlICE9PSBTY2FsYXIuUVVPVEVfRE9VQkxFKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lV2lkdGggPSBNYXRoLm1heChjdHgub3B0aW9ucy5saW5lV2lkdGggLSBjdHguaW5kZW50Lmxlbmd0aCwgY3R4Lm9wdGlvbnMubWluQ29udGVudFdpZHRoKTtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBNYXRoLmNlaWwoc3RyLmxlbmd0aCAvIGxpbmVXaWR0aCk7XG4gICAgICAgICAgICBjb25zdCBsaW5lcyA9IG5ldyBBcnJheShuKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBvID0gMDsgaSA8IG47ICsraSwgbyArPSBsaW5lV2lkdGgpIHtcbiAgICAgICAgICAgICAgICBsaW5lc1tpXSA9IHN0ci5zdWJzdHIobywgbGluZVdpZHRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0ciA9IGxpbmVzLmpvaW4odHlwZSA9PT0gU2NhbGFyLkJMT0NLX0xJVEVSQUwgPyAnXFxuJyA6ICcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeVN0cmluZyh7IGNvbW1lbnQsIHR5cGUsIHZhbHVlOiBzdHIgfSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKTtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBiaW5hcnkgfTtcbiIsImltcG9ydCB7IGlzU2VxLCBpc1BhaXIsIGlzTWFwIH0gZnJvbSAnLi4vLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgY3JlYXRlUGFpciwgUGFpciB9IGZyb20gJy4uLy4uL25vZGVzL1BhaXIuanMnO1xuaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IFlBTUxTZXEgfSBmcm9tICcuLi8uLi9ub2Rlcy9ZQU1MU2VxLmpzJztcblxuZnVuY3Rpb24gcmVzb2x2ZVBhaXJzKHNlcSwgb25FcnJvcikge1xuICAgIGlmIChpc1NlcShzZXEpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VxLml0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBsZXQgaXRlbSA9IHNlcS5pdGVtc1tpXTtcbiAgICAgICAgICAgIGlmIChpc1BhaXIoaXRlbSkpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBlbHNlIGlmIChpc01hcChpdGVtKSkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLml0ZW1zLmxlbmd0aCA+IDEpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoJ0VhY2ggcGFpciBtdXN0IGhhdmUgaXRzIG93biBzZXF1ZW5jZSBpbmRpY2F0b3InKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYWlyID0gaXRlbS5pdGVtc1swXSB8fCBuZXcgUGFpcihuZXcgU2NhbGFyKG51bGwpKTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5jb21tZW50QmVmb3JlKVxuICAgICAgICAgICAgICAgICAgICBwYWlyLmtleS5jb21tZW50QmVmb3JlID0gcGFpci5rZXkuY29tbWVudEJlZm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBgJHtpdGVtLmNvbW1lbnRCZWZvcmV9XFxuJHtwYWlyLmtleS5jb21tZW50QmVmb3JlfWBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaXRlbS5jb21tZW50QmVmb3JlO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY24gPSBwYWlyLnZhbHVlID8/IHBhaXIua2V5O1xuICAgICAgICAgICAgICAgICAgICBjbi5jb21tZW50ID0gY24uY29tbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBgJHtpdGVtLmNvbW1lbnR9XFxuJHtjbi5jb21tZW50fWBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaXRlbS5jb21tZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpdGVtID0gcGFpcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlcS5pdGVtc1tpXSA9IGlzUGFpcihpdGVtKSA/IGl0ZW0gOiBuZXcgUGFpcihpdGVtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIG9uRXJyb3IoJ0V4cGVjdGVkIGEgc2VxdWVuY2UgZm9yIHRoaXMgdGFnJyk7XG4gICAgcmV0dXJuIHNlcTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhaXJzKHNjaGVtYSwgaXRlcmFibGUsIGN0eCkge1xuICAgIGNvbnN0IHsgcmVwbGFjZXIgfSA9IGN0eDtcbiAgICBjb25zdCBwYWlycyA9IG5ldyBZQU1MU2VxKHNjaGVtYSk7XG4gICAgcGFpcnMudGFnID0gJ3RhZzp5YW1sLm9yZywyMDAyOnBhaXJzJztcbiAgICBsZXQgaSA9IDA7XG4gICAgaWYgKGl0ZXJhYmxlICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcmFibGUpKVxuICAgICAgICBmb3IgKGxldCBpdCBvZiBpdGVyYWJsZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICBpdCA9IHJlcGxhY2VyLmNhbGwoaXRlcmFibGUsIFN0cmluZyhpKyspLCBpdCk7XG4gICAgICAgICAgICBsZXQga2V5LCB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0KSkge1xuICAgICAgICAgICAgICAgIGlmIChpdC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gaXRbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gaXRbMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgW2tleSwgdmFsdWVdIHR1cGxlOiAke2l0fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXQgJiYgaXQgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoaXQpO1xuICAgICAgICAgICAgICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBrZXkgPSBrZXlzWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGl0W2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCB0dXBsZSB3aXRoIG9uZSBrZXksIG5vdCAke2tleXMubGVuZ3RofSBrZXlzYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAga2V5ID0gaXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYWlycy5pdGVtcy5wdXNoKGNyZWF0ZVBhaXIoa2V5LCB2YWx1ZSwgY3R4KSk7XG4gICAgICAgIH1cbiAgICByZXR1cm4gcGFpcnM7XG59XG5jb25zdCBwYWlycyA9IHtcbiAgICBjb2xsZWN0aW9uOiAnc2VxJyxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpwYWlycycsXG4gICAgcmVzb2x2ZTogcmVzb2x2ZVBhaXJzLFxuICAgIGNyZWF0ZU5vZGU6IGNyZWF0ZVBhaXJzXG59O1xuXG5leHBvcnQgeyBjcmVhdGVQYWlycywgcGFpcnMsIHJlc29sdmVQYWlycyB9O1xuIiwiaW1wb3J0IHsgaXNTY2FsYXIsIGlzUGFpciB9IGZyb20gJy4uLy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IHRvSlMgfSBmcm9tICcuLi8uLi9ub2Rlcy90b0pTLmpzJztcbmltcG9ydCB7IFlBTUxNYXAgfSBmcm9tICcuLi8uLi9ub2Rlcy9ZQU1MTWFwLmpzJztcbmltcG9ydCB7IFlBTUxTZXEgfSBmcm9tICcuLi8uLi9ub2Rlcy9ZQU1MU2VxLmpzJztcbmltcG9ydCB7IHJlc29sdmVQYWlycywgY3JlYXRlUGFpcnMgfSBmcm9tICcuL3BhaXJzLmpzJztcblxuY2xhc3MgWUFNTE9NYXAgZXh0ZW5kcyBZQU1MU2VxIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5hZGQgPSBZQU1MTWFwLnByb3RvdHlwZS5hZGQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5kZWxldGUgPSBZQU1MTWFwLnByb3RvdHlwZS5kZWxldGUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5nZXQgPSBZQU1MTWFwLnByb3RvdHlwZS5nZXQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYXMgPSBZQU1MTWFwLnByb3RvdHlwZS5oYXMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zZXQgPSBZQU1MTWFwLnByb3RvdHlwZS5zZXQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy50YWcgPSBZQU1MT01hcC50YWc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIGBjdHhgIGlzIGdpdmVuLCB0aGUgcmV0dXJuIHR5cGUgaXMgYWN0dWFsbHkgYE1hcDx1bmtub3duLCB1bmtub3duPmAsXG4gICAgICogYnV0IFR5cGVTY3JpcHQgd29uJ3QgYWxsb3cgd2lkZW5pbmcgdGhlIHNpZ25hdHVyZSBvZiBhIGNoaWxkIG1ldGhvZC5cbiAgICAgKi9cbiAgICB0b0pTT04oXywgY3R4KSB7XG4gICAgICAgIGlmICghY3R4KVxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLnRvSlNPTihfKTtcbiAgICAgICAgY29uc3QgbWFwID0gbmV3IE1hcCgpO1xuICAgICAgICBpZiAoY3R4Py5vbkNyZWF0ZSlcbiAgICAgICAgICAgIGN0eC5vbkNyZWF0ZShtYXApO1xuICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgdGhpcy5pdGVtcykge1xuICAgICAgICAgICAgbGV0IGtleSwgdmFsdWU7XG4gICAgICAgICAgICBpZiAoaXNQYWlyKHBhaXIpKSB7XG4gICAgICAgICAgICAgICAga2V5ID0gdG9KUyhwYWlyLmtleSwgJycsIGN0eCk7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0b0pTKHBhaXIudmFsdWUsIGtleSwgY3R4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGtleSA9IHRvSlMocGFpciwgJycsIGN0eCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWFwLmhhcyhrZXkpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT3JkZXJlZCBtYXBzIG11c3Qgbm90IGluY2x1ZGUgZHVwbGljYXRlIGtleXMnKTtcbiAgICAgICAgICAgIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG4gICAgc3RhdGljIGZyb20oc2NoZW1hLCBpdGVyYWJsZSwgY3R4KSB7XG4gICAgICAgIGNvbnN0IHBhaXJzID0gY3JlYXRlUGFpcnMoc2NoZW1hLCBpdGVyYWJsZSwgY3R4KTtcbiAgICAgICAgY29uc3Qgb21hcCA9IG5ldyB0aGlzKCk7XG4gICAgICAgIG9tYXAuaXRlbXMgPSBwYWlycy5pdGVtcztcbiAgICAgICAgcmV0dXJuIG9tYXA7XG4gICAgfVxufVxuWUFNTE9NYXAudGFnID0gJ3RhZzp5YW1sLm9yZywyMDAyOm9tYXAnO1xuY29uc3Qgb21hcCA9IHtcbiAgICBjb2xsZWN0aW9uOiAnc2VxJyxcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgaW5zdGFuY2VvZiBNYXAsXG4gICAgbm9kZUNsYXNzOiBZQU1MT01hcCxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpvbWFwJyxcbiAgICByZXNvbHZlKHNlcSwgb25FcnJvcikge1xuICAgICAgICBjb25zdCBwYWlycyA9IHJlc29sdmVQYWlycyhzZXEsIG9uRXJyb3IpO1xuICAgICAgICBjb25zdCBzZWVuS2V5cyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHsga2V5IH0gb2YgcGFpcnMuaXRlbXMpIHtcbiAgICAgICAgICAgIGlmIChpc1NjYWxhcihrZXkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlZW5LZXlzLmluY2x1ZGVzKGtleS52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihgT3JkZXJlZCBtYXBzIG11c3Qgbm90IGluY2x1ZGUgZHVwbGljYXRlIGtleXM6ICR7a2V5LnZhbHVlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VlbktleXMucHVzaChrZXkudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgWUFNTE9NYXAoKSwgcGFpcnMpO1xuICAgIH0sXG4gICAgY3JlYXRlTm9kZTogKHNjaGVtYSwgaXRlcmFibGUsIGN0eCkgPT4gWUFNTE9NYXAuZnJvbShzY2hlbWEsIGl0ZXJhYmxlLCBjdHgpXG59O1xuXG5leHBvcnQgeyBZQU1MT01hcCwgb21hcCB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcblxuZnVuY3Rpb24gYm9vbFN0cmluZ2lmeSh7IHZhbHVlLCBzb3VyY2UgfSwgY3R4KSB7XG4gICAgY29uc3QgYm9vbE9iaiA9IHZhbHVlID8gdHJ1ZVRhZyA6IGZhbHNlVGFnO1xuICAgIGlmIChzb3VyY2UgJiYgYm9vbE9iai50ZXN0LnRlc3Qoc291cmNlKSlcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICByZXR1cm4gdmFsdWUgPyBjdHgub3B0aW9ucy50cnVlU3RyIDogY3R4Lm9wdGlvbnMuZmFsc2VTdHI7XG59XG5jb25zdCB0cnVlVGFnID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSA9PT0gdHJ1ZSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmJvb2wnLFxuICAgIHRlc3Q6IC9eKD86WXx5fFtZeV1lc3xZRVN8W1R0XXJ1ZXxUUlVFfFtPb11ufE9OKSQvLFxuICAgIHJlc29sdmU6ICgpID0+IG5ldyBTY2FsYXIodHJ1ZSksXG4gICAgc3RyaW5naWZ5OiBib29sU3RyaW5naWZ5XG59O1xuY29uc3QgZmFsc2VUYWcgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlID09PSBmYWxzZSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmJvb2wnLFxuICAgIHRlc3Q6IC9eKD86TnxufFtObl1vfE5PfFtGZl1hbHNlfEZBTFNFfFtPb11mZnxPRkYpJC8sXG4gICAgcmVzb2x2ZTogKCkgPT4gbmV3IFNjYWxhcihmYWxzZSksXG4gICAgc3RyaW5naWZ5OiBib29sU3RyaW5naWZ5XG59O1xuXG5leHBvcnQgeyBmYWxzZVRhZywgdHJ1ZVRhZyB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeU51bWJlciB9IGZyb20gJy4uLy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlOdW1iZXIuanMnO1xuXG5jb25zdCBmbG9hdE5hTiA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICB0ZXN0OiAvXig/OlstK10/XFwuKD86aW5mfEluZnxJTkYpfFxcLm5hbnxcXC5OYU58XFwuTkFOKSQvLFxuICAgIHJlc29sdmU6IChzdHIpID0+IHN0ci5zbGljZSgtMykudG9Mb3dlckNhc2UoKSA9PT0gJ25hbidcbiAgICAgICAgPyBOYU5cbiAgICAgICAgOiBzdHJbMF0gPT09ICctJ1xuICAgICAgICAgICAgPyBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbiAgICAgICAgICAgIDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5TnVtYmVyXG59O1xuY29uc3QgZmxvYXRFeHAgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsXG4gICAgZm9ybWF0OiAnRVhQJyxcbiAgICB0ZXN0OiAvXlstK10/KD86WzAtOV1bMC05X10qKT8oPzpcXC5bMC05X10qKT9bZUVdWy0rXT9bMC05XSskLyxcbiAgICByZXNvbHZlOiAoc3RyKSA9PiBwYXJzZUZsb2F0KHN0ci5yZXBsYWNlKC9fL2csICcnKSksXG4gICAgc3RyaW5naWZ5KG5vZGUpIHtcbiAgICAgICAgY29uc3QgbnVtID0gTnVtYmVyKG5vZGUudmFsdWUpO1xuICAgICAgICByZXR1cm4gaXNGaW5pdGUobnVtKSA/IG51bS50b0V4cG9uZW50aWFsKCkgOiBzdHJpbmdpZnlOdW1iZXIobm9kZSk7XG4gICAgfVxufTtcbmNvbnN0IGZsb2F0ID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuICAgIHRlc3Q6IC9eWy0rXT8oPzpbMC05XVswLTlfXSopP1xcLlswLTlfXSokLyxcbiAgICByZXNvbHZlKHN0cikge1xuICAgICAgICBjb25zdCBub2RlID0gbmV3IFNjYWxhcihwYXJzZUZsb2F0KHN0ci5yZXBsYWNlKC9fL2csICcnKSkpO1xuICAgICAgICBjb25zdCBkb3QgPSBzdHIuaW5kZXhPZignLicpO1xuICAgICAgICBpZiAoZG90ICE9PSAtMSkge1xuICAgICAgICAgICAgY29uc3QgZiA9IHN0ci5zdWJzdHJpbmcoZG90ICsgMSkucmVwbGFjZSgvXy9nLCAnJyk7XG4gICAgICAgICAgICBpZiAoZltmLmxlbmd0aCAtIDFdID09PSAnMCcpXG4gICAgICAgICAgICAgICAgbm9kZS5taW5GcmFjdGlvbkRpZ2l0cyA9IGYubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH0sXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlOdW1iZXJcbn07XG5cbmV4cG9ydCB7IGZsb2F0LCBmbG9hdEV4cCwgZmxvYXROYU4gfTtcbiIsImltcG9ydCB7IHN0cmluZ2lmeU51bWJlciB9IGZyb20gJy4uLy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlOdW1iZXIuanMnO1xuXG5jb25zdCBpbnRJZGVudGlmeSA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSAnYmlnaW50JyB8fCBOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKTtcbmZ1bmN0aW9uIGludFJlc29sdmUoc3RyLCBvZmZzZXQsIHJhZGl4LCB7IGludEFzQmlnSW50IH0pIHtcbiAgICBjb25zdCBzaWduID0gc3RyWzBdO1xuICAgIGlmIChzaWduID09PSAnLScgfHwgc2lnbiA9PT0gJysnKVxuICAgICAgICBvZmZzZXQgKz0gMTtcbiAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKG9mZnNldCkucmVwbGFjZSgvXy9nLCAnJyk7XG4gICAgaWYgKGludEFzQmlnSW50KSB7XG4gICAgICAgIHN3aXRjaCAocmFkaXgpIHtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBzdHIgPSBgMGIke3N0cn1gO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIHN0ciA9IGAwbyR7c3RyfWA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgICAgIHN0ciA9IGAweCR7c3RyfWA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbiA9IEJpZ0ludChzdHIpO1xuICAgICAgICByZXR1cm4gc2lnbiA9PT0gJy0nID8gQmlnSW50KC0xKSAqIG4gOiBuO1xuICAgIH1cbiAgICBjb25zdCBuID0gcGFyc2VJbnQoc3RyLCByYWRpeCk7XG4gICAgcmV0dXJuIHNpZ24gPT09ICctJyA/IC0xICogbiA6IG47XG59XG5mdW5jdGlvbiBpbnRTdHJpbmdpZnkobm9kZSwgcmFkaXgsIHByZWZpeCkge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IG5vZGU7XG4gICAgaWYgKGludElkZW50aWZ5KHZhbHVlKSkge1xuICAgICAgICBjb25zdCBzdHIgPSB2YWx1ZS50b1N0cmluZyhyYWRpeCk7XG4gICAgICAgIHJldHVybiB2YWx1ZSA8IDAgPyAnLScgKyBwcmVmaXggKyBzdHIuc3Vic3RyKDEpIDogcHJlZml4ICsgc3RyO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5naWZ5TnVtYmVyKG5vZGUpO1xufVxuY29uc3QgaW50QmluID0ge1xuICAgIGlkZW50aWZ5OiBpbnRJZGVudGlmeSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgZm9ybWF0OiAnQklOJyxcbiAgICB0ZXN0OiAvXlstK10/MGJbMC0xX10rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDIsIDIsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBub2RlID0+IGludFN0cmluZ2lmeShub2RlLCAyLCAnMGInKVxufTtcbmNvbnN0IGludE9jdCA9IHtcbiAgICBpZGVudGlmeTogaW50SWRlbnRpZnksXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgIGZvcm1hdDogJ09DVCcsXG4gICAgdGVzdDogL15bLStdPzBbMC03X10rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDEsIDgsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBub2RlID0+IGludFN0cmluZ2lmeShub2RlLCA4LCAnMCcpXG59O1xuY29uc3QgaW50ID0ge1xuICAgIGlkZW50aWZ5OiBpbnRJZGVudGlmeSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgdGVzdDogL15bLStdP1swLTldWzAtOV9dKiQvLFxuICAgIHJlc29sdmU6IChzdHIsIF9vbkVycm9yLCBvcHQpID0+IGludFJlc29sdmUoc3RyLCAwLCAxMCwgb3B0KSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeU51bWJlclxufTtcbmNvbnN0IGludEhleCA9IHtcbiAgICBpZGVudGlmeTogaW50SWRlbnRpZnksXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgIGZvcm1hdDogJ0hFWCcsXG4gICAgdGVzdDogL15bLStdPzB4WzAtOWEtZkEtRl9dKyQvLFxuICAgIHJlc29sdmU6IChzdHIsIF9vbkVycm9yLCBvcHQpID0+IGludFJlc29sdmUoc3RyLCAyLCAxNiwgb3B0KSxcbiAgICBzdHJpbmdpZnk6IG5vZGUgPT4gaW50U3RyaW5naWZ5KG5vZGUsIDE2LCAnMHgnKVxufTtcblxuZXhwb3J0IHsgaW50LCBpbnRCaW4sIGludEhleCwgaW50T2N0IH07XG4iLCJpbXBvcnQgeyBpc01hcCwgaXNQYWlyLCBpc1NjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFBhaXIsIGNyZWF0ZVBhaXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9QYWlyLmpzJztcbmltcG9ydCB7IFlBTUxNYXAsIGZpbmRQYWlyIH0gZnJvbSAnLi4vLi4vbm9kZXMvWUFNTE1hcC5qcyc7XG5cbmNsYXNzIFlBTUxTZXQgZXh0ZW5kcyBZQU1MTWFwIHtcbiAgICBjb25zdHJ1Y3RvcihzY2hlbWEpIHtcbiAgICAgICAgc3VwZXIoc2NoZW1hKTtcbiAgICAgICAgdGhpcy50YWcgPSBZQU1MU2V0LnRhZztcbiAgICB9XG4gICAgYWRkKGtleSkge1xuICAgICAgICBsZXQgcGFpcjtcbiAgICAgICAgaWYgKGlzUGFpcihrZXkpKVxuICAgICAgICAgICAgcGFpciA9IGtleTtcbiAgICAgICAgZWxzZSBpZiAoa2V5ICYmXG4gICAgICAgICAgICB0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgJ2tleScgaW4ga2V5ICYmXG4gICAgICAgICAgICAndmFsdWUnIGluIGtleSAmJlxuICAgICAgICAgICAga2V5LnZhbHVlID09PSBudWxsKVxuICAgICAgICAgICAgcGFpciA9IG5ldyBQYWlyKGtleS5rZXksIG51bGwpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBwYWlyID0gbmV3IFBhaXIoa2V5LCBudWxsKTtcbiAgICAgICAgY29uc3QgcHJldiA9IGZpbmRQYWlyKHRoaXMuaXRlbXMsIHBhaXIua2V5KTtcbiAgICAgICAgaWYgKCFwcmV2KVxuICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKHBhaXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiBga2VlcFBhaXJgIGlzIGB0cnVlYCwgcmV0dXJucyB0aGUgUGFpciBtYXRjaGluZyBga2V5YC5cbiAgICAgKiBPdGhlcndpc2UsIHJldHVybnMgdGhlIHZhbHVlIG9mIHRoYXQgUGFpcidzIGtleS5cbiAgICAgKi9cbiAgICBnZXQoa2V5LCBrZWVwUGFpcikge1xuICAgICAgICBjb25zdCBwYWlyID0gZmluZFBhaXIodGhpcy5pdGVtcywga2V5KTtcbiAgICAgICAgcmV0dXJuICFrZWVwUGFpciAmJiBpc1BhaXIocGFpcilcbiAgICAgICAgICAgID8gaXNTY2FsYXIocGFpci5rZXkpXG4gICAgICAgICAgICAgICAgPyBwYWlyLmtleS52YWx1ZVxuICAgICAgICAgICAgICAgIDogcGFpci5rZXlcbiAgICAgICAgICAgIDogcGFpcjtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBib29sZWFuIHZhbHVlIGZvciBzZXQoa2V5LCB2YWx1ZSkgaW4gYSBZQU1MIHNldCwgbm90ICR7dHlwZW9mIHZhbHVlfWApO1xuICAgICAgICBjb25zdCBwcmV2ID0gZmluZFBhaXIodGhpcy5pdGVtcywga2V5KTtcbiAgICAgICAgaWYgKHByZXYgJiYgIXZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zLnNwbGljZSh0aGlzLml0ZW1zLmluZGV4T2YocHJldiksIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFwcmV2ICYmIHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2gobmV3IFBhaXIoa2V5KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9KU09OKF8sIGN0eCkge1xuICAgICAgICByZXR1cm4gc3VwZXIudG9KU09OKF8sIGN0eCwgU2V0KTtcbiAgICB9XG4gICAgdG9TdHJpbmcoY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIGlmICghY3R4KVxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5oYXNBbGxOdWxsVmFsdWVzKHRydWUpKVxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLnRvU3RyaW5nKE9iamVjdC5hc3NpZ24oe30sIGN0eCwgeyBhbGxOdWxsVmFsdWVzOiB0cnVlIH0pLCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXQgaXRlbXMgbXVzdCBhbGwgaGF2ZSBudWxsIHZhbHVlcycpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbShzY2hlbWEsIGl0ZXJhYmxlLCBjdHgpIHtcbiAgICAgICAgY29uc3QgeyByZXBsYWNlciB9ID0gY3R4O1xuICAgICAgICBjb25zdCBzZXQgPSBuZXcgdGhpcyhzY2hlbWEpO1xuICAgICAgICBpZiAoaXRlcmFibGUgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyYWJsZSkpXG4gICAgICAgICAgICBmb3IgKGxldCB2YWx1ZSBvZiBpdGVyYWJsZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVwbGFjZXIgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcmVwbGFjZXIuY2FsbChpdGVyYWJsZSwgdmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBzZXQuaXRlbXMucHVzaChjcmVhdGVQYWlyKHZhbHVlLCBudWxsLCBjdHgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldDtcbiAgICB9XG59XG5ZQU1MU2V0LnRhZyA9ICd0YWc6eWFtbC5vcmcsMjAwMjpzZXQnO1xuY29uc3Qgc2V0ID0ge1xuICAgIGNvbGxlY3Rpb246ICdtYXAnLFxuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSBpbnN0YW5jZW9mIFNldCxcbiAgICBub2RlQ2xhc3M6IFlBTUxTZXQsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6c2V0JyxcbiAgICBjcmVhdGVOb2RlOiAoc2NoZW1hLCBpdGVyYWJsZSwgY3R4KSA9PiBZQU1MU2V0LmZyb20oc2NoZW1hLCBpdGVyYWJsZSwgY3R4KSxcbiAgICByZXNvbHZlKG1hcCwgb25FcnJvcikge1xuICAgICAgICBpZiAoaXNNYXAobWFwKSkge1xuICAgICAgICAgICAgaWYgKG1hcC5oYXNBbGxOdWxsVmFsdWVzKHRydWUpKVxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBZQU1MU2V0KCksIG1hcCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgb25FcnJvcignU2V0IGl0ZW1zIG11c3QgYWxsIGhhdmUgbnVsbCB2YWx1ZXMnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBvbkVycm9yKCdFeHBlY3RlZCBhIG1hcHBpbmcgZm9yIHRoaXMgdGFnJyk7XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgWUFNTFNldCwgc2V0IH07XG4iLCJpbXBvcnQgeyBzdHJpbmdpZnlOdW1iZXIgfSBmcm9tICcuLi8uLi9zdHJpbmdpZnkvc3RyaW5naWZ5TnVtYmVyLmpzJztcblxuLyoqIEludGVybmFsIHR5cGVzIGhhbmRsZSBiaWdpbnQgYXMgbnVtYmVyLCBiZWNhdXNlIFRTIGNhbid0IGZpZ3VyZSBpdCBvdXQuICovXG5mdW5jdGlvbiBwYXJzZVNleGFnZXNpbWFsKHN0ciwgYXNCaWdJbnQpIHtcbiAgICBjb25zdCBzaWduID0gc3RyWzBdO1xuICAgIGNvbnN0IHBhcnRzID0gc2lnbiA9PT0gJy0nIHx8IHNpZ24gPT09ICcrJyA/IHN0ci5zdWJzdHJpbmcoMSkgOiBzdHI7XG4gICAgY29uc3QgbnVtID0gKG4pID0+IGFzQmlnSW50ID8gQmlnSW50KG4pIDogTnVtYmVyKG4pO1xuICAgIGNvbnN0IHJlcyA9IHBhcnRzXG4gICAgICAgIC5yZXBsYWNlKC9fL2csICcnKVxuICAgICAgICAuc3BsaXQoJzonKVxuICAgICAgICAucmVkdWNlKChyZXMsIHApID0+IHJlcyAqIG51bSg2MCkgKyBudW0ocCksIG51bSgwKSk7XG4gICAgcmV0dXJuIChzaWduID09PSAnLScgPyBudW0oLTEpICogcmVzIDogcmVzKTtcbn1cbi8qKlxuICogaGhoaDptbTpzcy5zc3NcbiAqXG4gKiBJbnRlcm5hbCB0eXBlcyBoYW5kbGUgYmlnaW50IGFzIG51bWJlciwgYmVjYXVzZSBUUyBjYW4ndCBmaWd1cmUgaXQgb3V0LlxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnlTZXhhZ2VzaW1hbChub2RlKSB7XG4gICAgbGV0IHsgdmFsdWUgfSA9IG5vZGU7XG4gICAgbGV0IG51bSA9IChuKSA9PiBuO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnKVxuICAgICAgICBudW0gPSBuID0+IEJpZ0ludChuKTtcbiAgICBlbHNlIGlmIChpc05hTih2YWx1ZSkgfHwgIWlzRmluaXRlKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeU51bWJlcihub2RlKTtcbiAgICBsZXQgc2lnbiA9ICcnO1xuICAgIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgICAgc2lnbiA9ICctJztcbiAgICAgICAgdmFsdWUgKj0gbnVtKC0xKTtcbiAgICB9XG4gICAgY29uc3QgXzYwID0gbnVtKDYwKTtcbiAgICBjb25zdCBwYXJ0cyA9IFt2YWx1ZSAlIF82MF07IC8vIHNlY29uZHMsIGluY2x1ZGluZyBtc1xuICAgIGlmICh2YWx1ZSA8IDYwKSB7XG4gICAgICAgIHBhcnRzLnVuc2hpZnQoMCk7IC8vIGF0IGxlYXN0IG9uZSA6IGlzIHJlcXVpcmVkXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSAtIHBhcnRzWzBdKSAvIF82MDtcbiAgICAgICAgcGFydHMudW5zaGlmdCh2YWx1ZSAlIF82MCk7IC8vIG1pbnV0ZXNcbiAgICAgICAgaWYgKHZhbHVlID49IDYwKSB7XG4gICAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSAtIHBhcnRzWzBdKSAvIF82MDtcbiAgICAgICAgICAgIHBhcnRzLnVuc2hpZnQodmFsdWUpOyAvLyBob3Vyc1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoc2lnbiArXG4gICAgICAgIHBhcnRzXG4gICAgICAgICAgICAubWFwKG4gPT4gU3RyaW5nKG4pLnBhZFN0YXJ0KDIsICcwJykpXG4gICAgICAgICAgICAuam9pbignOicpXG4gICAgICAgICAgICAucmVwbGFjZSgvMDAwMDAwXFxkKiQvLCAnJykgLy8gJSA2MCBtYXkgaW50cm9kdWNlIGVycm9yXG4gICAgKTtcbn1cbmNvbnN0IGludFRpbWUgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcgfHwgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSksXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgIGZvcm1hdDogJ1RJTUUnLFxuICAgIHRlc3Q6IC9eWy0rXT9bMC05XVswLTlfXSooPzo6WzAtNV0/WzAtOV0pKyQvLFxuICAgIHJlc29sdmU6IChzdHIsIF9vbkVycm9yLCB7IGludEFzQmlnSW50IH0pID0+IHBhcnNlU2V4YWdlc2ltYWwoc3RyLCBpbnRBc0JpZ0ludCksXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlTZXhhZ2VzaW1hbFxufTtcbmNvbnN0IGZsb2F0VGltZSA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICBmb3JtYXQ6ICdUSU1FJyxcbiAgICB0ZXN0OiAvXlstK10/WzAtOV1bMC05X10qKD86OlswLTVdP1swLTldKStcXC5bMC05X10qJC8sXG4gICAgcmVzb2x2ZTogc3RyID0+IHBhcnNlU2V4YWdlc2ltYWwoc3RyLCBmYWxzZSksXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlTZXhhZ2VzaW1hbFxufTtcbmNvbnN0IHRpbWVzdGFtcCA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6dGltZXN0YW1wJyxcbiAgICAvLyBJZiB0aGUgdGltZSB6b25lIGlzIG9taXR0ZWQsIHRoZSB0aW1lc3RhbXAgaXMgYXNzdW1lZCB0byBiZSBzcGVjaWZpZWQgaW4gVVRDLiBUaGUgdGltZSBwYXJ0XG4gICAgLy8gbWF5IGJlIG9taXR0ZWQgYWx0b2dldGhlciwgcmVzdWx0aW5nIGluIGEgZGF0ZSBmb3JtYXQuIEluIHN1Y2ggYSBjYXNlLCB0aGUgdGltZSBwYXJ0IGlzXG4gICAgLy8gYXNzdW1lZCB0byBiZSAwMDowMDowMFogKHN0YXJ0IG9mIGRheSwgVVRDKS5cbiAgICB0ZXN0OiBSZWdFeHAoJ14oWzAtOV17NH0pLShbMC05XXsxLDJ9KS0oWzAtOV17MSwyfSknICsgLy8gWVlZWS1NbS1EZFxuICAgICAgICAnKD86JyArIC8vIHRpbWUgaXMgb3B0aW9uYWxcbiAgICAgICAgJyg/OnR8VHxbIFxcXFx0XSspJyArIC8vIHQgfCBUIHwgd2hpdGVzcGFjZVxuICAgICAgICAnKFswLTldezEsMn0pOihbMC05XXsxLDJ9KTooWzAtOV17MSwyfShcXFxcLlswLTldKyk/KScgKyAvLyBIaDpNbTpTcyguc3MpP1xuICAgICAgICAnKD86WyBcXFxcdF0qKFp8Wy0rXVswMTJdP1swLTldKD86OlswLTldezJ9KT8pKT8nICsgLy8gWiB8ICs1IHwgLTAzOjMwXG4gICAgICAgICcpPyQnKSxcbiAgICByZXNvbHZlKHN0cikge1xuICAgICAgICBjb25zdCBtYXRjaCA9IHN0ci5tYXRjaCh0aW1lc3RhbXAudGVzdCk7XG4gICAgICAgIGlmICghbWF0Y2gpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJyEhdGltZXN0YW1wIGV4cGVjdHMgYSBkYXRlLCBzdGFydGluZyB3aXRoIHl5eXktbW0tZGQnKTtcbiAgICAgICAgY29uc3QgWywgeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmRdID0gbWF0Y2gubWFwKE51bWJlcik7XG4gICAgICAgIGNvbnN0IG1pbGxpc2VjID0gbWF0Y2hbN10gPyBOdW1iZXIoKG1hdGNoWzddICsgJzAwJykuc3Vic3RyKDEsIDMpKSA6IDA7XG4gICAgICAgIGxldCBkYXRlID0gRGF0ZS5VVEMoeWVhciwgbW9udGggLSAxLCBkYXksIGhvdXIgfHwgMCwgbWludXRlIHx8IDAsIHNlY29uZCB8fCAwLCBtaWxsaXNlYyk7XG4gICAgICAgIGNvbnN0IHR6ID0gbWF0Y2hbOF07XG4gICAgICAgIGlmICh0eiAmJiB0eiAhPT0gJ1onKSB7XG4gICAgICAgICAgICBsZXQgZCA9IHBhcnNlU2V4YWdlc2ltYWwodHosIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhkKSA8IDMwKVxuICAgICAgICAgICAgICAgIGQgKj0gNjA7XG4gICAgICAgICAgICBkYXRlIC09IDYwMDAwICogZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZSk7XG4gICAgfSxcbiAgICBzdHJpbmdpZnk6ICh7IHZhbHVlIH0pID0+IHZhbHVlPy50b0lTT1N0cmluZygpLnJlcGxhY2UoLyhUMDA6MDA6MDApP1xcLjAwMFokLywgJycpID8/ICcnXG59O1xuXG5leHBvcnQgeyBmbG9hdFRpbWUsIGludFRpbWUsIHRpbWVzdGFtcCB9O1xuIiwiaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi4vY29tbW9uL21hcC5qcyc7XG5pbXBvcnQgeyBudWxsVGFnIH0gZnJvbSAnLi4vY29tbW9uL251bGwuanMnO1xuaW1wb3J0IHsgc2VxIH0gZnJvbSAnLi4vY29tbW9uL3NlcS5qcyc7XG5pbXBvcnQgeyBzdHJpbmcgfSBmcm9tICcuLi9jb21tb24vc3RyaW5nLmpzJztcbmltcG9ydCB7IGJpbmFyeSB9IGZyb20gJy4vYmluYXJ5LmpzJztcbmltcG9ydCB7IHRydWVUYWcsIGZhbHNlVGFnIH0gZnJvbSAnLi9ib29sLmpzJztcbmltcG9ydCB7IGZsb2F0TmFOLCBmbG9hdEV4cCwgZmxvYXQgfSBmcm9tICcuL2Zsb2F0LmpzJztcbmltcG9ydCB7IGludEJpbiwgaW50T2N0LCBpbnQsIGludEhleCB9IGZyb20gJy4vaW50LmpzJztcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSAnLi9tZXJnZS5qcyc7XG5pbXBvcnQgeyBvbWFwIH0gZnJvbSAnLi9vbWFwLmpzJztcbmltcG9ydCB7IHBhaXJzIH0gZnJvbSAnLi9wYWlycy5qcyc7XG5pbXBvcnQgeyBzZXQgfSBmcm9tICcuL3NldC5qcyc7XG5pbXBvcnQgeyBpbnRUaW1lLCBmbG9hdFRpbWUsIHRpbWVzdGFtcCB9IGZyb20gJy4vdGltZXN0YW1wLmpzJztcblxuY29uc3Qgc2NoZW1hID0gW1xuICAgIG1hcCxcbiAgICBzZXEsXG4gICAgc3RyaW5nLFxuICAgIG51bGxUYWcsXG4gICAgdHJ1ZVRhZyxcbiAgICBmYWxzZVRhZyxcbiAgICBpbnRCaW4sXG4gICAgaW50T2N0LFxuICAgIGludCxcbiAgICBpbnRIZXgsXG4gICAgZmxvYXROYU4sXG4gICAgZmxvYXRFeHAsXG4gICAgZmxvYXQsXG4gICAgYmluYXJ5LFxuICAgIG1lcmdlLFxuICAgIG9tYXAsXG4gICAgcGFpcnMsXG4gICAgc2V0LFxuICAgIGludFRpbWUsXG4gICAgZmxvYXRUaW1lLFxuICAgIHRpbWVzdGFtcFxuXTtcblxuZXhwb3J0IHsgc2NoZW1hIH07XG4iLCJpbXBvcnQgeyBtYXAgfSBmcm9tICcuL2NvbW1vbi9tYXAuanMnO1xuaW1wb3J0IHsgbnVsbFRhZyB9IGZyb20gJy4vY29tbW9uL251bGwuanMnO1xuaW1wb3J0IHsgc2VxIH0gZnJvbSAnLi9jb21tb24vc2VxLmpzJztcbmltcG9ydCB7IHN0cmluZyB9IGZyb20gJy4vY29tbW9uL3N0cmluZy5qcyc7XG5pbXBvcnQgeyBib29sVGFnIH0gZnJvbSAnLi9jb3JlL2Jvb2wuanMnO1xuaW1wb3J0IHsgZmxvYXROYU4sIGZsb2F0RXhwLCBmbG9hdCB9IGZyb20gJy4vY29yZS9mbG9hdC5qcyc7XG5pbXBvcnQgeyBpbnRPY3QsIGludEhleCwgaW50IH0gZnJvbSAnLi9jb3JlL2ludC5qcyc7XG5pbXBvcnQgeyBzY2hlbWEgfSBmcm9tICcuL2NvcmUvc2NoZW1hLmpzJztcbmltcG9ydCB7IHNjaGVtYSBhcyBzY2hlbWEkMSB9IGZyb20gJy4vanNvbi9zY2hlbWEuanMnO1xuaW1wb3J0IHsgYmluYXJ5IH0gZnJvbSAnLi95YW1sLTEuMS9iaW5hcnkuanMnO1xuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tICcuL3lhbWwtMS4xL21lcmdlLmpzJztcbmltcG9ydCB7IG9tYXAgfSBmcm9tICcuL3lhbWwtMS4xL29tYXAuanMnO1xuaW1wb3J0IHsgcGFpcnMgfSBmcm9tICcuL3lhbWwtMS4xL3BhaXJzLmpzJztcbmltcG9ydCB7IHNjaGVtYSBhcyBzY2hlbWEkMiB9IGZyb20gJy4veWFtbC0xLjEvc2NoZW1hLmpzJztcbmltcG9ydCB7IHNldCB9IGZyb20gJy4veWFtbC0xLjEvc2V0LmpzJztcbmltcG9ydCB7IHRpbWVzdGFtcCwgaW50VGltZSwgZmxvYXRUaW1lIH0gZnJvbSAnLi95YW1sLTEuMS90aW1lc3RhbXAuanMnO1xuXG5jb25zdCBzY2hlbWFzID0gbmV3IE1hcChbXG4gICAgWydjb3JlJywgc2NoZW1hXSxcbiAgICBbJ2ZhaWxzYWZlJywgW21hcCwgc2VxLCBzdHJpbmddXSxcbiAgICBbJ2pzb24nLCBzY2hlbWEkMV0sXG4gICAgWyd5YW1sMTEnLCBzY2hlbWEkMl0sXG4gICAgWyd5YW1sLTEuMScsIHNjaGVtYSQyXVxuXSk7XG5jb25zdCB0YWdzQnlOYW1lID0ge1xuICAgIGJpbmFyeSxcbiAgICBib29sOiBib29sVGFnLFxuICAgIGZsb2F0LFxuICAgIGZsb2F0RXhwLFxuICAgIGZsb2F0TmFOLFxuICAgIGZsb2F0VGltZSxcbiAgICBpbnQsXG4gICAgaW50SGV4LFxuICAgIGludE9jdCxcbiAgICBpbnRUaW1lLFxuICAgIG1hcCxcbiAgICBtZXJnZSxcbiAgICBudWxsOiBudWxsVGFnLFxuICAgIG9tYXAsXG4gICAgcGFpcnMsXG4gICAgc2VxLFxuICAgIHNldCxcbiAgICB0aW1lc3RhbXBcbn07XG5jb25zdCBjb3JlS25vd25UYWdzID0ge1xuICAgICd0YWc6eWFtbC5vcmcsMjAwMjpiaW5hcnknOiBiaW5hcnksXG4gICAgJ3RhZzp5YW1sLm9yZywyMDAyOm1lcmdlJzogbWVyZ2UsXG4gICAgJ3RhZzp5YW1sLm9yZywyMDAyOm9tYXAnOiBvbWFwLFxuICAgICd0YWc6eWFtbC5vcmcsMjAwMjpwYWlycyc6IHBhaXJzLFxuICAgICd0YWc6eWFtbC5vcmcsMjAwMjpzZXQnOiBzZXQsXG4gICAgJ3RhZzp5YW1sLm9yZywyMDAyOnRpbWVzdGFtcCc6IHRpbWVzdGFtcFxufTtcbmZ1bmN0aW9uIGdldFRhZ3MoY3VzdG9tVGFncywgc2NoZW1hTmFtZSwgYWRkTWVyZ2VUYWcpIHtcbiAgICBjb25zdCBzY2hlbWFUYWdzID0gc2NoZW1hcy5nZXQoc2NoZW1hTmFtZSk7XG4gICAgaWYgKHNjaGVtYVRhZ3MgJiYgIWN1c3RvbVRhZ3MpIHtcbiAgICAgICAgcmV0dXJuIGFkZE1lcmdlVGFnICYmICFzY2hlbWFUYWdzLmluY2x1ZGVzKG1lcmdlKVxuICAgICAgICAgICAgPyBzY2hlbWFUYWdzLmNvbmNhdChtZXJnZSlcbiAgICAgICAgICAgIDogc2NoZW1hVGFncy5zbGljZSgpO1xuICAgIH1cbiAgICBsZXQgdGFncyA9IHNjaGVtYVRhZ3M7XG4gICAgaWYgKCF0YWdzKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGN1c3RvbVRhZ3MpKVxuICAgICAgICAgICAgdGFncyA9IFtdO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBBcnJheS5mcm9tKHNjaGVtYXMua2V5cygpKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoa2V5ID0+IGtleSAhPT0gJ3lhbWwxMScpXG4gICAgICAgICAgICAgICAgLm1hcChrZXkgPT4gSlNPTi5zdHJpbmdpZnkoa2V5KSlcbiAgICAgICAgICAgICAgICAuam9pbignLCAnKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBzY2hlbWEgXCIke3NjaGVtYU5hbWV9XCI7IHVzZSBvbmUgb2YgJHtrZXlzfSBvciBkZWZpbmUgY3VzdG9tVGFncyBhcnJheWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGN1c3RvbVRhZ3MpKSB7XG4gICAgICAgIGZvciAoY29uc3QgdGFnIG9mIGN1c3RvbVRhZ3MpXG4gICAgICAgICAgICB0YWdzID0gdGFncy5jb25jYXQodGFnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGN1c3RvbVRhZ3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGFncyA9IGN1c3RvbVRhZ3ModGFncy5zbGljZSgpKTtcbiAgICB9XG4gICAgaWYgKGFkZE1lcmdlVGFnKVxuICAgICAgICB0YWdzID0gdGFncy5jb25jYXQobWVyZ2UpO1xuICAgIHJldHVybiB0YWdzLnJlZHVjZSgodGFncywgdGFnKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhZ09iaiA9IHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnID8gdGFnc0J5TmFtZVt0YWddIDogdGFnO1xuICAgICAgICBpZiAoIXRhZ09iaikge1xuICAgICAgICAgICAgY29uc3QgdGFnTmFtZSA9IEpTT04uc3RyaW5naWZ5KHRhZyk7XG4gICAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGFnc0J5TmFtZSlcbiAgICAgICAgICAgICAgICAubWFwKGtleSA9PiBKU09OLnN0cmluZ2lmeShrZXkpKVxuICAgICAgICAgICAgICAgIC5qb2luKCcsICcpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGN1c3RvbSB0YWcgJHt0YWdOYW1lfTsgdXNlIG9uZSBvZiAke2tleXN9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0YWdzLmluY2x1ZGVzKHRhZ09iaikpXG4gICAgICAgICAgICB0YWdzLnB1c2godGFnT2JqKTtcbiAgICAgICAgcmV0dXJuIHRhZ3M7XG4gICAgfSwgW10pO1xufVxuXG5leHBvcnQgeyBjb3JlS25vd25UYWdzLCBnZXRUYWdzIH07XG4iLCJpbXBvcnQgeyBNQVAsIFNDQUxBUiwgU0VRIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9jb21tb24vbWFwLmpzJztcbmltcG9ydCB7IHNlcSB9IGZyb20gJy4vY29tbW9uL3NlcS5qcyc7XG5pbXBvcnQgeyBzdHJpbmcgfSBmcm9tICcuL2NvbW1vbi9zdHJpbmcuanMnO1xuaW1wb3J0IHsgZ2V0VGFncywgY29yZUtub3duVGFncyB9IGZyb20gJy4vdGFncy5qcyc7XG5cbmNvbnN0IHNvcnRNYXBFbnRyaWVzQnlLZXkgPSAoYSwgYikgPT4gYS5rZXkgPCBiLmtleSA/IC0xIDogYS5rZXkgPiBiLmtleSA/IDEgOiAwO1xuY2xhc3MgU2NoZW1hIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGNvbXBhdCwgY3VzdG9tVGFncywgbWVyZ2UsIHJlc29sdmVLbm93blRhZ3MsIHNjaGVtYSwgc29ydE1hcEVudHJpZXMsIHRvU3RyaW5nRGVmYXVsdHMgfSkge1xuICAgICAgICB0aGlzLmNvbXBhdCA9IEFycmF5LmlzQXJyYXkoY29tcGF0KVxuICAgICAgICAgICAgPyBnZXRUYWdzKGNvbXBhdCwgJ2NvbXBhdCcpXG4gICAgICAgICAgICA6IGNvbXBhdFxuICAgICAgICAgICAgICAgID8gZ2V0VGFncyhudWxsLCBjb21wYXQpXG4gICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICB0aGlzLm5hbWUgPSAodHlwZW9mIHNjaGVtYSA9PT0gJ3N0cmluZycgJiYgc2NoZW1hKSB8fCAnY29yZSc7XG4gICAgICAgIHRoaXMua25vd25UYWdzID0gcmVzb2x2ZUtub3duVGFncyA/IGNvcmVLbm93blRhZ3MgOiB7fTtcbiAgICAgICAgdGhpcy50YWdzID0gZ2V0VGFncyhjdXN0b21UYWdzLCB0aGlzLm5hbWUsIG1lcmdlKTtcbiAgICAgICAgdGhpcy50b1N0cmluZ09wdGlvbnMgPSB0b1N0cmluZ0RlZmF1bHRzID8/IG51bGw7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBNQVAsIHsgdmFsdWU6IG1hcCB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFNDQUxBUiwgeyB2YWx1ZTogc3RyaW5nIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgU0VRLCB7IHZhbHVlOiBzZXEgfSk7XG4gICAgICAgIC8vIFVzZWQgYnkgY3JlYXRlTWFwKClcbiAgICAgICAgdGhpcy5zb3J0TWFwRW50cmllcyA9XG4gICAgICAgICAgICB0eXBlb2Ygc29ydE1hcEVudHJpZXMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICA/IHNvcnRNYXBFbnRyaWVzXG4gICAgICAgICAgICAgICAgOiBzb3J0TWFwRW50cmllcyA9PT0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICA/IHNvcnRNYXBFbnRyaWVzQnlLZXlcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgIH1cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgY29uc3QgY29weSA9IE9iamVjdC5jcmVhdGUoU2NoZW1hLnByb3RvdHlwZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModGhpcykpO1xuICAgICAgICBjb3B5LnRhZ3MgPSB0aGlzLnRhZ3Muc2xpY2UoKTtcbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBTY2hlbWEgfTtcbiIsImltcG9ydCB7IEFsaWFzIH0gZnJvbSAnLi4vbm9kZXMvQWxpYXMuanMnO1xuaW1wb3J0IHsgaXNFbXB0eVBhdGgsIGNvbGxlY3Rpb25Gcm9tUGF0aCB9IGZyb20gJy4uL25vZGVzL0NvbGxlY3Rpb24uanMnO1xuaW1wb3J0IHsgTk9ERV9UWVBFLCBET0MsIGlzTm9kZSwgaXNDb2xsZWN0aW9uLCBpc1NjYWxhciB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFBhaXIgfSBmcm9tICcuLi9ub2Rlcy9QYWlyLmpzJztcbmltcG9ydCB7IHRvSlMgfSBmcm9tICcuLi9ub2Rlcy90b0pTLmpzJztcbmltcG9ydCB7IFNjaGVtYSB9IGZyb20gJy4uL3NjaGVtYS9TY2hlbWEuanMnO1xuaW1wb3J0IHsgc3RyaW5naWZ5RG9jdW1lbnQgfSBmcm9tICcuLi9zdHJpbmdpZnkvc3RyaW5naWZ5RG9jdW1lbnQuanMnO1xuaW1wb3J0IHsgYW5jaG9yTmFtZXMsIGZpbmROZXdBbmNob3IsIGNyZWF0ZU5vZGVBbmNob3JzIH0gZnJvbSAnLi9hbmNob3JzLmpzJztcbmltcG9ydCB7IGFwcGx5UmV2aXZlciB9IGZyb20gJy4vYXBwbHlSZXZpdmVyLmpzJztcbmltcG9ydCB7IGNyZWF0ZU5vZGUgfSBmcm9tICcuL2NyZWF0ZU5vZGUuanMnO1xuaW1wb3J0IHsgRGlyZWN0aXZlcyB9IGZyb20gJy4vZGlyZWN0aXZlcy5qcyc7XG5cbmNsYXNzIERvY3VtZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSwgcmVwbGFjZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyoqIEEgY29tbWVudCBiZWZvcmUgdGhpcyBEb2N1bWVudCAqL1xuICAgICAgICB0aGlzLmNvbW1lbnRCZWZvcmUgPSBudWxsO1xuICAgICAgICAvKiogQSBjb21tZW50IGltbWVkaWF0ZWx5IGFmdGVyIHRoaXMgRG9jdW1lbnQgKi9cbiAgICAgICAgdGhpcy5jb21tZW50ID0gbnVsbDtcbiAgICAgICAgLyoqIEVycm9ycyBlbmNvdW50ZXJlZCBkdXJpbmcgcGFyc2luZy4gKi9cbiAgICAgICAgdGhpcy5lcnJvcnMgPSBbXTtcbiAgICAgICAgLyoqIFdhcm5pbmdzIGVuY291bnRlcmVkIGR1cmluZyBwYXJzaW5nLiAqL1xuICAgICAgICB0aGlzLndhcm5pbmdzID0gW107XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBOT0RFX1RZUEUsIHsgdmFsdWU6IERPQyB9KTtcbiAgICAgICAgbGV0IF9yZXBsYWNlciA9IG51bGw7XG4gICAgICAgIGlmICh0eXBlb2YgcmVwbGFjZXIgPT09ICdmdW5jdGlvbicgfHwgQXJyYXkuaXNBcnJheShyZXBsYWNlcikpIHtcbiAgICAgICAgICAgIF9yZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCAmJiByZXBsYWNlcikge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHJlcGxhY2VyO1xuICAgICAgICAgICAgcmVwbGFjZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0ID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICBpbnRBc0JpZ0ludDogZmFsc2UsXG4gICAgICAgICAgICBrZWVwU291cmNlVG9rZW5zOiBmYWxzZSxcbiAgICAgICAgICAgIGxvZ0xldmVsOiAnd2FybicsXG4gICAgICAgICAgICBwcmV0dHlFcnJvcnM6IHRydWUsXG4gICAgICAgICAgICBzdHJpY3Q6IHRydWUsXG4gICAgICAgICAgICBzdHJpbmdLZXlzOiBmYWxzZSxcbiAgICAgICAgICAgIHVuaXF1ZUtleXM6IHRydWUsXG4gICAgICAgICAgICB2ZXJzaW9uOiAnMS4yJ1xuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0O1xuICAgICAgICBsZXQgeyB2ZXJzaW9uIH0gPSBvcHQ7XG4gICAgICAgIGlmIChvcHRpb25zPy5fZGlyZWN0aXZlcykge1xuICAgICAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gb3B0aW9ucy5fZGlyZWN0aXZlcy5hdERvY3VtZW50KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5kaXJlY3RpdmVzLnlhbWwuZXhwbGljaXQpXG4gICAgICAgICAgICAgICAgdmVyc2lvbiA9IHRoaXMuZGlyZWN0aXZlcy55YW1sLnZlcnNpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gbmV3IERpcmVjdGl2ZXMoeyB2ZXJzaW9uIH0pO1xuICAgICAgICB0aGlzLnNldFNjaGVtYSh2ZXJzaW9uLCBvcHRpb25zKTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBjYW4ndCByZWFsbHkga25vdyB0aGF0IHRoaXMgbWF0Y2hlcyBDb250ZW50cy5cbiAgICAgICAgdGhpcy5jb250ZW50cyA9XG4gICAgICAgICAgICB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHRoaXMuY3JlYXRlTm9kZSh2YWx1ZSwgX3JlcGxhY2VyLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZGVlcCBjb3B5IG9mIHRoaXMgRG9jdW1lbnQgYW5kIGl0cyBjb250ZW50cy5cbiAgICAgKlxuICAgICAqIEN1c3RvbSBOb2RlIHZhbHVlcyB0aGF0IGluaGVyaXQgZnJvbSBgT2JqZWN0YCBzdGlsbCByZWZlciB0byB0aGVpciBvcmlnaW5hbCBpbnN0YW5jZXMuXG4gICAgICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBPYmplY3QuY3JlYXRlKERvY3VtZW50LnByb3RvdHlwZSwge1xuICAgICAgICAgICAgW05PREVfVFlQRV06IHsgdmFsdWU6IERPQyB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb3B5LmNvbW1lbnRCZWZvcmUgPSB0aGlzLmNvbW1lbnRCZWZvcmU7XG4gICAgICAgIGNvcHkuY29tbWVudCA9IHRoaXMuY29tbWVudDtcbiAgICAgICAgY29weS5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgpO1xuICAgICAgICBjb3B5Lndhcm5pbmdzID0gdGhpcy53YXJuaW5ncy5zbGljZSgpO1xuICAgICAgICBjb3B5Lm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICBpZiAodGhpcy5kaXJlY3RpdmVzKVxuICAgICAgICAgICAgY29weS5kaXJlY3RpdmVzID0gdGhpcy5kaXJlY3RpdmVzLmNsb25lKCk7XG4gICAgICAgIGNvcHkuc2NoZW1hID0gdGhpcy5zY2hlbWEuY2xvbmUoKTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBjYW4ndCByZWFsbHkga25vdyB0aGF0IHRoaXMgbWF0Y2hlcyBDb250ZW50cy5cbiAgICAgICAgY29weS5jb250ZW50cyA9IGlzTm9kZSh0aGlzLmNvbnRlbnRzKVxuICAgICAgICAgICAgPyB0aGlzLmNvbnRlbnRzLmNsb25lKGNvcHkuc2NoZW1hKVxuICAgICAgICAgICAgOiB0aGlzLmNvbnRlbnRzO1xuICAgICAgICBpZiAodGhpcy5yYW5nZSlcbiAgICAgICAgICAgIGNvcHkucmFuZ2UgPSB0aGlzLnJhbmdlLnNsaWNlKCk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICAvKiogQWRkcyBhIHZhbHVlIHRvIHRoZSBkb2N1bWVudC4gKi9cbiAgICBhZGQodmFsdWUpIHtcbiAgICAgICAgaWYgKGFzc2VydENvbGxlY3Rpb24odGhpcy5jb250ZW50cykpXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRzLmFkZCh2YWx1ZSk7XG4gICAgfVxuICAgIC8qKiBBZGRzIGEgdmFsdWUgdG8gdGhlIGRvY3VtZW50LiAqL1xuICAgIGFkZEluKHBhdGgsIHZhbHVlKSB7XG4gICAgICAgIGlmIChhc3NlcnRDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpKVxuICAgICAgICAgICAgdGhpcy5jb250ZW50cy5hZGRJbihwYXRoLCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQWxpYXNgIG5vZGUsIGVuc3VyaW5nIHRoYXQgdGhlIHRhcmdldCBgbm9kZWAgaGFzIHRoZSByZXF1aXJlZCBhbmNob3IuXG4gICAgICpcbiAgICAgKiBJZiBgbm9kZWAgYWxyZWFkeSBoYXMgYW4gYW5jaG9yLCBgbmFtZWAgaXMgaWdub3JlZC5cbiAgICAgKiBPdGhlcndpc2UsIHRoZSBgbm9kZS5hbmNob3JgIHZhbHVlIHdpbGwgYmUgc2V0IHRvIGBuYW1lYCxcbiAgICAgKiBvciBpZiBhbiBhbmNob3Igd2l0aCB0aGF0IG5hbWUgaXMgYWxyZWFkeSBwcmVzZW50IGluIHRoZSBkb2N1bWVudCxcbiAgICAgKiBgbmFtZWAgd2lsbCBiZSB1c2VkIGFzIGEgcHJlZml4IGZvciBhIG5ldyB1bmlxdWUgYW5jaG9yLlxuICAgICAqIElmIGBuYW1lYCBpcyB1bmRlZmluZWQsIHRoZSBnZW5lcmF0ZWQgYW5jaG9yIHdpbGwgdXNlICdhJyBhcyBhIHByZWZpeC5cbiAgICAgKi9cbiAgICBjcmVhdGVBbGlhcyhub2RlLCBuYW1lKSB7XG4gICAgICAgIGlmICghbm9kZS5hbmNob3IpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZXYgPSBhbmNob3JOYW1lcyh0aGlzKTtcbiAgICAgICAgICAgIG5vZGUuYW5jaG9yID1cbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1udWxsaXNoLWNvYWxlc2NpbmdcbiAgICAgICAgICAgICAgICAhbmFtZSB8fCBwcmV2LmhhcyhuYW1lKSA/IGZpbmROZXdBbmNob3IobmFtZSB8fCAnYScsIHByZXYpIDogbmFtZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEFsaWFzKG5vZGUuYW5jaG9yKTtcbiAgICB9XG4gICAgY3JlYXRlTm9kZSh2YWx1ZSwgcmVwbGFjZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IF9yZXBsYWNlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFsdWUgPSByZXBsYWNlci5jYWxsKHsgJyc6IHZhbHVlIH0sICcnLCB2YWx1ZSk7XG4gICAgICAgICAgICBfcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlcGxhY2VyKSkge1xuICAgICAgICAgICAgY29uc3Qga2V5VG9TdHIgPSAodikgPT4gdHlwZW9mIHYgPT09ICdudW1iZXInIHx8IHYgaW5zdGFuY2VvZiBTdHJpbmcgfHwgdiBpbnN0YW5jZW9mIE51bWJlcjtcbiAgICAgICAgICAgIGNvbnN0IGFzU3RyID0gcmVwbGFjZXIuZmlsdGVyKGtleVRvU3RyKS5tYXAoU3RyaW5nKTtcbiAgICAgICAgICAgIGlmIChhc1N0ci5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgIHJlcGxhY2VyID0gcmVwbGFjZXIuY29uY2F0KGFzU3RyKTtcbiAgICAgICAgICAgIF9yZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCAmJiByZXBsYWNlcikge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHJlcGxhY2VyO1xuICAgICAgICAgICAgcmVwbGFjZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBhbGlhc0R1cGxpY2F0ZU9iamVjdHMsIGFuY2hvclByZWZpeCwgZmxvdywga2VlcFVuZGVmaW5lZCwgb25UYWdPYmosIHRhZyB9ID0gb3B0aW9ucyA/PyB7fTtcbiAgICAgICAgY29uc3QgeyBvbkFuY2hvciwgc2V0QW5jaG9ycywgc291cmNlT2JqZWN0cyB9ID0gY3JlYXRlTm9kZUFuY2hvcnModGhpcywgXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLW51bGxpc2gtY29hbGVzY2luZ1xuICAgICAgICBhbmNob3JQcmVmaXggfHwgJ2EnKTtcbiAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgYWxpYXNEdXBsaWNhdGVPYmplY3RzOiBhbGlhc0R1cGxpY2F0ZU9iamVjdHMgPz8gdHJ1ZSxcbiAgICAgICAgICAgIGtlZXBVbmRlZmluZWQ6IGtlZXBVbmRlZmluZWQgPz8gZmFsc2UsXG4gICAgICAgICAgICBvbkFuY2hvcixcbiAgICAgICAgICAgIG9uVGFnT2JqLFxuICAgICAgICAgICAgcmVwbGFjZXI6IF9yZXBsYWNlcixcbiAgICAgICAgICAgIHNjaGVtYTogdGhpcy5zY2hlbWEsXG4gICAgICAgICAgICBzb3VyY2VPYmplY3RzXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG5vZGUgPSBjcmVhdGVOb2RlKHZhbHVlLCB0YWcsIGN0eCk7XG4gICAgICAgIGlmIChmbG93ICYmIGlzQ29sbGVjdGlvbihub2RlKSlcbiAgICAgICAgICAgIG5vZGUuZmxvdyA9IHRydWU7XG4gICAgICAgIHNldEFuY2hvcnMoKTtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYSBrZXkgYW5kIGEgdmFsdWUgaW50byBhIGBQYWlyYCB1c2luZyB0aGUgY3VycmVudCBzY2hlbWEsXG4gICAgICogcmVjdXJzaXZlbHkgd3JhcHBpbmcgYWxsIHZhbHVlcyBhcyBgU2NhbGFyYCBvciBgQ29sbGVjdGlvbmAgbm9kZXMuXG4gICAgICovXG4gICAgY3JlYXRlUGFpcihrZXksIHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgayA9IHRoaXMuY3JlYXRlTm9kZShrZXksIG51bGwsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCB2ID0gdGhpcy5jcmVhdGVOb2RlKHZhbHVlLCBudWxsLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQYWlyKGssIHYpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgdmFsdWUgZnJvbSB0aGUgZG9jdW1lbnQuXG4gICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBpdGVtIHdhcyBmb3VuZCBhbmQgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBkZWxldGUoa2V5KSB7XG4gICAgICAgIHJldHVybiBhc3NlcnRDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpID8gdGhpcy5jb250ZW50cy5kZWxldGUoa2V5KSA6IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgdmFsdWUgZnJvbSB0aGUgZG9jdW1lbnQuXG4gICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBpdGVtIHdhcyBmb3VuZCBhbmQgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBkZWxldGVJbihwYXRoKSB7XG4gICAgICAgIGlmIChpc0VtcHR5UGF0aChwYXRoKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudHMgPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFByZXN1bWVkIGltcG9zc2libGUgaWYgU3RyaWN0IGV4dGVuZHMgZmFsc2VcbiAgICAgICAgICAgIHRoaXMuY29udGVudHMgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFzc2VydENvbGxlY3Rpb24odGhpcy5jb250ZW50cylcbiAgICAgICAgICAgID8gdGhpcy5jb250ZW50cy5kZWxldGVJbihwYXRoKVxuICAgICAgICAgICAgOiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpdGVtIGF0IGBrZXlgLCBvciBgdW5kZWZpbmVkYCBpZiBub3QgZm91bmQuIEJ5IGRlZmF1bHQgdW53cmFwc1xuICAgICAqIHNjYWxhciB2YWx1ZXMgZnJvbSB0aGVpciBzdXJyb3VuZGluZyBub2RlOyB0byBkaXNhYmxlIHNldCBga2VlcFNjYWxhcmAgdG9cbiAgICAgKiBgdHJ1ZWAgKGNvbGxlY3Rpb25zIGFyZSBhbHdheXMgcmV0dXJuZWQgaW50YWN0KS5cbiAgICAgKi9cbiAgICBnZXQoa2V5LCBrZWVwU2NhbGFyKSB7XG4gICAgICAgIHJldHVybiBpc0NvbGxlY3Rpb24odGhpcy5jb250ZW50cylcbiAgICAgICAgICAgID8gdGhpcy5jb250ZW50cy5nZXQoa2V5LCBrZWVwU2NhbGFyKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaXRlbSBhdCBgcGF0aGAsIG9yIGB1bmRlZmluZWRgIGlmIG5vdCBmb3VuZC4gQnkgZGVmYXVsdCB1bndyYXBzXG4gICAgICogc2NhbGFyIHZhbHVlcyBmcm9tIHRoZWlyIHN1cnJvdW5kaW5nIG5vZGU7IHRvIGRpc2FibGUgc2V0IGBrZWVwU2NhbGFyYCB0b1xuICAgICAqIGB0cnVlYCAoY29sbGVjdGlvbnMgYXJlIGFsd2F5cyByZXR1cm5lZCBpbnRhY3QpLlxuICAgICAqL1xuICAgIGdldEluKHBhdGgsIGtlZXBTY2FsYXIpIHtcbiAgICAgICAgaWYgKGlzRW1wdHlQYXRoKHBhdGgpKVxuICAgICAgICAgICAgcmV0dXJuICFrZWVwU2NhbGFyICYmIGlzU2NhbGFyKHRoaXMuY29udGVudHMpXG4gICAgICAgICAgICAgICAgPyB0aGlzLmNvbnRlbnRzLnZhbHVlXG4gICAgICAgICAgICAgICAgOiB0aGlzLmNvbnRlbnRzO1xuICAgICAgICByZXR1cm4gaXNDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpXG4gICAgICAgICAgICA/IHRoaXMuY29udGVudHMuZ2V0SW4ocGF0aCwga2VlcFNjYWxhcilcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGRvY3VtZW50IGluY2x1ZGVzIGEgdmFsdWUgd2l0aCB0aGUga2V5IGBrZXlgLlxuICAgICAqL1xuICAgIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIGlzQ29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKSA/IHRoaXMuY29udGVudHMuaGFzKGtleSkgOiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBkb2N1bWVudCBpbmNsdWRlcyBhIHZhbHVlIGF0IGBwYXRoYC5cbiAgICAgKi9cbiAgICBoYXNJbihwYXRoKSB7XG4gICAgICAgIGlmIChpc0VtcHR5UGF0aChwYXRoKSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRzICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBpc0NvbGxlY3Rpb24odGhpcy5jb250ZW50cykgPyB0aGlzLmNvbnRlbnRzLmhhc0luKHBhdGgpIDogZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYSB2YWx1ZSBpbiB0aGlzIGRvY3VtZW50LiBGb3IgYCEhc2V0YCwgYHZhbHVlYCBuZWVkcyB0byBiZSBhXG4gICAgICogYm9vbGVhbiB0byBhZGQvcmVtb3ZlIHRoZSBpdGVtIGZyb20gdGhlIHNldC5cbiAgICAgKi9cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5jb250ZW50cyA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFdlIGNhbid0IHJlYWxseSBrbm93IHRoYXQgdGhpcyBtYXRjaGVzIENvbnRlbnRzLlxuICAgICAgICAgICAgdGhpcy5jb250ZW50cyA9IGNvbGxlY3Rpb25Gcm9tUGF0aCh0aGlzLnNjaGVtYSwgW2tleV0sIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhc3NlcnRDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdmFsdWUgaW4gdGhpcyBkb2N1bWVudC4gRm9yIGAhIXNldGAsIGB2YWx1ZWAgbmVlZHMgdG8gYmUgYVxuICAgICAqIGJvb2xlYW4gdG8gYWRkL3JlbW92ZSB0aGUgaXRlbSBmcm9tIHRoZSBzZXQuXG4gICAgICovXG4gICAgc2V0SW4ocGF0aCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzRW1wdHlQYXRoKHBhdGgpKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFdlIGNhbid0IHJlYWxseSBrbm93IHRoYXQgdGhpcyBtYXRjaGVzIENvbnRlbnRzLlxuICAgICAgICAgICAgdGhpcy5jb250ZW50cyA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuY29udGVudHMgPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBjYW4ndCByZWFsbHkga25vdyB0aGF0IHRoaXMgbWF0Y2hlcyBDb250ZW50cy5cbiAgICAgICAgICAgIHRoaXMuY29udGVudHMgPSBjb2xsZWN0aW9uRnJvbVBhdGgodGhpcy5zY2hlbWEsIEFycmF5LmZyb20ocGF0aCksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhc3NlcnRDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRzLnNldEluKHBhdGgsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGFuZ2UgdGhlIFlBTUwgdmVyc2lvbiBhbmQgc2NoZW1hIHVzZWQgYnkgdGhlIGRvY3VtZW50LlxuICAgICAqIEEgYG51bGxgIHZlcnNpb24gZGlzYWJsZXMgc3VwcG9ydCBmb3IgZGlyZWN0aXZlcywgZXhwbGljaXQgdGFncywgYW5jaG9ycywgYW5kIGFsaWFzZXMuXG4gICAgICogSXQgYWxzbyByZXF1aXJlcyB0aGUgYHNjaGVtYWAgb3B0aW9uIHRvIGJlIGdpdmVuIGFzIGEgYFNjaGVtYWAgaW5zdGFuY2UgdmFsdWUuXG4gICAgICpcbiAgICAgKiBPdmVycmlkZXMgYWxsIHByZXZpb3VzbHkgc2V0IHNjaGVtYSBvcHRpb25zLlxuICAgICAqL1xuICAgIHNldFNjaGVtYSh2ZXJzaW9uLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2ZXJzaW9uID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgIHZlcnNpb24gPSBTdHJpbmcodmVyc2lvbik7XG4gICAgICAgIGxldCBvcHQ7XG4gICAgICAgIHN3aXRjaCAodmVyc2lvbikge1xuICAgICAgICAgICAgY2FzZSAnMS4xJzpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kaXJlY3RpdmVzKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGl2ZXMueWFtbC52ZXJzaW9uID0gJzEuMSc7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBuZXcgRGlyZWN0aXZlcyh7IHZlcnNpb246ICcxLjEnIH0pO1xuICAgICAgICAgICAgICAgIG9wdCA9IHsgcmVzb2x2ZUtub3duVGFnczogZmFsc2UsIHNjaGVtYTogJ3lhbWwtMS4xJyB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnMS4yJzpcbiAgICAgICAgICAgIGNhc2UgJ25leHQnOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGl2ZXMpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aXZlcy55YW1sLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gbmV3IERpcmVjdGl2ZXMoeyB2ZXJzaW9uIH0pO1xuICAgICAgICAgICAgICAgIG9wdCA9IHsgcmVzb2x2ZUtub3duVGFnczogdHJ1ZSwgc2NoZW1hOiAnY29yZScgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kaXJlY3RpdmVzKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5kaXJlY3RpdmVzO1xuICAgICAgICAgICAgICAgIG9wdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3YgPSBKU09OLnN0cmluZ2lmeSh2ZXJzaW9uKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICcxLjEnLCAnMS4yJyBvciBudWxsIGFzIGZpcnN0IGFyZ3VtZW50LCBidXQgZm91bmQ6ICR7c3Z9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm90IHVzaW5nIGBpbnN0YW5jZW9mIFNjaGVtYWAgdG8gYWxsb3cgZm9yIGR1Y2sgdHlwaW5nXG4gICAgICAgIGlmIChvcHRpb25zLnNjaGVtYSBpbnN0YW5jZW9mIE9iamVjdClcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hID0gb3B0aW9ucy5zY2hlbWE7XG4gICAgICAgIGVsc2UgaWYgKG9wdClcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hID0gbmV3IFNjaGVtYShPYmplY3QuYXNzaWduKG9wdCwgb3B0aW9ucykpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFdpdGggYSBudWxsIFlBTUwgdmVyc2lvbiwgdGhlIHsgc2NoZW1hOiBTY2hlbWEgfSBvcHRpb24gaXMgcmVxdWlyZWRgKTtcbiAgICB9XG4gICAgLy8ganNvbiAmIGpzb25BcmcgYXJlIG9ubHkgdXNlZCBmcm9tIHRvSlNPTigpXG4gICAgdG9KUyh7IGpzb24sIGpzb25BcmcsIG1hcEFzTWFwLCBtYXhBbGlhc0NvdW50LCBvbkFuY2hvciwgcmV2aXZlciB9ID0ge30pIHtcbiAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgYW5jaG9yczogbmV3IE1hcCgpLFxuICAgICAgICAgICAgZG9jOiB0aGlzLFxuICAgICAgICAgICAga2VlcDogIWpzb24sXG4gICAgICAgICAgICBtYXBBc01hcDogbWFwQXNNYXAgPT09IHRydWUsXG4gICAgICAgICAgICBtYXBLZXlXYXJuZWQ6IGZhbHNlLFxuICAgICAgICAgICAgbWF4QWxpYXNDb3VudDogdHlwZW9mIG1heEFsaWFzQ291bnQgPT09ICdudW1iZXInID8gbWF4QWxpYXNDb3VudCA6IDEwMFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXMgPSB0b0pTKHRoaXMuY29udGVudHMsIGpzb25BcmcgPz8gJycsIGN0eCk7XG4gICAgICAgIGlmICh0eXBlb2Ygb25BbmNob3IgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHsgY291bnQsIHJlcyB9IG9mIGN0eC5hbmNob3JzLnZhbHVlcygpKVxuICAgICAgICAgICAgICAgIG9uQW5jaG9yKHJlcywgY291bnQpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIHJldml2ZXIgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gYXBwbHlSZXZpdmVyKHJldml2ZXIsIHsgJyc6IHJlcyB9LCAnJywgcmVzKVxuICAgICAgICAgICAgOiByZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgZG9jdW1lbnQgYGNvbnRlbnRzYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBqc29uQXJnIFVzZWQgYnkgYEpTT04uc3RyaW5naWZ5YCB0byBpbmRpY2F0ZSB0aGUgYXJyYXkgaW5kZXggb3JcbiAgICAgKiAgIHByb3BlcnR5IG5hbWUuXG4gICAgICovXG4gICAgdG9KU09OKGpzb25BcmcsIG9uQW5jaG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvSlMoeyBqc29uOiB0cnVlLCBqc29uQXJnLCBtYXBBc01hcDogZmFsc2UsIG9uQW5jaG9yIH0pO1xuICAgIH1cbiAgICAvKiogQSBZQU1MIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBkb2N1bWVudC4gKi9cbiAgICB0b1N0cmluZyhvcHRpb25zID0ge30pIHtcbiAgICAgICAgaWYgKHRoaXMuZXJyb3JzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RvY3VtZW50IHdpdGggZXJyb3JzIGNhbm5vdCBiZSBzdHJpbmdpZmllZCcpO1xuICAgICAgICBpZiAoJ2luZGVudCcgaW4gb3B0aW9ucyAmJlxuICAgICAgICAgICAgKCFOdW1iZXIuaXNJbnRlZ2VyKG9wdGlvbnMuaW5kZW50KSB8fCBOdW1iZXIob3B0aW9ucy5pbmRlbnQpIDw9IDApKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5pbmRlbnQpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBcImluZGVudFwiIG9wdGlvbiBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciwgbm90ICR7c31gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyaW5naWZ5RG9jdW1lbnQodGhpcywgb3B0aW9ucyk7XG4gICAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0Q29sbGVjdGlvbihjb250ZW50cykge1xuICAgIGlmIChpc0NvbGxlY3Rpb24oY29udGVudHMpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGEgWUFNTCBjb2xsZWN0aW9uIGFzIGRvY3VtZW50IGNvbnRlbnRzJyk7XG59XG5cbmV4cG9ydCB7IERvY3VtZW50IH07XG4iLCJpbXBvcnQgeyBpc05vZGUgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBjcmVhdGVTdHJpbmdpZnlDb250ZXh0LCBzdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5pbXBvcnQgeyBpbmRlbnRDb21tZW50LCBsaW5lQ29tbWVudCB9IGZyb20gJy4vc3RyaW5naWZ5Q29tbWVudC5qcyc7XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeURvY3VtZW50KGRvYywgb3B0aW9ucykge1xuICAgIGNvbnN0IGxpbmVzID0gW107XG4gICAgbGV0IGhhc0RpcmVjdGl2ZXMgPSBvcHRpb25zLmRpcmVjdGl2ZXMgPT09IHRydWU7XG4gICAgaWYgKG9wdGlvbnMuZGlyZWN0aXZlcyAhPT0gZmFsc2UgJiYgZG9jLmRpcmVjdGl2ZXMpIHtcbiAgICAgICAgY29uc3QgZGlyID0gZG9jLmRpcmVjdGl2ZXMudG9TdHJpbmcoZG9jKTtcbiAgICAgICAgaWYgKGRpcikge1xuICAgICAgICAgICAgbGluZXMucHVzaChkaXIpO1xuICAgICAgICAgICAgaGFzRGlyZWN0aXZlcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZG9jLmRpcmVjdGl2ZXMuZG9jU3RhcnQpXG4gICAgICAgICAgICBoYXNEaXJlY3RpdmVzID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGhhc0RpcmVjdGl2ZXMpXG4gICAgICAgIGxpbmVzLnB1c2goJy0tLScpO1xuICAgIGNvbnN0IGN0eCA9IGNyZWF0ZVN0cmluZ2lmeUNvbnRleHQoZG9jLCBvcHRpb25zKTtcbiAgICBjb25zdCB7IGNvbW1lbnRTdHJpbmcgfSA9IGN0eC5vcHRpb25zO1xuICAgIGlmIChkb2MuY29tbWVudEJlZm9yZSkge1xuICAgICAgICBpZiAobGluZXMubGVuZ3RoICE9PSAxKVxuICAgICAgICAgICAgbGluZXMudW5zaGlmdCgnJyk7XG4gICAgICAgIGNvbnN0IGNzID0gY29tbWVudFN0cmluZyhkb2MuY29tbWVudEJlZm9yZSk7XG4gICAgICAgIGxpbmVzLnVuc2hpZnQoaW5kZW50Q29tbWVudChjcywgJycpKTtcbiAgICB9XG4gICAgbGV0IGNob21wS2VlcCA9IGZhbHNlO1xuICAgIGxldCBjb250ZW50Q29tbWVudCA9IG51bGw7XG4gICAgaWYgKGRvYy5jb250ZW50cykge1xuICAgICAgICBpZiAoaXNOb2RlKGRvYy5jb250ZW50cykpIHtcbiAgICAgICAgICAgIGlmIChkb2MuY29udGVudHMuc3BhY2VCZWZvcmUgJiYgaGFzRGlyZWN0aXZlcylcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKCcnKTtcbiAgICAgICAgICAgIGlmIChkb2MuY29udGVudHMuY29tbWVudEJlZm9yZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNzID0gY29tbWVudFN0cmluZyhkb2MuY29udGVudHMuY29tbWVudEJlZm9yZSk7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaChpbmRlbnRDb21tZW50KGNzLCAnJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdG9wLWxldmVsIGJsb2NrIHNjYWxhcnMgbmVlZCB0byBiZSBpbmRlbnRlZCBpZiBmb2xsb3dlZCBieSBhIGNvbW1lbnRcbiAgICAgICAgICAgIGN0eC5mb3JjZUJsb2NrSW5kZW50ID0gISFkb2MuY29tbWVudDtcbiAgICAgICAgICAgIGNvbnRlbnRDb21tZW50ID0gZG9jLmNvbnRlbnRzLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb25DaG9tcEtlZXAgPSBjb250ZW50Q29tbWVudCA/IHVuZGVmaW5lZCA6ICgpID0+IChjaG9tcEtlZXAgPSB0cnVlKTtcbiAgICAgICAgbGV0IGJvZHkgPSBzdHJpbmdpZnkoZG9jLmNvbnRlbnRzLCBjdHgsICgpID0+IChjb250ZW50Q29tbWVudCA9IG51bGwpLCBvbkNob21wS2VlcCk7XG4gICAgICAgIGlmIChjb250ZW50Q29tbWVudClcbiAgICAgICAgICAgIGJvZHkgKz0gbGluZUNvbW1lbnQoYm9keSwgJycsIGNvbW1lbnRTdHJpbmcoY29udGVudENvbW1lbnQpKTtcbiAgICAgICAgaWYgKChib2R5WzBdID09PSAnfCcgfHwgYm9keVswXSA9PT0gJz4nKSAmJlxuICAgICAgICAgICAgbGluZXNbbGluZXMubGVuZ3RoIC0gMV0gPT09ICctLS0nKSB7XG4gICAgICAgICAgICAvLyBUb3AtbGV2ZWwgYmxvY2sgc2NhbGFycyB3aXRoIGEgcHJlY2VkaW5nIGRvYyBtYXJrZXIgb3VnaHQgdG8gdXNlIHRoZVxuICAgICAgICAgICAgLy8gc2FtZSBsaW5lIGZvciB0aGVpciBoZWFkZXIuXG4gICAgICAgICAgICBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXSA9IGAtLS0gJHtib2R5fWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbGluZXMucHVzaChib2R5KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxpbmVzLnB1c2goc3RyaW5naWZ5KGRvYy5jb250ZW50cywgY3R4KSk7XG4gICAgfVxuICAgIGlmIChkb2MuZGlyZWN0aXZlcz8uZG9jRW5kKSB7XG4gICAgICAgIGlmIChkb2MuY29tbWVudCkge1xuICAgICAgICAgICAgY29uc3QgY3MgPSBjb21tZW50U3RyaW5nKGRvYy5jb21tZW50KTtcbiAgICAgICAgICAgIGlmIChjcy5pbmNsdWRlcygnXFxuJykpIHtcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKCcuLi4nKTtcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKGluZGVudENvbW1lbnQoY3MsICcnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKGAuLi4gJHtjc31gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goJy4uLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgZGMgPSBkb2MuY29tbWVudDtcbiAgICAgICAgaWYgKGRjICYmIGNob21wS2VlcClcbiAgICAgICAgICAgIGRjID0gZGMucmVwbGFjZSgvXlxcbisvLCAnJyk7XG4gICAgICAgIGlmIChkYykge1xuICAgICAgICAgICAgaWYgKCghY2hvbXBLZWVwIHx8IGNvbnRlbnRDb21tZW50KSAmJiBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXSAhPT0gJycpXG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCgnJyk7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGluZGVudENvbW1lbnQoY29tbWVudFN0cmluZyhkYyksICcnKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxpbmVzLmpvaW4oJ1xcbicpICsgJ1xcbic7XG59XG5cbmV4cG9ydCB7IHN0cmluZ2lmeURvY3VtZW50IH07XG4iLCJjbGFzcyBZQU1MRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgcG9zLCBjb2RlLCBtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIHRoaXMucG9zID0gcG9zO1xuICAgIH1cbn1cbmNsYXNzIFlBTUxQYXJzZUVycm9yIGV4dGVuZHMgWUFNTEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3MsIGNvZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIoJ1lBTUxQYXJzZUVycm9yJywgcG9zLCBjb2RlLCBtZXNzYWdlKTtcbiAgICB9XG59XG5jbGFzcyBZQU1MV2FybmluZyBleHRlbmRzIFlBTUxFcnJvciB7XG4gICAgY29uc3RydWN0b3IocG9zLCBjb2RlLCBtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKCdZQU1MV2FybmluZycsIHBvcywgY29kZSwgbWVzc2FnZSk7XG4gICAgfVxufVxuY29uc3QgcHJldHRpZnlFcnJvciA9IChzcmMsIGxjKSA9PiAoZXJyb3IpID0+IHtcbiAgICBpZiAoZXJyb3IucG9zWzBdID09PSAtMSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGVycm9yLmxpbmVQb3MgPSBlcnJvci5wb3MubWFwKHBvcyA9PiBsYy5saW5lUG9zKHBvcykpO1xuICAgIGNvbnN0IHsgbGluZSwgY29sIH0gPSBlcnJvci5saW5lUG9zWzBdO1xuICAgIGVycm9yLm1lc3NhZ2UgKz0gYCBhdCBsaW5lICR7bGluZX0sIGNvbHVtbiAke2NvbH1gO1xuICAgIGxldCBjaSA9IGNvbCAtIDE7XG4gICAgbGV0IGxpbmVTdHIgPSBzcmNcbiAgICAgICAgLnN1YnN0cmluZyhsYy5saW5lU3RhcnRzW2xpbmUgLSAxXSwgbGMubGluZVN0YXJ0c1tsaW5lXSlcbiAgICAgICAgLnJlcGxhY2UoL1tcXG5cXHJdKyQvLCAnJyk7XG4gICAgLy8gVHJpbSB0byBtYXggODAgY2hhcnMsIGtlZXBpbmcgY29sIHBvc2l0aW9uIG5lYXIgdGhlIG1pZGRsZVxuICAgIGlmIChjaSA+PSA2MCAmJiBsaW5lU3RyLmxlbmd0aCA+IDgwKSB7XG4gICAgICAgIGNvbnN0IHRyaW1TdGFydCA9IE1hdGgubWluKGNpIC0gMzksIGxpbmVTdHIubGVuZ3RoIC0gNzkpO1xuICAgICAgICBsaW5lU3RyID0gJ+KApicgKyBsaW5lU3RyLnN1YnN0cmluZyh0cmltU3RhcnQpO1xuICAgICAgICBjaSAtPSB0cmltU3RhcnQgLSAxO1xuICAgIH1cbiAgICBpZiAobGluZVN0ci5sZW5ndGggPiA4MClcbiAgICAgICAgbGluZVN0ciA9IGxpbmVTdHIuc3Vic3RyaW5nKDAsIDc5KSArICfigKYnO1xuICAgIC8vIEluY2x1ZGUgcHJldmlvdXMgbGluZSBpbiBjb250ZXh0IGlmIHBvaW50aW5nIGF0IGxpbmUgc3RhcnRcbiAgICBpZiAobGluZSA+IDEgJiYgL14gKiQvLnRlc3QobGluZVN0ci5zdWJzdHJpbmcoMCwgY2kpKSkge1xuICAgICAgICAvLyBSZWdleHAgd29uJ3QgbWF0Y2ggaWYgc3RhcnQgaXMgdHJpbW1lZFxuICAgICAgICBsZXQgcHJldiA9IHNyYy5zdWJzdHJpbmcobGMubGluZVN0YXJ0c1tsaW5lIC0gMl0sIGxjLmxpbmVTdGFydHNbbGluZSAtIDFdKTtcbiAgICAgICAgaWYgKHByZXYubGVuZ3RoID4gODApXG4gICAgICAgICAgICBwcmV2ID0gcHJldi5zdWJzdHJpbmcoMCwgNzkpICsgJ+KAplxcbic7XG4gICAgICAgIGxpbmVTdHIgPSBwcmV2ICsgbGluZVN0cjtcbiAgICB9XG4gICAgaWYgKC9bXiBdLy50ZXN0KGxpbmVTdHIpKSB7XG4gICAgICAgIGxldCBjb3VudCA9IDE7XG4gICAgICAgIGNvbnN0IGVuZCA9IGVycm9yLmxpbmVQb3NbMV07XG4gICAgICAgIGlmIChlbmQgJiYgZW5kLmxpbmUgPT09IGxpbmUgJiYgZW5kLmNvbCA+IGNvbCkge1xuICAgICAgICAgICAgY291bnQgPSBNYXRoLm1heCgxLCBNYXRoLm1pbihlbmQuY29sIC0gY29sLCA4MCAtIGNpKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcG9pbnRlciA9ICcgJy5yZXBlYXQoY2kpICsgJ14nLnJlcGVhdChjb3VudCk7XG4gICAgICAgIGVycm9yLm1lc3NhZ2UgKz0gYDpcXG5cXG4ke2xpbmVTdHJ9XFxuJHtwb2ludGVyfVxcbmA7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgWUFNTEVycm9yLCBZQU1MUGFyc2VFcnJvciwgWUFNTFdhcm5pbmcsIHByZXR0aWZ5RXJyb3IgfTtcbiIsImZ1bmN0aW9uIHJlc29sdmVQcm9wcyh0b2tlbnMsIHsgZmxvdywgaW5kaWNhdG9yLCBuZXh0LCBvZmZzZXQsIG9uRXJyb3IsIHBhcmVudEluZGVudCwgc3RhcnRPbk5ld2xpbmUgfSkge1xuICAgIGxldCBzcGFjZUJlZm9yZSA9IGZhbHNlO1xuICAgIGxldCBhdE5ld2xpbmUgPSBzdGFydE9uTmV3bGluZTtcbiAgICBsZXQgaGFzU3BhY2UgPSBzdGFydE9uTmV3bGluZTtcbiAgICBsZXQgY29tbWVudCA9ICcnO1xuICAgIGxldCBjb21tZW50U2VwID0gJyc7XG4gICAgbGV0IGhhc05ld2xpbmUgPSBmYWxzZTtcbiAgICBsZXQgcmVxU3BhY2UgPSBmYWxzZTtcbiAgICBsZXQgdGFiID0gbnVsbDtcbiAgICBsZXQgYW5jaG9yID0gbnVsbDtcbiAgICBsZXQgdGFnID0gbnVsbDtcbiAgICBsZXQgbmV3bGluZUFmdGVyUHJvcCA9IG51bGw7XG4gICAgbGV0IGNvbW1hID0gbnVsbDtcbiAgICBsZXQgZm91bmQgPSBudWxsO1xuICAgIGxldCBzdGFydCA9IG51bGw7XG4gICAgZm9yIChjb25zdCB0b2tlbiBvZiB0b2tlbnMpIHtcbiAgICAgICAgaWYgKHJlcVNwYWNlKSB7XG4gICAgICAgICAgICBpZiAodG9rZW4udHlwZSAhPT0gJ3NwYWNlJyAmJlxuICAgICAgICAgICAgICAgIHRva2VuLnR5cGUgIT09ICduZXdsaW5lJyAmJlxuICAgICAgICAgICAgICAgIHRva2VuLnR5cGUgIT09ICdjb21tYScpXG4gICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbi5vZmZzZXQsICdNSVNTSU5HX0NIQVInLCAnVGFncyBhbmQgYW5jaG9ycyBtdXN0IGJlIHNlcGFyYXRlZCBmcm9tIHRoZSBuZXh0IHRva2VuIGJ5IHdoaXRlIHNwYWNlJyk7XG4gICAgICAgICAgICByZXFTcGFjZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWIpIHtcbiAgICAgICAgICAgIGlmIChhdE5ld2xpbmUgJiYgdG9rZW4udHlwZSAhPT0gJ2NvbW1lbnQnICYmIHRva2VuLnR5cGUgIT09ICduZXdsaW5lJykge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IodGFiLCAnVEFCX0FTX0lOREVOVCcsICdUYWJzIGFyZSBub3QgYWxsb3dlZCBhcyBpbmRlbnRhdGlvbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFiID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICAvLyBBdCB0aGUgZG9jIGxldmVsLCB0YWJzIGF0IGxpbmUgc3RhcnQgbWF5IGJlIHBhcnNlZFxuICAgICAgICAgICAgICAgIC8vIGFzIGxlYWRpbmcgd2hpdGUgc3BhY2UgcmF0aGVyIHRoYW4gaW5kZW50YXRpb24uXG4gICAgICAgICAgICAgICAgLy8gSW4gYSBmbG93IGNvbGxlY3Rpb24sIG9ubHkgdGhlIHBhcnNlciBoYW5kbGVzIGluZGVudC5cbiAgICAgICAgICAgICAgICBpZiAoIWZsb3cgJiZcbiAgICAgICAgICAgICAgICAgICAgKGluZGljYXRvciAhPT0gJ2RvYy1zdGFydCcgfHwgbmV4dD8udHlwZSAhPT0gJ2Zsb3ctY29sbGVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgICAgIHRva2VuLnNvdXJjZS5pbmNsdWRlcygnXFx0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFiID0gdG9rZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhhc1NwYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOiB7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNTcGFjZSlcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ01JU1NJTkdfQ0hBUicsICdDb21tZW50cyBtdXN0IGJlIHNlcGFyYXRlZCBmcm9tIG90aGVyIHRva2VucyBieSB3aGl0ZSBzcGFjZSBjaGFyYWN0ZXJzJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2IgPSB0b2tlbi5zb3VyY2Uuc3Vic3RyaW5nKDEpIHx8ICcgJztcbiAgICAgICAgICAgICAgICBpZiAoIWNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnQgPSBjYjtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnQgKz0gY29tbWVudFNlcCArIGNiO1xuICAgICAgICAgICAgICAgIGNvbW1lbnRTZXAgPSAnJztcbiAgICAgICAgICAgICAgICBhdE5ld2xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIGlmIChhdE5ld2xpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50ICs9IHRva2VuLnNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIWZvdW5kIHx8IGluZGljYXRvciAhPT0gJ3NlcS1pdGVtLWluZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFjZUJlZm9yZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudFNlcCArPSB0b2tlbi5zb3VyY2U7XG4gICAgICAgICAgICAgICAgYXROZXdsaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBoYXNOZXdsaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yIHx8IHRhZylcbiAgICAgICAgICAgICAgICAgICAgbmV3bGluZUFmdGVyUHJvcCA9IHRva2VuO1xuICAgICAgICAgICAgICAgIGhhc1NwYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2FuY2hvcic6XG4gICAgICAgICAgICAgICAgaWYgKGFuY2hvcilcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ01VTFRJUExFX0FOQ0hPUlMnLCAnQSBub2RlIGNhbiBoYXZlIGF0IG1vc3Qgb25lIGFuY2hvcicpO1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbi5zb3VyY2UuZW5kc1dpdGgoJzonKSlcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbi5vZmZzZXQgKyB0b2tlbi5zb3VyY2UubGVuZ3RoIC0gMSwgJ0JBRF9BTElBUycsICdBbmNob3IgZW5kaW5nIGluIDogaXMgYW1iaWd1b3VzJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYW5jaG9yID0gdG9rZW47XG4gICAgICAgICAgICAgICAgc3RhcnQgPz8gKHN0YXJ0ID0gdG9rZW4ub2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBhdE5ld2xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJlcVNwYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RhZyc6IHtcbiAgICAgICAgICAgICAgICBpZiAodGFnKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnTVVMVElQTEVfVEFHUycsICdBIG5vZGUgY2FuIGhhdmUgYXQgbW9zdCBvbmUgdGFnJyk7XG4gICAgICAgICAgICAgICAgdGFnID0gdG9rZW47XG4gICAgICAgICAgICAgICAgc3RhcnQgPz8gKHN0YXJ0ID0gdG9rZW4ub2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBhdE5ld2xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJlcVNwYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgaW5kaWNhdG9yOlxuICAgICAgICAgICAgICAgIC8vIENvdWxkIGhlcmUgaGFuZGxlIHByZWNlZGluZyBjb21tZW50cyBkaWZmZXJlbnRseVxuICAgICAgICAgICAgICAgIGlmIChhbmNob3IgfHwgdGFnKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnQkFEX1BST1BfT1JERVInLCBgQW5jaG9ycyBhbmQgdGFncyBtdXN0IGJlIGFmdGVyIHRoZSAke3Rva2VuLnNvdXJjZX0gaW5kaWNhdG9yYCk7XG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbmV4cGVjdGVkICR7dG9rZW4uc291cmNlfSBpbiAke2Zsb3cgPz8gJ2NvbGxlY3Rpb24nfWApO1xuICAgICAgICAgICAgICAgIGZvdW5kID0gdG9rZW47XG4gICAgICAgICAgICAgICAgYXROZXdsaW5lID1cbiAgICAgICAgICAgICAgICAgICAgaW5kaWNhdG9yID09PSAnc2VxLWl0ZW0taW5kJyB8fCBpbmRpY2F0b3IgPT09ICdleHBsaWNpdC1rZXktaW5kJztcbiAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY29tbWEnOlxuICAgICAgICAgICAgICAgIGlmIChmbG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21tYSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdVTkVYUEVDVEVEX1RPS0VOJywgYFVuZXhwZWN0ZWQgLCBpbiAke2Zsb3d9YCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGF0TmV3bGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlbHNlIGZhbGx0aHJvdWdoXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdVTkVYUEVDVEVEX1RPS0VOJywgYFVuZXhwZWN0ZWQgJHt0b2tlbi50eXBlfSB0b2tlbmApO1xuICAgICAgICAgICAgICAgIGF0TmV3bGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGhhc1NwYWNlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbGFzdCA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgZW5kID0gbGFzdCA/IGxhc3Qub2Zmc2V0ICsgbGFzdC5zb3VyY2UubGVuZ3RoIDogb2Zmc2V0O1xuICAgIGlmIChyZXFTcGFjZSAmJlxuICAgICAgICBuZXh0ICYmXG4gICAgICAgIG5leHQudHlwZSAhPT0gJ3NwYWNlJyAmJlxuICAgICAgICBuZXh0LnR5cGUgIT09ICduZXdsaW5lJyAmJlxuICAgICAgICBuZXh0LnR5cGUgIT09ICdjb21tYScgJiZcbiAgICAgICAgKG5leHQudHlwZSAhPT0gJ3NjYWxhcicgfHwgbmV4dC5zb3VyY2UgIT09ICcnKSkge1xuICAgICAgICBvbkVycm9yKG5leHQub2Zmc2V0LCAnTUlTU0lOR19DSEFSJywgJ1RhZ3MgYW5kIGFuY2hvcnMgbXVzdCBiZSBzZXBhcmF0ZWQgZnJvbSB0aGUgbmV4dCB0b2tlbiBieSB3aGl0ZSBzcGFjZScpO1xuICAgIH1cbiAgICBpZiAodGFiICYmXG4gICAgICAgICgoYXROZXdsaW5lICYmIHRhYi5pbmRlbnQgPD0gcGFyZW50SW5kZW50KSB8fFxuICAgICAgICAgICAgbmV4dD8udHlwZSA9PT0gJ2Jsb2NrLW1hcCcgfHxcbiAgICAgICAgICAgIG5leHQ/LnR5cGUgPT09ICdibG9jay1zZXEnKSlcbiAgICAgICAgb25FcnJvcih0YWIsICdUQUJfQVNfSU5ERU5UJywgJ1RhYnMgYXJlIG5vdCBhbGxvd2VkIGFzIGluZGVudGF0aW9uJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29tbWEsXG4gICAgICAgIGZvdW5kLFxuICAgICAgICBzcGFjZUJlZm9yZSxcbiAgICAgICAgY29tbWVudCxcbiAgICAgICAgaGFzTmV3bGluZSxcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICB0YWcsXG4gICAgICAgIG5ld2xpbmVBZnRlclByb3AsXG4gICAgICAgIGVuZCxcbiAgICAgICAgc3RhcnQ6IHN0YXJ0ID8/IGVuZFxuICAgIH07XG59XG5cbmV4cG9ydCB7IHJlc29sdmVQcm9wcyB9O1xuIiwiZnVuY3Rpb24gY29udGFpbnNOZXdsaW5lKGtleSkge1xuICAgIGlmICgha2V5KVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBzd2l0Y2ggKGtleS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2FsaWFzJzpcbiAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICBpZiAoa2V5LnNvdXJjZS5pbmNsdWRlcygnXFxuJykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZiAoa2V5LmVuZClcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIGtleS5lbmQpXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdC50eXBlID09PSAnbmV3bGluZScpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY2FzZSAnZmxvdy1jb2xsZWN0aW9uJzpcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXQgb2Yga2V5Lml0ZW1zKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdCBvZiBpdC5zdGFydClcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0LnR5cGUgPT09ICduZXdsaW5lJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChpdC5zZXApXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3Qgb2YgaXQuc2VwKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0LnR5cGUgPT09ICduZXdsaW5lJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoY29udGFpbnNOZXdsaW5lKGl0LmtleSkgfHwgY29udGFpbnNOZXdsaW5lKGl0LnZhbHVlKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IGNvbnRhaW5zTmV3bGluZSB9O1xuIiwiaW1wb3J0IHsgY29udGFpbnNOZXdsaW5lIH0gZnJvbSAnLi91dGlsLWNvbnRhaW5zLW5ld2xpbmUuanMnO1xuXG5mdW5jdGlvbiBmbG93SW5kZW50Q2hlY2soaW5kZW50LCBmYywgb25FcnJvcikge1xuICAgIGlmIChmYz8udHlwZSA9PT0gJ2Zsb3ctY29sbGVjdGlvbicpIHtcbiAgICAgICAgY29uc3QgZW5kID0gZmMuZW5kWzBdO1xuICAgICAgICBpZiAoZW5kLmluZGVudCA9PT0gaW5kZW50ICYmXG4gICAgICAgICAgICAoZW5kLnNvdXJjZSA9PT0gJ10nIHx8IGVuZC5zb3VyY2UgPT09ICd9JykgJiZcbiAgICAgICAgICAgIGNvbnRhaW5zTmV3bGluZShmYykpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9ICdGbG93IGVuZCBpbmRpY2F0b3Igc2hvdWxkIGJlIG1vcmUgaW5kZW50ZWQgdGhhbiBwYXJlbnQnO1xuICAgICAgICAgICAgb25FcnJvcihlbmQsICdCQURfSU5ERU5UJywgbXNnLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgZmxvd0luZGVudENoZWNrIH07XG4iLCJpbXBvcnQgeyBpc1NjYWxhciB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcblxuZnVuY3Rpb24gbWFwSW5jbHVkZXMoY3R4LCBpdGVtcywgc2VhcmNoKSB7XG4gICAgY29uc3QgeyB1bmlxdWVLZXlzIH0gPSBjdHgub3B0aW9ucztcbiAgICBpZiAodW5pcXVlS2V5cyA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBpc0VxdWFsID0gdHlwZW9mIHVuaXF1ZUtleXMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB1bmlxdWVLZXlzXG4gICAgICAgIDogKGEsIGIpID0+IGEgPT09IGIgfHwgKGlzU2NhbGFyKGEpICYmIGlzU2NhbGFyKGIpICYmIGEudmFsdWUgPT09IGIudmFsdWUpO1xuICAgIHJldHVybiBpdGVtcy5zb21lKHBhaXIgPT4gaXNFcXVhbChwYWlyLmtleSwgc2VhcmNoKSk7XG59XG5cbmV4cG9ydCB7IG1hcEluY2x1ZGVzIH07XG4iLCJpbXBvcnQgeyBQYWlyIH0gZnJvbSAnLi4vbm9kZXMvUGFpci5qcyc7XG5pbXBvcnQgeyBZQU1MTWFwIH0gZnJvbSAnLi4vbm9kZXMvWUFNTE1hcC5qcyc7XG5pbXBvcnQgeyByZXNvbHZlUHJvcHMgfSBmcm9tICcuL3Jlc29sdmUtcHJvcHMuanMnO1xuaW1wb3J0IHsgY29udGFpbnNOZXdsaW5lIH0gZnJvbSAnLi91dGlsLWNvbnRhaW5zLW5ld2xpbmUuanMnO1xuaW1wb3J0IHsgZmxvd0luZGVudENoZWNrIH0gZnJvbSAnLi91dGlsLWZsb3ctaW5kZW50LWNoZWNrLmpzJztcbmltcG9ydCB7IG1hcEluY2x1ZGVzIH0gZnJvbSAnLi91dGlsLW1hcC1pbmNsdWRlcy5qcyc7XG5cbmNvbnN0IHN0YXJ0Q29sTXNnID0gJ0FsbCBtYXBwaW5nIGl0ZW1zIG11c3Qgc3RhcnQgYXQgdGhlIHNhbWUgY29sdW1uJztcbmZ1bmN0aW9uIHJlc29sdmVCbG9ja01hcCh7IGNvbXBvc2VOb2RlLCBjb21wb3NlRW1wdHlOb2RlIH0sIGN0eCwgYm0sIG9uRXJyb3IsIHRhZykge1xuICAgIGNvbnN0IE5vZGVDbGFzcyA9IHRhZz8ubm9kZUNsYXNzID8/IFlBTUxNYXA7XG4gICAgY29uc3QgbWFwID0gbmV3IE5vZGVDbGFzcyhjdHguc2NoZW1hKTtcbiAgICBpZiAoY3R4LmF0Um9vdClcbiAgICAgICAgY3R4LmF0Um9vdCA9IGZhbHNlO1xuICAgIGxldCBvZmZzZXQgPSBibS5vZmZzZXQ7XG4gICAgbGV0IGNvbW1lbnRFbmQgPSBudWxsO1xuICAgIGZvciAoY29uc3QgY29sbEl0ZW0gb2YgYm0uaXRlbXMpIHtcbiAgICAgICAgY29uc3QgeyBzdGFydCwga2V5LCBzZXAsIHZhbHVlIH0gPSBjb2xsSXRlbTtcbiAgICAgICAgLy8ga2V5IHByb3BlcnRpZXNcbiAgICAgICAgY29uc3Qga2V5UHJvcHMgPSByZXNvbHZlUHJvcHMoc3RhcnQsIHtcbiAgICAgICAgICAgIGluZGljYXRvcjogJ2V4cGxpY2l0LWtleS1pbmQnLFxuICAgICAgICAgICAgbmV4dDoga2V5ID8/IHNlcD8uWzBdLFxuICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgb25FcnJvcixcbiAgICAgICAgICAgIHBhcmVudEluZGVudDogYm0uaW5kZW50LFxuICAgICAgICAgICAgc3RhcnRPbk5ld2xpbmU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGltcGxpY2l0S2V5ID0gIWtleVByb3BzLmZvdW5kO1xuICAgICAgICBpZiAoaW1wbGljaXRLZXkpIHtcbiAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5LnR5cGUgPT09ICdibG9jay1zZXEnKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgJ0JMT0NLX0FTX0lNUExJQ0lUX0tFWScsICdBIGJsb2NrIHNlcXVlbmNlIG1heSBub3QgYmUgdXNlZCBhcyBhbiBpbXBsaWNpdCBtYXAga2V5Jyk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoJ2luZGVudCcgaW4ga2V5ICYmIGtleS5pbmRlbnQgIT09IGJtLmluZGVudClcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihvZmZzZXQsICdCQURfSU5ERU5UJywgc3RhcnRDb2xNc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFrZXlQcm9wcy5hbmNob3IgJiYgIWtleVByb3BzLnRhZyAmJiAhc2VwKSB7XG4gICAgICAgICAgICAgICAgY29tbWVudEVuZCA9IGtleVByb3BzLmVuZDtcbiAgICAgICAgICAgICAgICBpZiAoa2V5UHJvcHMuY29tbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFwLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuY29tbWVudCArPSAnXFxuJyArIGtleVByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5jb21tZW50ID0ga2V5UHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2V5UHJvcHMubmV3bGluZUFmdGVyUHJvcCB8fCBjb250YWluc05ld2xpbmUoa2V5KSkge1xuICAgICAgICAgICAgICAgIG9uRXJyb3Ioa2V5ID8/IHN0YXJ0W3N0YXJ0Lmxlbmd0aCAtIDFdLCAnTVVMVElMSU5FX0lNUExJQ0lUX0tFWScsICdJbXBsaWNpdCBrZXlzIG5lZWQgdG8gYmUgb24gYSBzaW5nbGUgbGluZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleVByb3BzLmZvdW5kPy5pbmRlbnQgIT09IGJtLmluZGVudCkge1xuICAgICAgICAgICAgb25FcnJvcihvZmZzZXQsICdCQURfSU5ERU5UJywgc3RhcnRDb2xNc2cpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGtleSB2YWx1ZVxuICAgICAgICBjdHguYXRLZXkgPSB0cnVlO1xuICAgICAgICBjb25zdCBrZXlTdGFydCA9IGtleVByb3BzLmVuZDtcbiAgICAgICAgY29uc3Qga2V5Tm9kZSA9IGtleVxuICAgICAgICAgICAgPyBjb21wb3NlTm9kZShjdHgsIGtleSwga2V5UHJvcHMsIG9uRXJyb3IpXG4gICAgICAgICAgICA6IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBrZXlTdGFydCwgc3RhcnQsIG51bGwsIGtleVByb3BzLCBvbkVycm9yKTtcbiAgICAgICAgaWYgKGN0eC5zY2hlbWEuY29tcGF0KVxuICAgICAgICAgICAgZmxvd0luZGVudENoZWNrKGJtLmluZGVudCwga2V5LCBvbkVycm9yKTtcbiAgICAgICAgY3R4LmF0S2V5ID0gZmFsc2U7XG4gICAgICAgIGlmIChtYXBJbmNsdWRlcyhjdHgsIG1hcC5pdGVtcywga2V5Tm9kZSkpXG4gICAgICAgICAgICBvbkVycm9yKGtleVN0YXJ0LCAnRFVQTElDQVRFX0tFWScsICdNYXAga2V5cyBtdXN0IGJlIHVuaXF1ZScpO1xuICAgICAgICAvLyB2YWx1ZSBwcm9wZXJ0aWVzXG4gICAgICAgIGNvbnN0IHZhbHVlUHJvcHMgPSByZXNvbHZlUHJvcHMoc2VwID8/IFtdLCB7XG4gICAgICAgICAgICBpbmRpY2F0b3I6ICdtYXAtdmFsdWUtaW5kJyxcbiAgICAgICAgICAgIG5leHQ6IHZhbHVlLFxuICAgICAgICAgICAgb2Zmc2V0OiBrZXlOb2RlLnJhbmdlWzJdLFxuICAgICAgICAgICAgb25FcnJvcixcbiAgICAgICAgICAgIHBhcmVudEluZGVudDogYm0uaW5kZW50LFxuICAgICAgICAgICAgc3RhcnRPbk5ld2xpbmU6ICFrZXkgfHwga2V5LnR5cGUgPT09ICdibG9jay1zY2FsYXInXG4gICAgICAgIH0pO1xuICAgICAgICBvZmZzZXQgPSB2YWx1ZVByb3BzLmVuZDtcbiAgICAgICAgaWYgKHZhbHVlUHJvcHMuZm91bmQpIHtcbiAgICAgICAgICAgIGlmIChpbXBsaWNpdEtleSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZT8udHlwZSA9PT0gJ2Jsb2NrLW1hcCcgJiYgIXZhbHVlUHJvcHMuaGFzTmV3bGluZSlcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihvZmZzZXQsICdCTE9DS19BU19JTVBMSUNJVF9LRVknLCAnTmVzdGVkIG1hcHBpbmdzIGFyZSBub3QgYWxsb3dlZCBpbiBjb21wYWN0IG1hcHBpbmdzJyk7XG4gICAgICAgICAgICAgICAgaWYgKGN0eC5vcHRpb25zLnN0cmljdCAmJlxuICAgICAgICAgICAgICAgICAgICBrZXlQcm9wcy5zdGFydCA8IHZhbHVlUHJvcHMuZm91bmQub2Zmc2V0IC0gMTAyNClcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihrZXlOb2RlLnJhbmdlLCAnS0VZX09WRVJfMTAyNF9DSEFSUycsICdUaGUgOiBpbmRpY2F0b3IgbXVzdCBiZSBhdCBtb3N0IDEwMjQgY2hhcnMgYWZ0ZXIgdGhlIHN0YXJ0IG9mIGFuIGltcGxpY2l0IGJsb2NrIG1hcHBpbmcga2V5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB2YWx1ZSB2YWx1ZVxuICAgICAgICAgICAgY29uc3QgdmFsdWVOb2RlID0gdmFsdWVcbiAgICAgICAgICAgICAgICA/IGNvbXBvc2VOb2RlKGN0eCwgdmFsdWUsIHZhbHVlUHJvcHMsIG9uRXJyb3IpXG4gICAgICAgICAgICAgICAgOiBjb21wb3NlRW1wdHlOb2RlKGN0eCwgb2Zmc2V0LCBzZXAsIG51bGwsIHZhbHVlUHJvcHMsIG9uRXJyb3IpO1xuICAgICAgICAgICAgaWYgKGN0eC5zY2hlbWEuY29tcGF0KVxuICAgICAgICAgICAgICAgIGZsb3dJbmRlbnRDaGVjayhibS5pbmRlbnQsIHZhbHVlLCBvbkVycm9yKTtcbiAgICAgICAgICAgIG9mZnNldCA9IHZhbHVlTm9kZS5yYW5nZVsyXTtcbiAgICAgICAgICAgIGNvbnN0IHBhaXIgPSBuZXcgUGFpcihrZXlOb2RlLCB2YWx1ZU5vZGUpO1xuICAgICAgICAgICAgaWYgKGN0eC5vcHRpb25zLmtlZXBTb3VyY2VUb2tlbnMpXG4gICAgICAgICAgICAgICAgcGFpci5zcmNUb2tlbiA9IGNvbGxJdGVtO1xuICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2gocGFpcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBrZXkgd2l0aCBubyB2YWx1ZVxuICAgICAgICAgICAgaWYgKGltcGxpY2l0S2V5KVxuICAgICAgICAgICAgICAgIG9uRXJyb3Ioa2V5Tm9kZS5yYW5nZSwgJ01JU1NJTkdfQ0hBUicsICdJbXBsaWNpdCBtYXAga2V5cyBuZWVkIHRvIGJlIGZvbGxvd2VkIGJ5IG1hcCB2YWx1ZXMnKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZVByb3BzLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5Tm9kZS5jb21tZW50KVxuICAgICAgICAgICAgICAgICAgICBrZXlOb2RlLmNvbW1lbnQgKz0gJ1xcbicgKyB2YWx1ZVByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBrZXlOb2RlLmNvbW1lbnQgPSB2YWx1ZVByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYWlyID0gbmV3IFBhaXIoa2V5Tm9kZSk7XG4gICAgICAgICAgICBpZiAoY3R4Lm9wdGlvbnMua2VlcFNvdXJjZVRva2VucylcbiAgICAgICAgICAgICAgICBwYWlyLnNyY1Rva2VuID0gY29sbEl0ZW07XG4gICAgICAgICAgICBtYXAuaXRlbXMucHVzaChwYWlyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29tbWVudEVuZCAmJiBjb21tZW50RW5kIDwgb2Zmc2V0KVxuICAgICAgICBvbkVycm9yKGNvbW1lbnRFbmQsICdJTVBPU1NJQkxFJywgJ01hcCBjb21tZW50IHdpdGggdHJhaWxpbmcgY29udGVudCcpO1xuICAgIG1hcC5yYW5nZSA9IFtibS5vZmZzZXQsIG9mZnNldCwgY29tbWVudEVuZCA/PyBvZmZzZXRdO1xuICAgIHJldHVybiBtYXA7XG59XG5cbmV4cG9ydCB7IHJlc29sdmVCbG9ja01hcCB9O1xuIiwiZnVuY3Rpb24gcmVzb2x2ZUVuZChlbmQsIG9mZnNldCwgcmVxU3BhY2UsIG9uRXJyb3IpIHtcbiAgICBsZXQgY29tbWVudCA9ICcnO1xuICAgIGlmIChlbmQpIHtcbiAgICAgICAgbGV0IGhhc1NwYWNlID0gZmFsc2U7XG4gICAgICAgIGxldCBzZXAgPSAnJztcbiAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc291cmNlLCB0eXBlIH0gPSB0b2tlbjtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICAgICAgaGFzU3BhY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjb21tZW50Jzoge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVxU3BhY2UgJiYgIWhhc1NwYWNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ01JU1NJTkdfQ0hBUicsICdDb21tZW50cyBtdXN0IGJlIHNlcGFyYXRlZCBmcm9tIG90aGVyIHRva2VucyBieSB3aGl0ZSBzcGFjZSBjaGFyYWN0ZXJzJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNiID0gc291cmNlLnN1YnN0cmluZygxKSB8fCAnICc7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnQgPSBjYjtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudCArPSBzZXAgKyBjYjtcbiAgICAgICAgICAgICAgICAgICAgc2VwID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXAgKz0gc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdVTkVYUEVDVEVEX1RPS0VOJywgYFVuZXhwZWN0ZWQgJHt0eXBlfSBhdCBub2RlIGVuZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2Zmc2V0ICs9IHNvdXJjZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgY29tbWVudCwgb2Zmc2V0IH07XG59XG5cbmV4cG9ydCB7IHJlc29sdmVFbmQgfTtcbiIsImltcG9ydCB7IGlzUGFpciB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFBhaXIgfSBmcm9tICcuLi9ub2Rlcy9QYWlyLmpzJztcbmltcG9ydCB7IFlBTUxNYXAgfSBmcm9tICcuLi9ub2Rlcy9ZQU1MTWFwLmpzJztcbmltcG9ydCB7IFlBTUxTZXEgfSBmcm9tICcuLi9ub2Rlcy9ZQU1MU2VxLmpzJztcbmltcG9ydCB7IHJlc29sdmVFbmQgfSBmcm9tICcuL3Jlc29sdmUtZW5kLmpzJztcbmltcG9ydCB7IHJlc29sdmVQcm9wcyB9IGZyb20gJy4vcmVzb2x2ZS1wcm9wcy5qcyc7XG5pbXBvcnQgeyBjb250YWluc05ld2xpbmUgfSBmcm9tICcuL3V0aWwtY29udGFpbnMtbmV3bGluZS5qcyc7XG5pbXBvcnQgeyBtYXBJbmNsdWRlcyB9IGZyb20gJy4vdXRpbC1tYXAtaW5jbHVkZXMuanMnO1xuXG5jb25zdCBibG9ja01zZyA9ICdCbG9jayBjb2xsZWN0aW9ucyBhcmUgbm90IGFsbG93ZWQgd2l0aGluIGZsb3cgY29sbGVjdGlvbnMnO1xuY29uc3QgaXNCbG9jayA9ICh0b2tlbikgPT4gdG9rZW4gJiYgKHRva2VuLnR5cGUgPT09ICdibG9jay1tYXAnIHx8IHRva2VuLnR5cGUgPT09ICdibG9jay1zZXEnKTtcbmZ1bmN0aW9uIHJlc29sdmVGbG93Q29sbGVjdGlvbih7IGNvbXBvc2VOb2RlLCBjb21wb3NlRW1wdHlOb2RlIH0sIGN0eCwgZmMsIG9uRXJyb3IsIHRhZykge1xuICAgIGNvbnN0IGlzTWFwID0gZmMuc3RhcnQuc291cmNlID09PSAneyc7XG4gICAgY29uc3QgZmNOYW1lID0gaXNNYXAgPyAnZmxvdyBtYXAnIDogJ2Zsb3cgc2VxdWVuY2UnO1xuICAgIGNvbnN0IE5vZGVDbGFzcyA9ICh0YWc/Lm5vZGVDbGFzcyA/PyAoaXNNYXAgPyBZQU1MTWFwIDogWUFNTFNlcSkpO1xuICAgIGNvbnN0IGNvbGwgPSBuZXcgTm9kZUNsYXNzKGN0eC5zY2hlbWEpO1xuICAgIGNvbGwuZmxvdyA9IHRydWU7XG4gICAgY29uc3QgYXRSb290ID0gY3R4LmF0Um9vdDtcbiAgICBpZiAoYXRSb290KVxuICAgICAgICBjdHguYXRSb290ID0gZmFsc2U7XG4gICAgaWYgKGN0eC5hdEtleSlcbiAgICAgICAgY3R4LmF0S2V5ID0gZmFsc2U7XG4gICAgbGV0IG9mZnNldCA9IGZjLm9mZnNldCArIGZjLnN0YXJ0LnNvdXJjZS5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmYy5pdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBjb2xsSXRlbSA9IGZjLml0ZW1zW2ldO1xuICAgICAgICBjb25zdCB7IHN0YXJ0LCBrZXksIHNlcCwgdmFsdWUgfSA9IGNvbGxJdGVtO1xuICAgICAgICBjb25zdCBwcm9wcyA9IHJlc29sdmVQcm9wcyhzdGFydCwge1xuICAgICAgICAgICAgZmxvdzogZmNOYW1lLFxuICAgICAgICAgICAgaW5kaWNhdG9yOiAnZXhwbGljaXQta2V5LWluZCcsXG4gICAgICAgICAgICBuZXh0OiBrZXkgPz8gc2VwPy5bMF0sXG4gICAgICAgICAgICBvZmZzZXQsXG4gICAgICAgICAgICBvbkVycm9yLFxuICAgICAgICAgICAgcGFyZW50SW5kZW50OiBmYy5pbmRlbnQsXG4gICAgICAgICAgICBzdGFydE9uTmV3bGluZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcHJvcHMuZm91bmQpIHtcbiAgICAgICAgICAgIGlmICghcHJvcHMuYW5jaG9yICYmICFwcm9wcy50YWcgJiYgIXNlcCAmJiAhdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCAmJiBwcm9wcy5jb21tYSlcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihwcm9wcy5jb21tYSwgJ1VORVhQRUNURURfVE9LRU4nLCBgVW5leHBlY3RlZCAsIGluICR7ZmNOYW1lfWApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPCBmYy5pdGVtcy5sZW5ndGggLSAxKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHByb3BzLnN0YXJ0LCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbmV4cGVjdGVkIGVtcHR5IGl0ZW0gaW4gJHtmY05hbWV9YCk7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGwuY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGwuY29tbWVudCArPSAnXFxuJyArIHByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGwuY29tbWVudCA9IHByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9mZnNldCA9IHByb3BzLmVuZDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNNYXAgJiYgY3R4Lm9wdGlvbnMuc3RyaWN0ICYmIGNvbnRhaW5zTmV3bGluZShrZXkpKVxuICAgICAgICAgICAgICAgIG9uRXJyb3Ioa2V5LCAvLyBjaGVja2VkIGJ5IGNvbnRhaW5zTmV3bGluZSgpXG4gICAgICAgICAgICAgICAgJ01VTFRJTElORV9JTVBMSUNJVF9LRVknLCAnSW1wbGljaXQga2V5cyBvZiBmbG93IHNlcXVlbmNlIHBhaXJzIG5lZWQgdG8gYmUgb24gYSBzaW5nbGUgbGluZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICBpZiAocHJvcHMuY29tbWEpXG4gICAgICAgICAgICAgICAgb25FcnJvcihwcm9wcy5jb21tYSwgJ1VORVhQRUNURURfVE9LRU4nLCBgVW5leHBlY3RlZCAsIGluICR7ZmNOYW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFwcm9wcy5jb21tYSlcbiAgICAgICAgICAgICAgICBvbkVycm9yKHByb3BzLnN0YXJ0LCAnTUlTU0lOR19DSEFSJywgYE1pc3NpbmcgLCBiZXR3ZWVuICR7ZmNOYW1lfSBpdGVtc2ApO1xuICAgICAgICAgICAgaWYgKHByb3BzLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJldkl0ZW1Db21tZW50ID0gJyc7XG4gICAgICAgICAgICAgICAgbG9vcDogZm9yIChjb25zdCBzdCBvZiBzdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbW1hJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZJdGVtQ29tbWVudCA9IHN0LnNvdXJjZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgbG9vcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgbG9vcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJldkl0ZW1Db21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2ID0gY29sbC5pdGVtc1tjb2xsLml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNQYWlyKHByZXYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldiA9IHByZXYudmFsdWUgPz8gcHJldi5rZXk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmV2LmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2LmNvbW1lbnQgKz0gJ1xcbicgKyBwcmV2SXRlbUNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYuY29tbWVudCA9IHByZXZJdGVtQ29tbWVudDtcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMuY29tbWVudCA9IHByb3BzLmNvbW1lbnQuc3Vic3RyaW5nKHByZXZJdGVtQ29tbWVudC5sZW5ndGggKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc01hcCAmJiAhc2VwICYmICFwcm9wcy5mb3VuZCkge1xuICAgICAgICAgICAgLy8gaXRlbSBpcyBhIHZhbHVlIGluIGEgc2VxXG4gICAgICAgICAgICAvLyDihpIga2V5ICYgc2VwIGFyZSBlbXB0eSwgc3RhcnQgZG9lcyBub3QgaW5jbHVkZSA/IG9yIDpcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlTm9kZSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgPyBjb21wb3NlTm9kZShjdHgsIHZhbHVlLCBwcm9wcywgb25FcnJvcilcbiAgICAgICAgICAgICAgICA6IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBwcm9wcy5lbmQsIHNlcCwgbnVsbCwgcHJvcHMsIG9uRXJyb3IpO1xuICAgICAgICAgICAgY29sbC5pdGVtcy5wdXNoKHZhbHVlTm9kZSk7XG4gICAgICAgICAgICBvZmZzZXQgPSB2YWx1ZU5vZGUucmFuZ2VbMl07XG4gICAgICAgICAgICBpZiAoaXNCbG9jayh2YWx1ZSkpXG4gICAgICAgICAgICAgICAgb25FcnJvcih2YWx1ZU5vZGUucmFuZ2UsICdCTE9DS19JTl9GTE9XJywgYmxvY2tNc2cpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gaXRlbSBpcyBhIGtleSt2YWx1ZSBwYWlyXG4gICAgICAgICAgICAvLyBrZXkgdmFsdWVcbiAgICAgICAgICAgIGN0eC5hdEtleSA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCBrZXlTdGFydCA9IHByb3BzLmVuZDtcbiAgICAgICAgICAgIGNvbnN0IGtleU5vZGUgPSBrZXlcbiAgICAgICAgICAgICAgICA/IGNvbXBvc2VOb2RlKGN0eCwga2V5LCBwcm9wcywgb25FcnJvcilcbiAgICAgICAgICAgICAgICA6IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBrZXlTdGFydCwgc3RhcnQsIG51bGwsIHByb3BzLCBvbkVycm9yKTtcbiAgICAgICAgICAgIGlmIChpc0Jsb2NrKGtleSkpXG4gICAgICAgICAgICAgICAgb25FcnJvcihrZXlOb2RlLnJhbmdlLCAnQkxPQ0tfSU5fRkxPVycsIGJsb2NrTXNnKTtcbiAgICAgICAgICAgIGN0eC5hdEtleSA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gdmFsdWUgcHJvcGVydGllc1xuICAgICAgICAgICAgY29uc3QgdmFsdWVQcm9wcyA9IHJlc29sdmVQcm9wcyhzZXAgPz8gW10sIHtcbiAgICAgICAgICAgICAgICBmbG93OiBmY05hbWUsXG4gICAgICAgICAgICAgICAgaW5kaWNhdG9yOiAnbWFwLXZhbHVlLWluZCcsXG4gICAgICAgICAgICAgICAgbmV4dDogdmFsdWUsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBrZXlOb2RlLnJhbmdlWzJdLFxuICAgICAgICAgICAgICAgIG9uRXJyb3IsXG4gICAgICAgICAgICAgICAgcGFyZW50SW5kZW50OiBmYy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgc3RhcnRPbk5ld2xpbmU6IGZhbHNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh2YWx1ZVByb3BzLmZvdW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc01hcCAmJiAhcHJvcHMuZm91bmQgJiYgY3R4Lm9wdGlvbnMuc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXApXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIHNlcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdCA9PT0gdmFsdWVQcm9wcy5mb3VuZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0LnR5cGUgPT09ICduZXdsaW5lJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHN0LCAnTVVMVElMSU5FX0lNUExJQ0lUX0tFWScsICdJbXBsaWNpdCBrZXlzIG9mIGZsb3cgc2VxdWVuY2UgcGFpcnMgbmVlZCB0byBiZSBvbiBhIHNpbmdsZSBsaW5lJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BzLnN0YXJ0IDwgdmFsdWVQcm9wcy5mb3VuZC5vZmZzZXQgLSAxMDI0KVxuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcih2YWx1ZVByb3BzLmZvdW5kLCAnS0VZX09WRVJfMTAyNF9DSEFSUycsICdUaGUgOiBpbmRpY2F0b3IgbXVzdCBiZSBhdCBtb3N0IDEwMjQgY2hhcnMgYWZ0ZXIgdGhlIHN0YXJ0IG9mIGFuIGltcGxpY2l0IGZsb3cgc2VxdWVuY2Uga2V5Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoJ3NvdXJjZScgaW4gdmFsdWUgJiYgdmFsdWUuc291cmNlICYmIHZhbHVlLnNvdXJjZVswXSA9PT0gJzonKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHZhbHVlLCAnTUlTU0lOR19DSEFSJywgYE1pc3Npbmcgc3BhY2UgYWZ0ZXIgOiBpbiAke2ZjTmFtZX1gKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodmFsdWVQcm9wcy5zdGFydCwgJ01JU1NJTkdfQ0hBUicsIGBNaXNzaW5nICwgb3IgOiBiZXR3ZWVuICR7ZmNOYW1lfSBpdGVtc2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmFsdWUgdmFsdWVcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlTm9kZSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgPyBjb21wb3NlTm9kZShjdHgsIHZhbHVlLCB2YWx1ZVByb3BzLCBvbkVycm9yKVxuICAgICAgICAgICAgICAgIDogdmFsdWVQcm9wcy5mb3VuZFxuICAgICAgICAgICAgICAgICAgICA/IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCB2YWx1ZVByb3BzLmVuZCwgc2VwLCBudWxsLCB2YWx1ZVByb3BzLCBvbkVycm9yKVxuICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICBpZiAodmFsdWVOb2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzQmxvY2sodmFsdWUpKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHZhbHVlTm9kZS5yYW5nZSwgJ0JMT0NLX0lOX0ZMT1cnLCBibG9ja01zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZVByb3BzLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5Tm9kZS5jb21tZW50KVxuICAgICAgICAgICAgICAgICAgICBrZXlOb2RlLmNvbW1lbnQgKz0gJ1xcbicgKyB2YWx1ZVByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBrZXlOb2RlLmNvbW1lbnQgPSB2YWx1ZVByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYWlyID0gbmV3IFBhaXIoa2V5Tm9kZSwgdmFsdWVOb2RlKTtcbiAgICAgICAgICAgIGlmIChjdHgub3B0aW9ucy5rZWVwU291cmNlVG9rZW5zKVxuICAgICAgICAgICAgICAgIHBhaXIuc3JjVG9rZW4gPSBjb2xsSXRlbTtcbiAgICAgICAgICAgIGlmIChpc01hcCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcCA9IGNvbGw7XG4gICAgICAgICAgICAgICAgaWYgKG1hcEluY2x1ZGVzKGN0eCwgbWFwLml0ZW1zLCBrZXlOb2RlKSlcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihrZXlTdGFydCwgJ0RVUExJQ0FURV9LRVknLCAnTWFwIGtleXMgbXVzdCBiZSB1bmlxdWUnKTtcbiAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaChwYWlyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcCA9IG5ldyBZQU1MTWFwKGN0eC5zY2hlbWEpO1xuICAgICAgICAgICAgICAgIG1hcC5mbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaChwYWlyKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmRSYW5nZSA9ICh2YWx1ZU5vZGUgPz8ga2V5Tm9kZSkucmFuZ2U7XG4gICAgICAgICAgICAgICAgbWFwLnJhbmdlID0gW2tleU5vZGUucmFuZ2VbMF0sIGVuZFJhbmdlWzFdLCBlbmRSYW5nZVsyXV07XG4gICAgICAgICAgICAgICAgY29sbC5pdGVtcy5wdXNoKG1hcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvZmZzZXQgPSB2YWx1ZU5vZGUgPyB2YWx1ZU5vZGUucmFuZ2VbMl0gOiB2YWx1ZVByb3BzLmVuZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBleHBlY3RlZEVuZCA9IGlzTWFwID8gJ30nIDogJ10nO1xuICAgIGNvbnN0IFtjZSwgLi4uZWVdID0gZmMuZW5kO1xuICAgIGxldCBjZVBvcyA9IG9mZnNldDtcbiAgICBpZiAoY2UgJiYgY2Uuc291cmNlID09PSBleHBlY3RlZEVuZClcbiAgICAgICAgY2VQb3MgPSBjZS5vZmZzZXQgKyBjZS5zb3VyY2UubGVuZ3RoO1xuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBuYW1lID0gZmNOYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBmY05hbWUuc3Vic3RyaW5nKDEpO1xuICAgICAgICBjb25zdCBtc2cgPSBhdFJvb3RcbiAgICAgICAgICAgID8gYCR7bmFtZX0gbXVzdCBlbmQgd2l0aCBhICR7ZXhwZWN0ZWRFbmR9YFxuICAgICAgICAgICAgOiBgJHtuYW1lfSBpbiBibG9jayBjb2xsZWN0aW9uIG11c3QgYmUgc3VmZmljaWVudGx5IGluZGVudGVkIGFuZCBlbmQgd2l0aCBhICR7ZXhwZWN0ZWRFbmR9YDtcbiAgICAgICAgb25FcnJvcihvZmZzZXQsIGF0Um9vdCA/ICdNSVNTSU5HX0NIQVInIDogJ0JBRF9JTkRFTlQnLCBtc2cpO1xuICAgICAgICBpZiAoY2UgJiYgY2Uuc291cmNlLmxlbmd0aCAhPT0gMSlcbiAgICAgICAgICAgIGVlLnVuc2hpZnQoY2UpO1xuICAgIH1cbiAgICBpZiAoZWUubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBlbmQgPSByZXNvbHZlRW5kKGVlLCBjZVBvcywgY3R4Lm9wdGlvbnMuc3RyaWN0LCBvbkVycm9yKTtcbiAgICAgICAgaWYgKGVuZC5jb21tZW50KSB7XG4gICAgICAgICAgICBpZiAoY29sbC5jb21tZW50KVxuICAgICAgICAgICAgICAgIGNvbGwuY29tbWVudCArPSAnXFxuJyArIGVuZC5jb21tZW50O1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGNvbGwuY29tbWVudCA9IGVuZC5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbGwucmFuZ2UgPSBbZmMub2Zmc2V0LCBjZVBvcywgZW5kLm9mZnNldF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb2xsLnJhbmdlID0gW2ZjLm9mZnNldCwgY2VQb3MsIGNlUG9zXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbGw7XG59XG5cbmV4cG9ydCB7IHJlc29sdmVGbG93Q29sbGVjdGlvbiB9O1xuIiwiaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IFlBTUxNYXAgfSBmcm9tICcuLi9ub2Rlcy9ZQU1MTWFwLmpzJztcbmltcG9ydCB7IFlBTUxTZXEgfSBmcm9tICcuLi9ub2Rlcy9ZQU1MU2VxLmpzJztcbmltcG9ydCB7IHJlc29sdmVCbG9ja01hcCB9IGZyb20gJy4vcmVzb2x2ZS1ibG9jay1tYXAuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUJsb2NrU2VxIH0gZnJvbSAnLi9yZXNvbHZlLWJsb2NrLXNlcS5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRmxvd0NvbGxlY3Rpb24gfSBmcm9tICcuL3Jlc29sdmUtZmxvdy1jb2xsZWN0aW9uLmpzJztcblxuZnVuY3Rpb24gcmVzb2x2ZUNvbGxlY3Rpb24oQ04sIGN0eCwgdG9rZW4sIG9uRXJyb3IsIHRhZ05hbWUsIHRhZykge1xuICAgIGNvbnN0IGNvbGwgPSB0b2tlbi50eXBlID09PSAnYmxvY2stbWFwJ1xuICAgICAgICA/IHJlc29sdmVCbG9ja01hcChDTiwgY3R4LCB0b2tlbiwgb25FcnJvciwgdGFnKVxuICAgICAgICA6IHRva2VuLnR5cGUgPT09ICdibG9jay1zZXEnXG4gICAgICAgICAgICA/IHJlc29sdmVCbG9ja1NlcShDTiwgY3R4LCB0b2tlbiwgb25FcnJvciwgdGFnKVxuICAgICAgICAgICAgOiByZXNvbHZlRmxvd0NvbGxlY3Rpb24oQ04sIGN0eCwgdG9rZW4sIG9uRXJyb3IsIHRhZyk7XG4gICAgY29uc3QgQ29sbCA9IGNvbGwuY29uc3RydWN0b3I7XG4gICAgLy8gSWYgd2UgZ290IGEgdGFnTmFtZSBtYXRjaGluZyB0aGUgY2xhc3MsIG9yIHRoZSB0YWcgbmFtZSBpcyAnIScsXG4gICAgLy8gdGhlbiB1c2UgdGhlIHRhZ05hbWUgZnJvbSB0aGUgbm9kZSBjbGFzcyB1c2VkIHRvIGNyZWF0ZSBpdC5cbiAgICBpZiAodGFnTmFtZSA9PT0gJyEnIHx8IHRhZ05hbWUgPT09IENvbGwudGFnTmFtZSkge1xuICAgICAgICBjb2xsLnRhZyA9IENvbGwudGFnTmFtZTtcbiAgICAgICAgcmV0dXJuIGNvbGw7XG4gICAgfVxuICAgIGlmICh0YWdOYW1lKVxuICAgICAgICBjb2xsLnRhZyA9IHRhZ05hbWU7XG4gICAgcmV0dXJuIGNvbGw7XG59XG5mdW5jdGlvbiBjb21wb3NlQ29sbGVjdGlvbihDTiwgY3R4LCB0b2tlbiwgcHJvcHMsIG9uRXJyb3IpIHtcbiAgICBjb25zdCB0YWdUb2tlbiA9IHByb3BzLnRhZztcbiAgICBjb25zdCB0YWdOYW1lID0gIXRhZ1Rva2VuXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IGN0eC5kaXJlY3RpdmVzLnRhZ05hbWUodGFnVG9rZW4uc291cmNlLCBtc2cgPT4gb25FcnJvcih0YWdUb2tlbiwgJ1RBR19SRVNPTFZFX0ZBSUxFRCcsIG1zZykpO1xuICAgIGlmICh0b2tlbi50eXBlID09PSAnYmxvY2stc2VxJykge1xuICAgICAgICBjb25zdCB7IGFuY2hvciwgbmV3bGluZUFmdGVyUHJvcDogbmwgfSA9IHByb3BzO1xuICAgICAgICBjb25zdCBsYXN0UHJvcCA9IGFuY2hvciAmJiB0YWdUb2tlblxuICAgICAgICAgICAgPyBhbmNob3Iub2Zmc2V0ID4gdGFnVG9rZW4ub2Zmc2V0XG4gICAgICAgICAgICAgICAgPyBhbmNob3JcbiAgICAgICAgICAgICAgICA6IHRhZ1Rva2VuXG4gICAgICAgICAgICA6IChhbmNob3IgPz8gdGFnVG9rZW4pO1xuICAgICAgICBpZiAobGFzdFByb3AgJiYgKCFubCB8fCBubC5vZmZzZXQgPCBsYXN0UHJvcC5vZmZzZXQpKSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gJ01pc3NpbmcgbmV3bGluZSBhZnRlciBibG9jayBzZXF1ZW5jZSBwcm9wcyc7XG4gICAgICAgICAgICBvbkVycm9yKGxhc3RQcm9wLCAnTUlTU0lOR19DSEFSJywgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZXhwVHlwZSA9IHRva2VuLnR5cGUgPT09ICdibG9jay1tYXAnXG4gICAgICAgID8gJ21hcCdcbiAgICAgICAgOiB0b2tlbi50eXBlID09PSAnYmxvY2stc2VxJ1xuICAgICAgICAgICAgPyAnc2VxJ1xuICAgICAgICAgICAgOiB0b2tlbi5zdGFydC5zb3VyY2UgPT09ICd7J1xuICAgICAgICAgICAgICAgID8gJ21hcCdcbiAgICAgICAgICAgICAgICA6ICdzZXEnO1xuICAgIC8vIHNob3J0Y3V0OiBjaGVjayBpZiBpdCdzIGEgZ2VuZXJpYyBZQU1MTWFwIG9yIFlBTUxTZXFcbiAgICAvLyBiZWZvcmUganVtcGluZyBpbnRvIHRoZSBjdXN0b20gdGFnIGxvZ2ljLlxuICAgIGlmICghdGFnVG9rZW4gfHxcbiAgICAgICAgIXRhZ05hbWUgfHxcbiAgICAgICAgdGFnTmFtZSA9PT0gJyEnIHx8XG4gICAgICAgICh0YWdOYW1lID09PSBZQU1MTWFwLnRhZ05hbWUgJiYgZXhwVHlwZSA9PT0gJ21hcCcpIHx8XG4gICAgICAgICh0YWdOYW1lID09PSBZQU1MU2VxLnRhZ05hbWUgJiYgZXhwVHlwZSA9PT0gJ3NlcScpKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlQ29sbGVjdGlvbihDTiwgY3R4LCB0b2tlbiwgb25FcnJvciwgdGFnTmFtZSk7XG4gICAgfVxuICAgIGxldCB0YWcgPSBjdHguc2NoZW1hLnRhZ3MuZmluZCh0ID0+IHQudGFnID09PSB0YWdOYW1lICYmIHQuY29sbGVjdGlvbiA9PT0gZXhwVHlwZSk7XG4gICAgaWYgKCF0YWcpIHtcbiAgICAgICAgY29uc3Qga3QgPSBjdHguc2NoZW1hLmtub3duVGFnc1t0YWdOYW1lXTtcbiAgICAgICAgaWYgKGt0ICYmIGt0LmNvbGxlY3Rpb24gPT09IGV4cFR5cGUpIHtcbiAgICAgICAgICAgIGN0eC5zY2hlbWEudGFncy5wdXNoKE9iamVjdC5hc3NpZ24oe30sIGt0LCB7IGRlZmF1bHQ6IGZhbHNlIH0pKTtcbiAgICAgICAgICAgIHRhZyA9IGt0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGt0KSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcih0YWdUb2tlbiwgJ0JBRF9DT0xMRUNUSU9OX1RZUEUnLCBgJHtrdC50YWd9IHVzZWQgZm9yICR7ZXhwVHlwZX0gY29sbGVjdGlvbiwgYnV0IGV4cGVjdHMgJHtrdC5jb2xsZWN0aW9uID8/ICdzY2FsYXInfWAsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcih0YWdUb2tlbiwgJ1RBR19SRVNPTFZFX0ZBSUxFRCcsIGBVbnJlc29sdmVkIHRhZzogJHt0YWdOYW1lfWAsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVDb2xsZWN0aW9uKENOLCBjdHgsIHRva2VuLCBvbkVycm9yLCB0YWdOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjb2xsID0gcmVzb2x2ZUNvbGxlY3Rpb24oQ04sIGN0eCwgdG9rZW4sIG9uRXJyb3IsIHRhZ05hbWUsIHRhZyk7XG4gICAgY29uc3QgcmVzID0gdGFnLnJlc29sdmU/Lihjb2xsLCBtc2cgPT4gb25FcnJvcih0YWdUb2tlbiwgJ1RBR19SRVNPTFZFX0ZBSUxFRCcsIG1zZyksIGN0eC5vcHRpb25zKSA/PyBjb2xsO1xuICAgIGNvbnN0IG5vZGUgPSBpc05vZGUocmVzKVxuICAgICAgICA/IHJlc1xuICAgICAgICA6IG5ldyBTY2FsYXIocmVzKTtcbiAgICBub2RlLnJhbmdlID0gY29sbC5yYW5nZTtcbiAgICBub2RlLnRhZyA9IHRhZ05hbWU7XG4gICAgaWYgKHRhZz8uZm9ybWF0KVxuICAgICAgICBub2RlLmZvcm1hdCA9IHRhZy5mb3JtYXQ7XG4gICAgcmV0dXJuIG5vZGU7XG59XG5cbmV4cG9ydCB7IGNvbXBvc2VDb2xsZWN0aW9uIH07XG4iLCJpbXBvcnQgeyBZQU1MU2VxIH0gZnJvbSAnLi4vbm9kZXMvWUFNTFNlcS5qcyc7XG5pbXBvcnQgeyByZXNvbHZlUHJvcHMgfSBmcm9tICcuL3Jlc29sdmUtcHJvcHMuanMnO1xuaW1wb3J0IHsgZmxvd0luZGVudENoZWNrIH0gZnJvbSAnLi91dGlsLWZsb3ctaW5kZW50LWNoZWNrLmpzJztcblxuZnVuY3Rpb24gcmVzb2x2ZUJsb2NrU2VxKHsgY29tcG9zZU5vZGUsIGNvbXBvc2VFbXB0eU5vZGUgfSwgY3R4LCBicywgb25FcnJvciwgdGFnKSB7XG4gICAgY29uc3QgTm9kZUNsYXNzID0gdGFnPy5ub2RlQ2xhc3MgPz8gWUFNTFNlcTtcbiAgICBjb25zdCBzZXEgPSBuZXcgTm9kZUNsYXNzKGN0eC5zY2hlbWEpO1xuICAgIGlmIChjdHguYXRSb290KVxuICAgICAgICBjdHguYXRSb290ID0gZmFsc2U7XG4gICAgaWYgKGN0eC5hdEtleSlcbiAgICAgICAgY3R4LmF0S2V5ID0gZmFsc2U7XG4gICAgbGV0IG9mZnNldCA9IGJzLm9mZnNldDtcbiAgICBsZXQgY29tbWVudEVuZCA9IG51bGw7XG4gICAgZm9yIChjb25zdCB7IHN0YXJ0LCB2YWx1ZSB9IG9mIGJzLml0ZW1zKSB7XG4gICAgICAgIGNvbnN0IHByb3BzID0gcmVzb2x2ZVByb3BzKHN0YXJ0LCB7XG4gICAgICAgICAgICBpbmRpY2F0b3I6ICdzZXEtaXRlbS1pbmQnLFxuICAgICAgICAgICAgbmV4dDogdmFsdWUsXG4gICAgICAgICAgICBvZmZzZXQsXG4gICAgICAgICAgICBvbkVycm9yLFxuICAgICAgICAgICAgcGFyZW50SW5kZW50OiBicy5pbmRlbnQsXG4gICAgICAgICAgICBzdGFydE9uTmV3bGluZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFwcm9wcy5mb3VuZCkge1xuICAgICAgICAgICAgaWYgKHByb3BzLmFuY2hvciB8fCBwcm9wcy50YWcgfHwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUudHlwZSA9PT0gJ2Jsb2NrLXNlcScpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IocHJvcHMuZW5kLCAnQkFEX0lOREVOVCcsICdBbGwgc2VxdWVuY2UgaXRlbXMgbXVzdCBzdGFydCBhdCB0aGUgc2FtZSBjb2x1bW4nKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0LCAnTUlTU0lOR19DSEFSJywgJ1NlcXVlbmNlIGl0ZW0gd2l0aG91dCAtIGluZGljYXRvcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29tbWVudEVuZCA9IHByb3BzLmVuZDtcbiAgICAgICAgICAgICAgICBpZiAocHJvcHMuY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgc2VxLmNvbW1lbnQgPSBwcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5vZGUgPSB2YWx1ZVxuICAgICAgICAgICAgPyBjb21wb3NlTm9kZShjdHgsIHZhbHVlLCBwcm9wcywgb25FcnJvcilcbiAgICAgICAgICAgIDogY29tcG9zZUVtcHR5Tm9kZShjdHgsIHByb3BzLmVuZCwgc3RhcnQsIG51bGwsIHByb3BzLCBvbkVycm9yKTtcbiAgICAgICAgaWYgKGN0eC5zY2hlbWEuY29tcGF0KVxuICAgICAgICAgICAgZmxvd0luZGVudENoZWNrKGJzLmluZGVudCwgdmFsdWUsIG9uRXJyb3IpO1xuICAgICAgICBvZmZzZXQgPSBub2RlLnJhbmdlWzJdO1xuICAgICAgICBzZXEuaXRlbXMucHVzaChub2RlKTtcbiAgICB9XG4gICAgc2VxLnJhbmdlID0gW2JzLm9mZnNldCwgb2Zmc2V0LCBjb21tZW50RW5kID8/IG9mZnNldF07XG4gICAgcmV0dXJuIHNlcTtcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZUJsb2NrU2VxIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9TY2FsYXIuanMnO1xuXG5mdW5jdGlvbiByZXNvbHZlQmxvY2tTY2FsYXIoY3R4LCBzY2FsYXIsIG9uRXJyb3IpIHtcbiAgICBjb25zdCBzdGFydCA9IHNjYWxhci5vZmZzZXQ7XG4gICAgY29uc3QgaGVhZGVyID0gcGFyc2VCbG9ja1NjYWxhckhlYWRlcihzY2FsYXIsIGN0eC5vcHRpb25zLnN0cmljdCwgb25FcnJvcik7XG4gICAgaWYgKCFoZWFkZXIpXG4gICAgICAgIHJldHVybiB7IHZhbHVlOiAnJywgdHlwZTogbnVsbCwgY29tbWVudDogJycsIHJhbmdlOiBbc3RhcnQsIHN0YXJ0LCBzdGFydF0gfTtcbiAgICBjb25zdCB0eXBlID0gaGVhZGVyLm1vZGUgPT09ICc+JyA/IFNjYWxhci5CTE9DS19GT0xERUQgOiBTY2FsYXIuQkxPQ0tfTElURVJBTDtcbiAgICBjb25zdCBsaW5lcyA9IHNjYWxhci5zb3VyY2UgPyBzcGxpdExpbmVzKHNjYWxhci5zb3VyY2UpIDogW107XG4gICAgLy8gZGV0ZXJtaW5lIHRoZSBlbmQgb2YgY29udGVudCAmIHN0YXJ0IG9mIGNob21waW5nXG4gICAgbGV0IGNob21wU3RhcnQgPSBsaW5lcy5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IGxpbmVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBsaW5lc1tpXVsxXTtcbiAgICAgICAgaWYgKGNvbnRlbnQgPT09ICcnIHx8IGNvbnRlbnQgPT09ICdcXHInKVxuICAgICAgICAgICAgY2hvbXBTdGFydCA9IGk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBzaG9ydGN1dCBmb3IgZW1wdHkgY29udGVudHNcbiAgICBpZiAoY2hvbXBTdGFydCA9PT0gMCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGhlYWRlci5jaG9tcCA9PT0gJysnICYmIGxpbmVzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgID8gJ1xcbicucmVwZWF0KE1hdGgubWF4KDEsIGxpbmVzLmxlbmd0aCAtIDEpKVxuICAgICAgICAgICAgOiAnJztcbiAgICAgICAgbGV0IGVuZCA9IHN0YXJ0ICsgaGVhZGVyLmxlbmd0aDtcbiAgICAgICAgaWYgKHNjYWxhci5zb3VyY2UpXG4gICAgICAgICAgICBlbmQgKz0gc2NhbGFyLnNvdXJjZS5sZW5ndGg7XG4gICAgICAgIHJldHVybiB7IHZhbHVlLCB0eXBlLCBjb21tZW50OiBoZWFkZXIuY29tbWVudCwgcmFuZ2U6IFtzdGFydCwgZW5kLCBlbmRdIH07XG4gICAgfVxuICAgIC8vIGZpbmQgdGhlIGluZGVudGF0aW9uIGxldmVsIHRvIHRyaW0gZnJvbSBzdGFydFxuICAgIGxldCB0cmltSW5kZW50ID0gc2NhbGFyLmluZGVudCArIGhlYWRlci5pbmRlbnQ7XG4gICAgbGV0IG9mZnNldCA9IHNjYWxhci5vZmZzZXQgKyBoZWFkZXIubGVuZ3RoO1xuICAgIGxldCBjb250ZW50U3RhcnQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hvbXBTdGFydDsgKytpKSB7XG4gICAgICAgIGNvbnN0IFtpbmRlbnQsIGNvbnRlbnRdID0gbGluZXNbaV07XG4gICAgICAgIGlmIChjb250ZW50ID09PSAnJyB8fCBjb250ZW50ID09PSAnXFxyJykge1xuICAgICAgICAgICAgaWYgKGhlYWRlci5pbmRlbnQgPT09IDAgJiYgaW5kZW50Lmxlbmd0aCA+IHRyaW1JbmRlbnQpXG4gICAgICAgICAgICAgICAgdHJpbUluZGVudCA9IGluZGVudC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoaW5kZW50Lmxlbmd0aCA8IHRyaW1JbmRlbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gJ0Jsb2NrIHNjYWxhcnMgd2l0aCBtb3JlLWluZGVudGVkIGxlYWRpbmcgZW1wdHkgbGluZXMgbXVzdCB1c2UgYW4gZXhwbGljaXQgaW5kZW50YXRpb24gaW5kaWNhdG9yJztcbiAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCArIGluZGVudC5sZW5ndGgsICdNSVNTSU5HX0NIQVInLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoZWFkZXIuaW5kZW50ID09PSAwKVxuICAgICAgICAgICAgICAgIHRyaW1JbmRlbnQgPSBpbmRlbnQubGVuZ3RoO1xuICAgICAgICAgICAgY29udGVudFN0YXJ0ID0gaTtcbiAgICAgICAgICAgIGlmICh0cmltSW5kZW50ID09PSAwICYmICFjdHguYXRSb290KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdCbG9jayBzY2FsYXIgdmFsdWVzIGluIGNvbGxlY3Rpb25zIG11c3QgYmUgaW5kZW50ZWQnO1xuICAgICAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0LCAnQkFEX0lOREVOVCcsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0ICs9IGluZGVudC5sZW5ndGggKyBjb250ZW50Lmxlbmd0aCArIDE7XG4gICAgfVxuICAgIC8vIGluY2x1ZGUgdHJhaWxpbmcgbW9yZS1pbmRlbnRlZCBlbXB0eSBsaW5lcyBpbiBjb250ZW50XG4gICAgZm9yIChsZXQgaSA9IGxpbmVzLmxlbmd0aCAtIDE7IGkgPj0gY2hvbXBTdGFydDsgLS1pKSB7XG4gICAgICAgIGlmIChsaW5lc1tpXVswXS5sZW5ndGggPiB0cmltSW5kZW50KVxuICAgICAgICAgICAgY2hvbXBTdGFydCA9IGkgKyAxO1xuICAgIH1cbiAgICBsZXQgdmFsdWUgPSAnJztcbiAgICBsZXQgc2VwID0gJyc7XG4gICAgbGV0IHByZXZNb3JlSW5kZW50ZWQgPSBmYWxzZTtcbiAgICAvLyBsZWFkaW5nIHdoaXRlc3BhY2UgaXMga2VwdCBpbnRhY3RcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnRTdGFydDsgKytpKVxuICAgICAgICB2YWx1ZSArPSBsaW5lc1tpXVswXS5zbGljZSh0cmltSW5kZW50KSArICdcXG4nO1xuICAgIGZvciAobGV0IGkgPSBjb250ZW50U3RhcnQ7IGkgPCBjaG9tcFN0YXJ0OyArK2kpIHtcbiAgICAgICAgbGV0IFtpbmRlbnQsIGNvbnRlbnRdID0gbGluZXNbaV07XG4gICAgICAgIG9mZnNldCArPSBpbmRlbnQubGVuZ3RoICsgY29udGVudC5sZW5ndGggKyAxO1xuICAgICAgICBjb25zdCBjcmxmID0gY29udGVudFtjb250ZW50Lmxlbmd0aCAtIDFdID09PSAnXFxyJztcbiAgICAgICAgaWYgKGNybGYpXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgwLCAtMSk7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiBhbHJlYWR5IGNhdWdodCBpbiBsZXhlciAqL1xuICAgICAgICBpZiAoY29udGVudCAmJiBpbmRlbnQubGVuZ3RoIDwgdHJpbUluZGVudCkge1xuICAgICAgICAgICAgY29uc3Qgc3JjID0gaGVhZGVyLmluZGVudFxuICAgICAgICAgICAgICAgID8gJ2V4cGxpY2l0IGluZGVudGF0aW9uIGluZGljYXRvcidcbiAgICAgICAgICAgICAgICA6ICdmaXJzdCBsaW5lJztcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgQmxvY2sgc2NhbGFyIGxpbmVzIG11c3Qgbm90IGJlIGxlc3MgaW5kZW50ZWQgdGhhbiB0aGVpciAke3NyY31gO1xuICAgICAgICAgICAgb25FcnJvcihvZmZzZXQgLSBjb250ZW50Lmxlbmd0aCAtIChjcmxmID8gMiA6IDEpLCAnQkFEX0lOREVOVCcsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgaW5kZW50ID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09IFNjYWxhci5CTE9DS19MSVRFUkFMKSB7XG4gICAgICAgICAgICB2YWx1ZSArPSBzZXAgKyBpbmRlbnQuc2xpY2UodHJpbUluZGVudCkgKyBjb250ZW50O1xuICAgICAgICAgICAgc2VwID0gJ1xcbic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5kZW50Lmxlbmd0aCA+IHRyaW1JbmRlbnQgfHwgY29udGVudFswXSA9PT0gJ1xcdCcpIHtcbiAgICAgICAgICAgIC8vIG1vcmUtaW5kZW50ZWQgY29udGVudCB3aXRoaW4gYSBmb2xkZWQgYmxvY2tcbiAgICAgICAgICAgIGlmIChzZXAgPT09ICcgJylcbiAgICAgICAgICAgICAgICBzZXAgPSAnXFxuJztcbiAgICAgICAgICAgIGVsc2UgaWYgKCFwcmV2TW9yZUluZGVudGVkICYmIHNlcCA9PT0gJ1xcbicpXG4gICAgICAgICAgICAgICAgc2VwID0gJ1xcblxcbic7XG4gICAgICAgICAgICB2YWx1ZSArPSBzZXAgKyBpbmRlbnQuc2xpY2UodHJpbUluZGVudCkgKyBjb250ZW50O1xuICAgICAgICAgICAgc2VwID0gJ1xcbic7XG4gICAgICAgICAgICBwcmV2TW9yZUluZGVudGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb250ZW50ID09PSAnJykge1xuICAgICAgICAgICAgLy8gZW1wdHkgbGluZVxuICAgICAgICAgICAgaWYgKHNlcCA9PT0gJ1xcbicpXG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gJ1xcbic7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgc2VwID0gJ1xcbic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSArPSBzZXAgKyBjb250ZW50O1xuICAgICAgICAgICAgc2VwID0gJyAnO1xuICAgICAgICAgICAgcHJldk1vcmVJbmRlbnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN3aXRjaCAoaGVhZGVyLmNob21wKSB7XG4gICAgICAgIGNhc2UgJy0nOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJysnOlxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGNob21wU3RhcnQ7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSAnXFxuJyArIGxpbmVzW2ldWzBdLnNsaWNlKHRyaW1JbmRlbnQpO1xuICAgICAgICAgICAgaWYgKHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdICE9PSAnXFxuJylcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSAnXFxuJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdmFsdWUgKz0gJ1xcbic7XG4gICAgfVxuICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgaGVhZGVyLmxlbmd0aCArIHNjYWxhci5zb3VyY2UubGVuZ3RoO1xuICAgIHJldHVybiB7IHZhbHVlLCB0eXBlLCBjb21tZW50OiBoZWFkZXIuY29tbWVudCwgcmFuZ2U6IFtzdGFydCwgZW5kLCBlbmRdIH07XG59XG5mdW5jdGlvbiBwYXJzZUJsb2NrU2NhbGFySGVhZGVyKHsgb2Zmc2V0LCBwcm9wcyB9LCBzdHJpY3QsIG9uRXJyb3IpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICBpZiAocHJvcHNbMF0udHlwZSAhPT0gJ2Jsb2NrLXNjYWxhci1oZWFkZXInKSB7XG4gICAgICAgIG9uRXJyb3IocHJvcHNbMF0sICdJTVBPU1NJQkxFJywgJ0Jsb2NrIHNjYWxhciBoZWFkZXIgbm90IGZvdW5kJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB7IHNvdXJjZSB9ID0gcHJvcHNbMF07XG4gICAgY29uc3QgbW9kZSA9IHNvdXJjZVswXTtcbiAgICBsZXQgaW5kZW50ID0gMDtcbiAgICBsZXQgY2hvbXAgPSAnJztcbiAgICBsZXQgZXJyb3IgPSAtMTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNvdXJjZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBjaCA9IHNvdXJjZVtpXTtcbiAgICAgICAgaWYgKCFjaG9tcCAmJiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJysnKSlcbiAgICAgICAgICAgIGNob21wID0gY2g7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbiA9IE51bWJlcihjaCk7XG4gICAgICAgICAgICBpZiAoIWluZGVudCAmJiBuKVxuICAgICAgICAgICAgICAgIGluZGVudCA9IG47XG4gICAgICAgICAgICBlbHNlIGlmIChlcnJvciA9PT0gLTEpXG4gICAgICAgICAgICAgICAgZXJyb3IgPSBvZmZzZXQgKyBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChlcnJvciAhPT0gLTEpXG4gICAgICAgIG9uRXJyb3IoZXJyb3IsICdVTkVYUEVDVEVEX1RPS0VOJywgYEJsb2NrIHNjYWxhciBoZWFkZXIgaW5jbHVkZXMgZXh0cmEgY2hhcmFjdGVyczogJHtzb3VyY2V9YCk7XG4gICAgbGV0IGhhc1NwYWNlID0gZmFsc2U7XG4gICAgbGV0IGNvbW1lbnQgPSAnJztcbiAgICBsZXQgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHByb3BzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gcHJvcHNbaV07XG4gICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgIGhhc1NwYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICBsZW5ndGggKz0gdG9rZW4uc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIWhhc1NwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnQ29tbWVudHMgbXVzdCBiZSBzZXBhcmF0ZWQgZnJvbSBvdGhlciB0b2tlbnMgYnkgd2hpdGUgc3BhY2UgY2hhcmFjdGVycyc7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdNSVNTSU5HX0NIQVInLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGVuZ3RoICs9IHRva2VuLnNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgY29tbWVudCA9IHRva2VuLnNvdXJjZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ1VORVhQRUNURURfVE9LRU4nLCB0b2tlbi5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBsZW5ndGggKz0gdG9rZW4uc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBVbmV4cGVjdGVkIHRva2VuIGluIGJsb2NrIHNjYWxhciBoZWFkZXI6ICR7dG9rZW4udHlwZX1gO1xuICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdVTkVYUEVDVEVEX1RPS0VOJywgbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdHMgPSB0b2tlbi5zb3VyY2U7XG4gICAgICAgICAgICAgICAgaWYgKHRzICYmIHR5cGVvZiB0cyA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCArPSB0cy5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgbW9kZSwgaW5kZW50LCBjaG9tcCwgY29tbWVudCwgbGVuZ3RoIH07XG59XG4vKiogQHJldHVybnMgQXJyYXkgb2YgbGluZXMgc3BsaXQgdXAgYXMgYFtpbmRlbnQsIGNvbnRlbnRdYCAqL1xuZnVuY3Rpb24gc3BsaXRMaW5lcyhzb3VyY2UpIHtcbiAgICBjb25zdCBzcGxpdCA9IHNvdXJjZS5zcGxpdCgvXFxuKCAqKS8pO1xuICAgIGNvbnN0IGZpcnN0ID0gc3BsaXRbMF07XG4gICAgY29uc3QgbSA9IGZpcnN0Lm1hdGNoKC9eKCAqKS8pO1xuICAgIGNvbnN0IGxpbmUwID0gbT8uWzFdXG4gICAgICAgID8gW21bMV0sIGZpcnN0LnNsaWNlKG1bMV0ubGVuZ3RoKV1cbiAgICAgICAgOiBbJycsIGZpcnN0XTtcbiAgICBjb25zdCBsaW5lcyA9IFtsaW5lMF07XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzcGxpdC5sZW5ndGg7IGkgKz0gMilcbiAgICAgICAgbGluZXMucHVzaChbc3BsaXRbaV0sIHNwbGl0W2kgKyAxXV0pO1xuICAgIHJldHVybiBsaW5lcztcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZUJsb2NrU2NhbGFyIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9TY2FsYXIuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUVuZCB9IGZyb20gJy4vcmVzb2x2ZS1lbmQuanMnO1xuXG5mdW5jdGlvbiByZXNvbHZlRmxvd1NjYWxhcihzY2FsYXIsIHN0cmljdCwgb25FcnJvcikge1xuICAgIGNvbnN0IHsgb2Zmc2V0LCB0eXBlLCBzb3VyY2UsIGVuZCB9ID0gc2NhbGFyO1xuICAgIGxldCBfdHlwZTtcbiAgICBsZXQgdmFsdWU7XG4gICAgY29uc3QgX29uRXJyb3IgPSAocmVsLCBjb2RlLCBtc2cpID0+IG9uRXJyb3Iob2Zmc2V0ICsgcmVsLCBjb2RlLCBtc2cpO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICAgICAgX3R5cGUgPSBTY2FsYXIuUExBSU47XG4gICAgICAgICAgICB2YWx1ZSA9IHBsYWluVmFsdWUoc291cmNlLCBfb25FcnJvcik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgX3R5cGUgPSBTY2FsYXIuUVVPVEVfU0lOR0xFO1xuICAgICAgICAgICAgdmFsdWUgPSBzaW5nbGVRdW90ZWRWYWx1ZShzb3VyY2UsIF9vbkVycm9yKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICBfdHlwZSA9IFNjYWxhci5RVU9URV9ET1VCTEU7XG4gICAgICAgICAgICB2YWx1ZSA9IGRvdWJsZVF1b3RlZFZhbHVlKHNvdXJjZSwgX29uRXJyb3IpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBvbkVycm9yKHNjYWxhciwgJ1VORVhQRUNURURfVE9LRU4nLCBgRXhwZWN0ZWQgYSBmbG93IHNjYWxhciB2YWx1ZSwgYnV0IGZvdW5kOiAke3R5cGV9YCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICAgICAgICB0eXBlOiBudWxsLFxuICAgICAgICAgICAgICAgIGNvbW1lbnQ6ICcnLFxuICAgICAgICAgICAgICAgIHJhbmdlOiBbb2Zmc2V0LCBvZmZzZXQgKyBzb3VyY2UubGVuZ3RoLCBvZmZzZXQgKyBzb3VyY2UubGVuZ3RoXVxuICAgICAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWVFbmQgPSBvZmZzZXQgKyBzb3VyY2UubGVuZ3RoO1xuICAgIGNvbnN0IHJlID0gcmVzb2x2ZUVuZChlbmQsIHZhbHVlRW5kLCBzdHJpY3QsIG9uRXJyb3IpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICB0eXBlOiBfdHlwZSxcbiAgICAgICAgY29tbWVudDogcmUuY29tbWVudCxcbiAgICAgICAgcmFuZ2U6IFtvZmZzZXQsIHZhbHVlRW5kLCByZS5vZmZzZXRdXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBsYWluVmFsdWUoc291cmNlLCBvbkVycm9yKSB7XG4gICAgbGV0IGJhZENoYXIgPSAnJztcbiAgICBzd2l0Y2ggKHNvdXJjZVswXSkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICBjYXNlICdcXHQnOlxuICAgICAgICAgICAgYmFkQ2hhciA9ICdhIHRhYiBjaGFyYWN0ZXInO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJywnOlxuICAgICAgICAgICAgYmFkQ2hhciA9ICdmbG93IGluZGljYXRvciBjaGFyYWN0ZXIgLCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnJSc6XG4gICAgICAgICAgICBiYWRDaGFyID0gJ2RpcmVjdGl2ZSBpbmRpY2F0b3IgY2hhcmFjdGVyICUnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3wnOlxuICAgICAgICBjYXNlICc+Jzoge1xuICAgICAgICAgICAgYmFkQ2hhciA9IGBibG9jayBzY2FsYXIgaW5kaWNhdG9yICR7c291cmNlWzBdfWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdAJzpcbiAgICAgICAgY2FzZSAnYCc6IHtcbiAgICAgICAgICAgIGJhZENoYXIgPSBgcmVzZXJ2ZWQgY2hhcmFjdGVyICR7c291cmNlWzBdfWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYmFkQ2hhcilcbiAgICAgICAgb25FcnJvcigwLCAnQkFEX1NDQUxBUl9TVEFSVCcsIGBQbGFpbiB2YWx1ZSBjYW5ub3Qgc3RhcnQgd2l0aCAke2JhZENoYXJ9YCk7XG4gICAgcmV0dXJuIGZvbGRMaW5lcyhzb3VyY2UpO1xufVxuZnVuY3Rpb24gc2luZ2xlUXVvdGVkVmFsdWUoc291cmNlLCBvbkVycm9yKSB7XG4gICAgaWYgKHNvdXJjZVtzb3VyY2UubGVuZ3RoIC0gMV0gIT09IFwiJ1wiIHx8IHNvdXJjZS5sZW5ndGggPT09IDEpXG4gICAgICAgIG9uRXJyb3Ioc291cmNlLmxlbmd0aCwgJ01JU1NJTkdfQ0hBUicsIFwiTWlzc2luZyBjbG9zaW5nICdxdW90ZVwiKTtcbiAgICByZXR1cm4gZm9sZExpbmVzKHNvdXJjZS5zbGljZSgxLCAtMSkpLnJlcGxhY2UoLycnL2csIFwiJ1wiKTtcbn1cbmZ1bmN0aW9uIGZvbGRMaW5lcyhzb3VyY2UpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbmVnYXRpdmUgbG9va2JlaGluZCBoZXJlIGFuZCBpbiB0aGUgYHJlYCBSZWdFeHAgaXMgdG9cbiAgICAgKiBwcmV2ZW50IGNhdXNpbmcgYSBwb2x5bm9taWFsIHNlYXJjaCB0aW1lIGluIGNlcnRhaW4gY2FzZXMuXG4gICAgICpcbiAgICAgKiBUaGUgdHJ5LWNhdGNoIGlzIGZvciBTYWZhcmksIHdoaWNoIGRvZXNuJ3Qgc3VwcG9ydCB0aGlzIHlldDpcbiAgICAgKiBodHRwczovL2Nhbml1c2UuY29tL2pzLXJlZ2V4cC1sb29rYmVoaW5kXG4gICAgICovXG4gICAgbGV0IGZpcnN0LCBsaW5lO1xuICAgIHRyeSB7XG4gICAgICAgIGZpcnN0ID0gbmV3IFJlZ0V4cCgnKC4qPykoPzwhWyBcXHRdKVsgXFx0XSpcXHI/XFxuJywgJ3N5Jyk7XG4gICAgICAgIGxpbmUgPSBuZXcgUmVnRXhwKCdbIFxcdF0qKC4qPykoPzooPzwhWyBcXHRdKVsgXFx0XSopP1xccj9cXG4nLCAnc3knKTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICBmaXJzdCA9IC8oLio/KVsgXFx0XSpcXHI/XFxuL3N5O1xuICAgICAgICBsaW5lID0gL1sgXFx0XSooLio/KVsgXFx0XSpcXHI/XFxuL3N5O1xuICAgIH1cbiAgICBsZXQgbWF0Y2ggPSBmaXJzdC5leGVjKHNvdXJjZSk7XG4gICAgaWYgKCFtYXRjaClcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICBsZXQgcmVzID0gbWF0Y2hbMV07XG4gICAgbGV0IHNlcCA9ICcgJztcbiAgICBsZXQgcG9zID0gZmlyc3QubGFzdEluZGV4O1xuICAgIGxpbmUubGFzdEluZGV4ID0gcG9zO1xuICAgIHdoaWxlICgobWF0Y2ggPSBsaW5lLmV4ZWMoc291cmNlKSkpIHtcbiAgICAgICAgaWYgKG1hdGNoWzFdID09PSAnJykge1xuICAgICAgICAgICAgaWYgKHNlcCA9PT0gJ1xcbicpXG4gICAgICAgICAgICAgICAgcmVzICs9IHNlcDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBzZXAgPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcyArPSBzZXAgKyBtYXRjaFsxXTtcbiAgICAgICAgICAgIHNlcCA9ICcgJztcbiAgICAgICAgfVxuICAgICAgICBwb3MgPSBsaW5lLmxhc3RJbmRleDtcbiAgICB9XG4gICAgY29uc3QgbGFzdCA9IC9bIFxcdF0qKC4qKS9zeTtcbiAgICBsYXN0Lmxhc3RJbmRleCA9IHBvcztcbiAgICBtYXRjaCA9IGxhc3QuZXhlYyhzb3VyY2UpO1xuICAgIHJldHVybiByZXMgKyBzZXAgKyAobWF0Y2g/LlsxXSA/PyAnJyk7XG59XG5mdW5jdGlvbiBkb3VibGVRdW90ZWRWYWx1ZShzb3VyY2UsIG9uRXJyb3IpIHtcbiAgICBsZXQgcmVzID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzb3VyY2UubGVuZ3RoIC0gMTsgKytpKSB7XG4gICAgICAgIGNvbnN0IGNoID0gc291cmNlW2ldO1xuICAgICAgICBpZiAoY2ggPT09ICdcXHInICYmIHNvdXJjZVtpICsgMV0gPT09ICdcXG4nKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZm9sZCwgb2Zmc2V0IH0gPSBmb2xkTmV3bGluZShzb3VyY2UsIGkpO1xuICAgICAgICAgICAgcmVzICs9IGZvbGQ7XG4gICAgICAgICAgICBpID0gb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gc291cmNlWysraV07XG4gICAgICAgICAgICBjb25zdCBjYyA9IGVzY2FwZUNvZGVzW25leHRdO1xuICAgICAgICAgICAgaWYgKGNjKVxuICAgICAgICAgICAgICAgIHJlcyArPSBjYztcbiAgICAgICAgICAgIGVsc2UgaWYgKG5leHQgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgLy8gc2tpcCBlc2NhcGVkIG5ld2xpbmVzLCBidXQgc3RpbGwgdHJpbSB0aGUgZm9sbG93aW5nIGxpbmVcbiAgICAgICAgICAgICAgICBuZXh0ID0gc291cmNlW2kgKyAxXTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobmV4dCA9PT0gJyAnIHx8IG5leHQgPT09ICdcXHQnKVxuICAgICAgICAgICAgICAgICAgICBuZXh0ID0gc291cmNlWysraSArIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmV4dCA9PT0gJ1xccicgJiYgc291cmNlW2kgKyAxXSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICAvLyBza2lwIGVzY2FwZWQgQ1JMRiBuZXdsaW5lcywgYnV0IHN0aWxsIHRyaW0gdGhlIGZvbGxvd2luZyBsaW5lXG4gICAgICAgICAgICAgICAgbmV4dCA9IHNvdXJjZVsrK2kgKyAxXTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobmV4dCA9PT0gJyAnIHx8IG5leHQgPT09ICdcXHQnKVxuICAgICAgICAgICAgICAgICAgICBuZXh0ID0gc291cmNlWysraSArIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmV4dCA9PT0gJ3gnIHx8IG5leHQgPT09ICd1JyB8fCBuZXh0ID09PSAnVScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSB7IHg6IDIsIHU6IDQsIFU6IDggfVtuZXh0XTtcbiAgICAgICAgICAgICAgICByZXMgKz0gcGFyc2VDaGFyQ29kZShzb3VyY2UsIGkgKyAxLCBsZW5ndGgsIG9uRXJyb3IpO1xuICAgICAgICAgICAgICAgIGkgKz0gbGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmF3ID0gc291cmNlLnN1YnN0cihpIC0gMSwgMik7XG4gICAgICAgICAgICAgICAgb25FcnJvcihpIC0gMSwgJ0JBRF9EUV9FU0NBUEUnLCBgSW52YWxpZCBlc2NhcGUgc2VxdWVuY2UgJHtyYXd9YCk7XG4gICAgICAgICAgICAgICAgcmVzICs9IHJhdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaCA9PT0gJyAnIHx8IGNoID09PSAnXFx0Jykge1xuICAgICAgICAgICAgLy8gdHJpbSB0cmFpbGluZyB3aGl0ZXNwYWNlXG4gICAgICAgICAgICBjb25zdCB3c1N0YXJ0ID0gaTtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gc291cmNlW2kgKyAxXTtcbiAgICAgICAgICAgIHdoaWxlIChuZXh0ID09PSAnICcgfHwgbmV4dCA9PT0gJ1xcdCcpXG4gICAgICAgICAgICAgICAgbmV4dCA9IHNvdXJjZVsrK2kgKyAxXTtcbiAgICAgICAgICAgIGlmIChuZXh0ICE9PSAnXFxuJyAmJiAhKG5leHQgPT09ICdcXHInICYmIHNvdXJjZVtpICsgMl0gPT09ICdcXG4nKSlcbiAgICAgICAgICAgICAgICByZXMgKz0gaSA+IHdzU3RhcnQgPyBzb3VyY2Uuc2xpY2Uod3NTdGFydCwgaSArIDEpIDogY2g7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXMgKz0gY2g7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNvdXJjZVtzb3VyY2UubGVuZ3RoIC0gMV0gIT09ICdcIicgfHwgc291cmNlLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgb25FcnJvcihzb3VyY2UubGVuZ3RoLCAnTUlTU0lOR19DSEFSJywgJ01pc3NpbmcgY2xvc2luZyBcInF1b3RlJyk7XG4gICAgcmV0dXJuIHJlcztcbn1cbi8qKlxuICogRm9sZCBhIHNpbmdsZSBuZXdsaW5lIGludG8gYSBzcGFjZSwgbXVsdGlwbGUgbmV3bGluZXMgdG8gTiAtIDEgbmV3bGluZXMuXG4gKiBQcmVzdW1lcyBgc291cmNlW29mZnNldF0gPT09ICdcXG4nYFxuICovXG5mdW5jdGlvbiBmb2xkTmV3bGluZShzb3VyY2UsIG9mZnNldCkge1xuICAgIGxldCBmb2xkID0gJyc7XG4gICAgbGV0IGNoID0gc291cmNlW29mZnNldCArIDFdO1xuICAgIHdoaWxlIChjaCA9PT0gJyAnIHx8IGNoID09PSAnXFx0JyB8fCBjaCA9PT0gJ1xcbicgfHwgY2ggPT09ICdcXHInKSB7XG4gICAgICAgIGlmIChjaCA9PT0gJ1xccicgJiYgc291cmNlW29mZnNldCArIDJdICE9PSAnXFxuJylcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBpZiAoY2ggPT09ICdcXG4nKVxuICAgICAgICAgICAgZm9sZCArPSAnXFxuJztcbiAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgIGNoID0gc291cmNlW29mZnNldCArIDFdO1xuICAgIH1cbiAgICBpZiAoIWZvbGQpXG4gICAgICAgIGZvbGQgPSAnICc7XG4gICAgcmV0dXJuIHsgZm9sZCwgb2Zmc2V0IH07XG59XG5jb25zdCBlc2NhcGVDb2RlcyA9IHtcbiAgICAnMCc6ICdcXDAnLCAvLyBudWxsIGNoYXJhY3RlclxuICAgIGE6ICdcXHgwNycsIC8vIGJlbGwgY2hhcmFjdGVyXG4gICAgYjogJ1xcYicsIC8vIGJhY2tzcGFjZVxuICAgIGU6ICdcXHgxYicsIC8vIGVzY2FwZSBjaGFyYWN0ZXJcbiAgICBmOiAnXFxmJywgLy8gZm9ybSBmZWVkXG4gICAgbjogJ1xcbicsIC8vIGxpbmUgZmVlZFxuICAgIHI6ICdcXHInLCAvLyBjYXJyaWFnZSByZXR1cm5cbiAgICB0OiAnXFx0JywgLy8gaG9yaXpvbnRhbCB0YWJcbiAgICB2OiAnXFx2JywgLy8gdmVydGljYWwgdGFiXG4gICAgTjogJ1xcdTAwODUnLCAvLyBVbmljb2RlIG5leHQgbGluZVxuICAgIF86ICdcXHUwMGEwJywgLy8gVW5pY29kZSBub24tYnJlYWtpbmcgc3BhY2VcbiAgICBMOiAnXFx1MjAyOCcsIC8vIFVuaWNvZGUgbGluZSBzZXBhcmF0b3JcbiAgICBQOiAnXFx1MjAyOScsIC8vIFVuaWNvZGUgcGFyYWdyYXBoIHNlcGFyYXRvclxuICAgICcgJzogJyAnLFxuICAgICdcIic6ICdcIicsXG4gICAgJy8nOiAnLycsXG4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgJ1xcdCc6ICdcXHQnXG59O1xuZnVuY3Rpb24gcGFyc2VDaGFyQ29kZShzb3VyY2UsIG9mZnNldCwgbGVuZ3RoLCBvbkVycm9yKSB7XG4gICAgY29uc3QgY2MgPSBzb3VyY2Uuc3Vic3RyKG9mZnNldCwgbGVuZ3RoKTtcbiAgICBjb25zdCBvayA9IGNjLmxlbmd0aCA9PT0gbGVuZ3RoICYmIC9eWzAtOWEtZkEtRl0rJC8udGVzdChjYyk7XG4gICAgY29uc3QgY29kZSA9IG9rID8gcGFyc2VJbnQoY2MsIDE2KSA6IE5hTjtcbiAgICBpZiAoaXNOYU4oY29kZSkpIHtcbiAgICAgICAgY29uc3QgcmF3ID0gc291cmNlLnN1YnN0cihvZmZzZXQgLSAyLCBsZW5ndGggKyAyKTtcbiAgICAgICAgb25FcnJvcihvZmZzZXQgLSAyLCAnQkFEX0RRX0VTQ0FQRScsIGBJbnZhbGlkIGVzY2FwZSBzZXF1ZW5jZSAke3Jhd31gKTtcbiAgICAgICAgcmV0dXJuIHJhdztcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KGNvZGUpO1xufVxuXG5leHBvcnQgeyByZXNvbHZlRmxvd1NjYWxhciB9O1xuIiwiaW1wb3J0IHsgaXNTY2FsYXIsIFNDQUxBUiB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyByZXNvbHZlQmxvY2tTY2FsYXIgfSBmcm9tICcuL3Jlc29sdmUtYmxvY2stc2NhbGFyLmpzJztcbmltcG9ydCB7IHJlc29sdmVGbG93U2NhbGFyIH0gZnJvbSAnLi9yZXNvbHZlLWZsb3ctc2NhbGFyLmpzJztcblxuZnVuY3Rpb24gY29tcG9zZVNjYWxhcihjdHgsIHRva2VuLCB0YWdUb2tlbiwgb25FcnJvcikge1xuICAgIGNvbnN0IHsgdmFsdWUsIHR5cGUsIGNvbW1lbnQsIHJhbmdlIH0gPSB0b2tlbi50eXBlID09PSAnYmxvY2stc2NhbGFyJ1xuICAgICAgICA/IHJlc29sdmVCbG9ja1NjYWxhcihjdHgsIHRva2VuLCBvbkVycm9yKVxuICAgICAgICA6IHJlc29sdmVGbG93U2NhbGFyKHRva2VuLCBjdHgub3B0aW9ucy5zdHJpY3QsIG9uRXJyb3IpO1xuICAgIGNvbnN0IHRhZ05hbWUgPSB0YWdUb2tlblxuICAgICAgICA/IGN0eC5kaXJlY3RpdmVzLnRhZ05hbWUodGFnVG9rZW4uc291cmNlLCBtc2cgPT4gb25FcnJvcih0YWdUb2tlbiwgJ1RBR19SRVNPTFZFX0ZBSUxFRCcsIG1zZykpXG4gICAgICAgIDogbnVsbDtcbiAgICBsZXQgdGFnO1xuICAgIGlmIChjdHgub3B0aW9ucy5zdHJpbmdLZXlzICYmIGN0eC5hdEtleSkge1xuICAgICAgICB0YWcgPSBjdHguc2NoZW1hW1NDQUxBUl07XG4gICAgfVxuICAgIGVsc2UgaWYgKHRhZ05hbWUpXG4gICAgICAgIHRhZyA9IGZpbmRTY2FsYXJUYWdCeU5hbWUoY3R4LnNjaGVtYSwgdmFsdWUsIHRhZ05hbWUsIHRhZ1Rva2VuLCBvbkVycm9yKTtcbiAgICBlbHNlIGlmICh0b2tlbi50eXBlID09PSAnc2NhbGFyJylcbiAgICAgICAgdGFnID0gZmluZFNjYWxhclRhZ0J5VGVzdChjdHgsIHZhbHVlLCB0b2tlbiwgb25FcnJvcik7XG4gICAgZWxzZVxuICAgICAgICB0YWcgPSBjdHguc2NoZW1hW1NDQUxBUl07XG4gICAgbGV0IHNjYWxhcjtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXMgPSB0YWcucmVzb2x2ZSh2YWx1ZSwgbXNnID0+IG9uRXJyb3IodGFnVG9rZW4gPz8gdG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBtc2cpLCBjdHgub3B0aW9ucyk7XG4gICAgICAgIHNjYWxhciA9IGlzU2NhbGFyKHJlcykgPyByZXMgOiBuZXcgU2NhbGFyKHJlcyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zdCBtc2cgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcik7XG4gICAgICAgIG9uRXJyb3IodGFnVG9rZW4gPz8gdG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBtc2cpO1xuICAgICAgICBzY2FsYXIgPSBuZXcgU2NhbGFyKHZhbHVlKTtcbiAgICB9XG4gICAgc2NhbGFyLnJhbmdlID0gcmFuZ2U7XG4gICAgc2NhbGFyLnNvdXJjZSA9IHZhbHVlO1xuICAgIGlmICh0eXBlKVxuICAgICAgICBzY2FsYXIudHlwZSA9IHR5cGU7XG4gICAgaWYgKHRhZ05hbWUpXG4gICAgICAgIHNjYWxhci50YWcgPSB0YWdOYW1lO1xuICAgIGlmICh0YWcuZm9ybWF0KVxuICAgICAgICBzY2FsYXIuZm9ybWF0ID0gdGFnLmZvcm1hdDtcbiAgICBpZiAoY29tbWVudClcbiAgICAgICAgc2NhbGFyLmNvbW1lbnQgPSBjb21tZW50O1xuICAgIHJldHVybiBzY2FsYXI7XG59XG5mdW5jdGlvbiBmaW5kU2NhbGFyVGFnQnlOYW1lKHNjaGVtYSwgdmFsdWUsIHRhZ05hbWUsIHRhZ1Rva2VuLCBvbkVycm9yKSB7XG4gICAgaWYgKHRhZ05hbWUgPT09ICchJylcbiAgICAgICAgcmV0dXJuIHNjaGVtYVtTQ0FMQVJdOyAvLyBub24tc3BlY2lmaWMgdGFnXG4gICAgY29uc3QgbWF0Y2hXaXRoVGVzdCA9IFtdO1xuICAgIGZvciAoY29uc3QgdGFnIG9mIHNjaGVtYS50YWdzKSB7XG4gICAgICAgIGlmICghdGFnLmNvbGxlY3Rpb24gJiYgdGFnLnRhZyA9PT0gdGFnTmFtZSkge1xuICAgICAgICAgICAgaWYgKHRhZy5kZWZhdWx0ICYmIHRhZy50ZXN0KVxuICAgICAgICAgICAgICAgIG1hdGNoV2l0aFRlc3QucHVzaCh0YWcpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiB0YWc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCB0YWcgb2YgbWF0Y2hXaXRoVGVzdClcbiAgICAgICAgaWYgKHRhZy50ZXN0Py50ZXN0KHZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybiB0YWc7XG4gICAgY29uc3Qga3QgPSBzY2hlbWEua25vd25UYWdzW3RhZ05hbWVdO1xuICAgIGlmIChrdCAmJiAha3QuY29sbGVjdGlvbikge1xuICAgICAgICAvLyBFbnN1cmUgdGhhdCB0aGUga25vd24gdGFnIGlzIGF2YWlsYWJsZSBmb3Igc3RyaW5naWZ5aW5nLFxuICAgICAgICAvLyBidXQgZG9lcyBub3QgZ2V0IHVzZWQgYnkgZGVmYXVsdC5cbiAgICAgICAgc2NoZW1hLnRhZ3MucHVzaChPYmplY3QuYXNzaWduKHt9LCBrdCwgeyBkZWZhdWx0OiBmYWxzZSwgdGVzdDogdW5kZWZpbmVkIH0pKTtcbiAgICAgICAgcmV0dXJuIGt0O1xuICAgIH1cbiAgICBvbkVycm9yKHRhZ1Rva2VuLCAnVEFHX1JFU09MVkVfRkFJTEVEJywgYFVucmVzb2x2ZWQgdGFnOiAke3RhZ05hbWV9YCwgdGFnTmFtZSAhPT0gJ3RhZzp5YW1sLm9yZywyMDAyOnN0cicpO1xuICAgIHJldHVybiBzY2hlbWFbU0NBTEFSXTtcbn1cbmZ1bmN0aW9uIGZpbmRTY2FsYXJUYWdCeVRlc3QoeyBhdEtleSwgZGlyZWN0aXZlcywgc2NoZW1hIH0sIHZhbHVlLCB0b2tlbiwgb25FcnJvcikge1xuICAgIGNvbnN0IHRhZyA9IHNjaGVtYS50YWdzLmZpbmQodGFnID0+ICh0YWcuZGVmYXVsdCA9PT0gdHJ1ZSB8fCAoYXRLZXkgJiYgdGFnLmRlZmF1bHQgPT09ICdrZXknKSkgJiZcbiAgICAgICAgdGFnLnRlc3Q/LnRlc3QodmFsdWUpKSB8fCBzY2hlbWFbU0NBTEFSXTtcbiAgICBpZiAoc2NoZW1hLmNvbXBhdCkge1xuICAgICAgICBjb25zdCBjb21wYXQgPSBzY2hlbWEuY29tcGF0LmZpbmQodGFnID0+IHRhZy5kZWZhdWx0ICYmIHRhZy50ZXN0Py50ZXN0KHZhbHVlKSkgPz9cbiAgICAgICAgICAgIHNjaGVtYVtTQ0FMQVJdO1xuICAgICAgICBpZiAodGFnLnRhZyAhPT0gY29tcGF0LnRhZykge1xuICAgICAgICAgICAgY29uc3QgdHMgPSBkaXJlY3RpdmVzLnRhZ1N0cmluZyh0YWcudGFnKTtcbiAgICAgICAgICAgIGNvbnN0IGNzID0gZGlyZWN0aXZlcy50YWdTdHJpbmcoY29tcGF0LnRhZyk7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBgVmFsdWUgbWF5IGJlIHBhcnNlZCBhcyBlaXRoZXIgJHt0c30gb3IgJHtjc31gO1xuICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ1RBR19SRVNPTFZFX0ZBSUxFRCcsIG1zZywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhZztcbn1cblxuZXhwb3J0IHsgY29tcG9zZVNjYWxhciB9O1xuIiwiZnVuY3Rpb24gZW1wdHlTY2FsYXJQb3NpdGlvbihvZmZzZXQsIGJlZm9yZSwgcG9zKSB7XG4gICAgaWYgKGJlZm9yZSkge1xuICAgICAgICBwb3MgPz8gKHBvcyA9IGJlZm9yZS5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gcG9zIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIGxldCBzdCA9IGJlZm9yZVtpXTtcbiAgICAgICAgICAgIHN3aXRjaCAoc3QudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0IC09IHN0LnNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGVjaG5pY2FsbHksIGFuIGVtcHR5IHNjYWxhciBpcyBpbW1lZGlhdGVseSBhZnRlciB0aGUgbGFzdCBub24tZW1wdHlcbiAgICAgICAgICAgIC8vIG5vZGUsIGJ1dCBpdCdzIG1vcmUgdXNlZnVsIHRvIHBsYWNlIGl0IGFmdGVyIGFueSB3aGl0ZXNwYWNlLlxuICAgICAgICAgICAgc3QgPSBiZWZvcmVbKytpXTtcbiAgICAgICAgICAgIHdoaWxlIChzdD8udHlwZSA9PT0gJ3NwYWNlJykge1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSBzdC5zb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHN0ID0gYmVmb3JlWysraV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2Zmc2V0O1xufVxuXG5leHBvcnQgeyBlbXB0eVNjYWxhclBvc2l0aW9uIH07XG4iLCJpbXBvcnQgeyBBbGlhcyB9IGZyb20gJy4uL25vZGVzL0FsaWFzLmpzJztcbmltcG9ydCB7IGlzU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgY29tcG9zZUNvbGxlY3Rpb24gfSBmcm9tICcuL2NvbXBvc2UtY29sbGVjdGlvbi5qcyc7XG5pbXBvcnQgeyBjb21wb3NlU2NhbGFyIH0gZnJvbSAnLi9jb21wb3NlLXNjYWxhci5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRW5kIH0gZnJvbSAnLi9yZXNvbHZlLWVuZC5qcyc7XG5pbXBvcnQgeyBlbXB0eVNjYWxhclBvc2l0aW9uIH0gZnJvbSAnLi91dGlsLWVtcHR5LXNjYWxhci1wb3NpdGlvbi5qcyc7XG5cbmNvbnN0IENOID0geyBjb21wb3NlTm9kZSwgY29tcG9zZUVtcHR5Tm9kZSB9O1xuZnVuY3Rpb24gY29tcG9zZU5vZGUoY3R4LCB0b2tlbiwgcHJvcHMsIG9uRXJyb3IpIHtcbiAgICBjb25zdCBhdEtleSA9IGN0eC5hdEtleTtcbiAgICBjb25zdCB7IHNwYWNlQmVmb3JlLCBjb21tZW50LCBhbmNob3IsIHRhZyB9ID0gcHJvcHM7XG4gICAgbGV0IG5vZGU7XG4gICAgbGV0IGlzU3JjVG9rZW4gPSB0cnVlO1xuICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICBjYXNlICdhbGlhcyc6XG4gICAgICAgICAgICBub2RlID0gY29tcG9zZUFsaWFzKGN0eCwgdG9rZW4sIG9uRXJyb3IpO1xuICAgICAgICAgICAgaWYgKGFuY2hvciB8fCB0YWcpXG4gICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ0FMSUFTX1BST1BTJywgJ0FuIGFsaWFzIG5vZGUgbXVzdCBub3Qgc3BlY2lmeSBhbnkgcHJvcGVydGllcycpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOlxuICAgICAgICAgICAgbm9kZSA9IGNvbXBvc2VTY2FsYXIoY3R4LCB0b2tlbiwgdGFnLCBvbkVycm9yKTtcbiAgICAgICAgICAgIGlmIChhbmNob3IpXG4gICAgICAgICAgICAgICAgbm9kZS5hbmNob3IgPSBhbmNob3Iuc291cmNlLnN1YnN0cmluZygxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdibG9jay1tYXAnOlxuICAgICAgICBjYXNlICdibG9jay1zZXEnOlxuICAgICAgICBjYXNlICdmbG93LWNvbGxlY3Rpb24nOlxuICAgICAgICAgICAgbm9kZSA9IGNvbXBvc2VDb2xsZWN0aW9uKENOLCBjdHgsIHRva2VuLCBwcm9wcywgb25FcnJvcik7XG4gICAgICAgICAgICBpZiAoYW5jaG9yKVxuICAgICAgICAgICAgICAgIG5vZGUuYW5jaG9yID0gYW5jaG9yLnNvdXJjZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHRva2VuLnR5cGUgPT09ICdlcnJvcidcbiAgICAgICAgICAgICAgICA/IHRva2VuLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICA6IGBVbnN1cHBvcnRlZCB0b2tlbiAodHlwZTogJHt0b2tlbi50eXBlfSlgO1xuICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ1VORVhQRUNURURfVE9LRU4nLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIG5vZGUgPSBjb21wb3NlRW1wdHlOb2RlKGN0eCwgdG9rZW4ub2Zmc2V0LCB1bmRlZmluZWQsIG51bGwsIHByb3BzLCBvbkVycm9yKTtcbiAgICAgICAgICAgIGlzU3JjVG9rZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYW5jaG9yICYmIG5vZGUuYW5jaG9yID09PSAnJylcbiAgICAgICAgb25FcnJvcihhbmNob3IsICdCQURfQUxJQVMnLCAnQW5jaG9yIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcnKTtcbiAgICBpZiAoYXRLZXkgJiZcbiAgICAgICAgY3R4Lm9wdGlvbnMuc3RyaW5nS2V5cyAmJlxuICAgICAgICAoIWlzU2NhbGFyKG5vZGUpIHx8XG4gICAgICAgICAgICB0eXBlb2Ygbm9kZS52YWx1ZSAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIChub2RlLnRhZyAmJiBub2RlLnRhZyAhPT0gJ3RhZzp5YW1sLm9yZywyMDAyOnN0cicpKSkge1xuICAgICAgICBjb25zdCBtc2cgPSAnV2l0aCBzdHJpbmdLZXlzLCBhbGwga2V5cyBtdXN0IGJlIHN0cmluZ3MnO1xuICAgICAgICBvbkVycm9yKHRhZyA/PyB0b2tlbiwgJ05PTl9TVFJJTkdfS0VZJywgbXNnKTtcbiAgICB9XG4gICAgaWYgKHNwYWNlQmVmb3JlKVxuICAgICAgICBub2RlLnNwYWNlQmVmb3JlID0gdHJ1ZTtcbiAgICBpZiAoY29tbWVudCkge1xuICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ3NjYWxhcicgJiYgdG9rZW4uc291cmNlID09PSAnJylcbiAgICAgICAgICAgIG5vZGUuY29tbWVudCA9IGNvbW1lbnQ7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG5vZGUuY29tbWVudEJlZm9yZSA9IGNvbW1lbnQ7XG4gICAgfVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVHlwZSBjaGVja2luZyBtaXNzZXMgbWVhbmluZyBvZiBpc1NyY1Rva2VuXG4gICAgaWYgKGN0eC5vcHRpb25zLmtlZXBTb3VyY2VUb2tlbnMgJiYgaXNTcmNUb2tlbilcbiAgICAgICAgbm9kZS5zcmNUb2tlbiA9IHRva2VuO1xuICAgIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gY29tcG9zZUVtcHR5Tm9kZShjdHgsIG9mZnNldCwgYmVmb3JlLCBwb3MsIHsgc3BhY2VCZWZvcmUsIGNvbW1lbnQsIGFuY2hvciwgdGFnLCBlbmQgfSwgb25FcnJvcikge1xuICAgIGNvbnN0IHRva2VuID0ge1xuICAgICAgICB0eXBlOiAnc2NhbGFyJyxcbiAgICAgICAgb2Zmc2V0OiBlbXB0eVNjYWxhclBvc2l0aW9uKG9mZnNldCwgYmVmb3JlLCBwb3MpLFxuICAgICAgICBpbmRlbnQ6IC0xLFxuICAgICAgICBzb3VyY2U6ICcnXG4gICAgfTtcbiAgICBjb25zdCBub2RlID0gY29tcG9zZVNjYWxhcihjdHgsIHRva2VuLCB0YWcsIG9uRXJyb3IpO1xuICAgIGlmIChhbmNob3IpIHtcbiAgICAgICAgbm9kZS5hbmNob3IgPSBhbmNob3Iuc291cmNlLnN1YnN0cmluZygxKTtcbiAgICAgICAgaWYgKG5vZGUuYW5jaG9yID09PSAnJylcbiAgICAgICAgICAgIG9uRXJyb3IoYW5jaG9yLCAnQkFEX0FMSUFTJywgJ0FuY2hvciBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nJyk7XG4gICAgfVxuICAgIGlmIChzcGFjZUJlZm9yZSlcbiAgICAgICAgbm9kZS5zcGFjZUJlZm9yZSA9IHRydWU7XG4gICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgICAgbm9kZS5jb21tZW50ID0gY29tbWVudDtcbiAgICAgICAgbm9kZS5yYW5nZVsyXSA9IGVuZDtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG59XG5mdW5jdGlvbiBjb21wb3NlQWxpYXMoeyBvcHRpb25zIH0sIHsgb2Zmc2V0LCBzb3VyY2UsIGVuZCB9LCBvbkVycm9yKSB7XG4gICAgY29uc3QgYWxpYXMgPSBuZXcgQWxpYXMoc291cmNlLnN1YnN0cmluZygxKSk7XG4gICAgaWYgKGFsaWFzLnNvdXJjZSA9PT0gJycpXG4gICAgICAgIG9uRXJyb3Iob2Zmc2V0LCAnQkFEX0FMSUFTJywgJ0FsaWFzIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcnKTtcbiAgICBpZiAoYWxpYXMuc291cmNlLmVuZHNXaXRoKCc6JykpXG4gICAgICAgIG9uRXJyb3Iob2Zmc2V0ICsgc291cmNlLmxlbmd0aCAtIDEsICdCQURfQUxJQVMnLCAnQWxpYXMgZW5kaW5nIGluIDogaXMgYW1iaWd1b3VzJywgdHJ1ZSk7XG4gICAgY29uc3QgdmFsdWVFbmQgPSBvZmZzZXQgKyBzb3VyY2UubGVuZ3RoO1xuICAgIGNvbnN0IHJlID0gcmVzb2x2ZUVuZChlbmQsIHZhbHVlRW5kLCBvcHRpb25zLnN0cmljdCwgb25FcnJvcik7XG4gICAgYWxpYXMucmFuZ2UgPSBbb2Zmc2V0LCB2YWx1ZUVuZCwgcmUub2Zmc2V0XTtcbiAgICBpZiAocmUuY29tbWVudClcbiAgICAgICAgYWxpYXMuY29tbWVudCA9IHJlLmNvbW1lbnQ7XG4gICAgcmV0dXJuIGFsaWFzO1xufVxuXG5leHBvcnQgeyBjb21wb3NlRW1wdHlOb2RlLCBjb21wb3NlTm9kZSB9O1xuIiwiaW1wb3J0IHsgRGlyZWN0aXZlcyB9IGZyb20gJy4uL2RvYy9kaXJlY3RpdmVzLmpzJztcbmltcG9ydCB7IERvY3VtZW50IH0gZnJvbSAnLi4vZG9jL0RvY3VtZW50LmpzJztcbmltcG9ydCB7IFlBTUxXYXJuaW5nLCBZQU1MUGFyc2VFcnJvciB9IGZyb20gJy4uL2Vycm9ycy5qcyc7XG5pbXBvcnQgeyBpc0NvbGxlY3Rpb24sIGlzUGFpciB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IGNvbXBvc2VEb2MgfSBmcm9tICcuL2NvbXBvc2UtZG9jLmpzJztcbmltcG9ydCB7IHJlc29sdmVFbmQgfSBmcm9tICcuL3Jlc29sdmUtZW5kLmpzJztcblxuZnVuY3Rpb24gZ2V0RXJyb3JQb3Moc3JjKSB7XG4gICAgaWYgKHR5cGVvZiBzcmMgPT09ICdudW1iZXInKVxuICAgICAgICByZXR1cm4gW3NyYywgc3JjICsgMV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3JjKSlcbiAgICAgICAgcmV0dXJuIHNyYy5sZW5ndGggPT09IDIgPyBzcmMgOiBbc3JjWzBdLCBzcmNbMV1dO1xuICAgIGNvbnN0IHsgb2Zmc2V0LCBzb3VyY2UgfSA9IHNyYztcbiAgICByZXR1cm4gW29mZnNldCwgb2Zmc2V0ICsgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnID8gc291cmNlLmxlbmd0aCA6IDEpXTtcbn1cbmZ1bmN0aW9uIHBhcnNlUHJlbHVkZShwcmVsdWRlKSB7XG4gICAgbGV0IGNvbW1lbnQgPSAnJztcbiAgICBsZXQgYXRDb21tZW50ID0gZmFsc2U7XG4gICAgbGV0IGFmdGVyRW1wdHlMaW5lID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVsdWRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IHByZWx1ZGVbaV07XG4gICAgICAgIHN3aXRjaCAoc291cmNlWzBdKSB7XG4gICAgICAgICAgICBjYXNlICcjJzpcbiAgICAgICAgICAgICAgICBjb21tZW50ICs9XG4gICAgICAgICAgICAgICAgICAgIChjb21tZW50ID09PSAnJyA/ICcnIDogYWZ0ZXJFbXB0eUxpbmUgPyAnXFxuXFxuJyA6ICdcXG4nKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoc291cmNlLnN1YnN0cmluZygxKSB8fCAnICcpO1xuICAgICAgICAgICAgICAgIGF0Q29tbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYWZ0ZXJFbXB0eUxpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJyUnOlxuICAgICAgICAgICAgICAgIGlmIChwcmVsdWRlW2kgKyAxXT8uWzBdICE9PSAnIycpXG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICBhdENvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBtYXkgYmUgd3JvbmcgYWZ0ZXIgZG9jLWVuZCwgYnV0IGluIHRoYXQgY2FzZSBpdCBkb2Vzbid0IG1hdHRlclxuICAgICAgICAgICAgICAgIGlmICghYXRDb21tZW50KVxuICAgICAgICAgICAgICAgICAgICBhZnRlckVtcHR5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYXRDb21tZW50ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgY29tbWVudCwgYWZ0ZXJFbXB0eUxpbmUgfTtcbn1cbi8qKlxuICogQ29tcG9zZSBhIHN0cmVhbSBvZiBDU1Qgbm9kZXMgaW50byBhIHN0cmVhbSBvZiBZQU1MIERvY3VtZW50cy5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgQ29tcG9zZXIsIFBhcnNlciB9IGZyb20gJ3lhbWwnXG4gKlxuICogY29uc3Qgc3JjOiBzdHJpbmcgPSAuLi5cbiAqIGNvbnN0IHRva2VucyA9IG5ldyBQYXJzZXIoKS5wYXJzZShzcmMpXG4gKiBjb25zdCBkb2NzID0gbmV3IENvbXBvc2VyKCkuY29tcG9zZSh0b2tlbnMpXG4gKiBgYGBcbiAqL1xuY2xhc3MgQ29tcG9zZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLmRvYyA9IG51bGw7XG4gICAgICAgIHRoaXMuYXREaXJlY3RpdmVzID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJlbHVkZSA9IFtdO1xuICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xuICAgICAgICB0aGlzLndhcm5pbmdzID0gW107XG4gICAgICAgIHRoaXMub25FcnJvciA9IChzb3VyY2UsIGNvZGUsIG1lc3NhZ2UsIHdhcm5pbmcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBvcyA9IGdldEVycm9yUG9zKHNvdXJjZSk7XG4gICAgICAgICAgICBpZiAod2FybmluZylcbiAgICAgICAgICAgICAgICB0aGlzLndhcm5pbmdzLnB1c2gobmV3IFlBTUxXYXJuaW5nKHBvcywgY29kZSwgbWVzc2FnZSkpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2gobmV3IFlBTUxQYXJzZUVycm9yKHBvcywgY29kZSwgbWVzc2FnZSkpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1udWxsaXNoLWNvYWxlc2NpbmdcbiAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gbmV3IERpcmVjdGl2ZXMoeyB2ZXJzaW9uOiBvcHRpb25zLnZlcnNpb24gfHwgJzEuMicgfSk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGRlY29yYXRlKGRvYywgYWZ0ZXJEb2MpIHtcbiAgICAgICAgY29uc3QgeyBjb21tZW50LCBhZnRlckVtcHR5TGluZSB9ID0gcGFyc2VQcmVsdWRlKHRoaXMucHJlbHVkZSk7XG4gICAgICAgIC8vY29uc29sZS5sb2coeyBkYzogZG9jLmNvbW1lbnQsIHByZWx1ZGUsIGNvbW1lbnQgfSlcbiAgICAgICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRjID0gZG9jLmNvbnRlbnRzO1xuICAgICAgICAgICAgaWYgKGFmdGVyRG9jKSB7XG4gICAgICAgICAgICAgICAgZG9jLmNvbW1lbnQgPSBkb2MuY29tbWVudCA/IGAke2RvYy5jb21tZW50fVxcbiR7Y29tbWVudH1gIDogY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFmdGVyRW1wdHlMaW5lIHx8IGRvYy5kaXJlY3RpdmVzLmRvY1N0YXJ0IHx8ICFkYykge1xuICAgICAgICAgICAgICAgIGRvYy5jb21tZW50QmVmb3JlID0gY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzQ29sbGVjdGlvbihkYykgJiYgIWRjLmZsb3cgJiYgZGMuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGxldCBpdCA9IGRjLml0ZW1zWzBdO1xuICAgICAgICAgICAgICAgIGlmIChpc1BhaXIoaXQpKVxuICAgICAgICAgICAgICAgICAgICBpdCA9IGl0LmtleTtcbiAgICAgICAgICAgICAgICBjb25zdCBjYiA9IGl0LmNvbW1lbnRCZWZvcmU7XG4gICAgICAgICAgICAgICAgaXQuY29tbWVudEJlZm9yZSA9IGNiID8gYCR7Y29tbWVudH1cXG4ke2NifWAgOiBjb21tZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2IgPSBkYy5jb21tZW50QmVmb3JlO1xuICAgICAgICAgICAgICAgIGRjLmNvbW1lbnRCZWZvcmUgPSBjYiA/IGAke2NvbW1lbnR9XFxuJHtjYn1gIDogY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWZ0ZXJEb2MpIHtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGRvYy5lcnJvcnMsIHRoaXMuZXJyb3JzKTtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGRvYy53YXJuaW5ncywgdGhpcy53YXJuaW5ncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkb2MuZXJyb3JzID0gdGhpcy5lcnJvcnM7XG4gICAgICAgICAgICBkb2Mud2FybmluZ3MgPSB0aGlzLndhcm5pbmdzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJlbHVkZSA9IFtdO1xuICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xuICAgICAgICB0aGlzLndhcm5pbmdzID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgc3RyZWFtIHN0YXR1cyBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIE1vc3RseSB1c2VmdWwgYXQgdGhlIGVuZCBvZiBpbnB1dCBmb3IgYW4gZW1wdHkgc3RyZWFtLlxuICAgICAqL1xuICAgIHN0cmVhbUluZm8oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb21tZW50OiBwYXJzZVByZWx1ZGUodGhpcy5wcmVsdWRlKS5jb21tZW50LFxuICAgICAgICAgICAgZGlyZWN0aXZlczogdGhpcy5kaXJlY3RpdmVzLFxuICAgICAgICAgICAgZXJyb3JzOiB0aGlzLmVycm9ycyxcbiAgICAgICAgICAgIHdhcm5pbmdzOiB0aGlzLndhcm5pbmdzXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXBvc2UgdG9rZW5zIGludG8gZG9jdW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZvcmNlRG9jIC0gSWYgdGhlIHN0cmVhbSBjb250YWlucyBubyBkb2N1bWVudCwgc3RpbGwgZW1pdCBhIGZpbmFsIGRvY3VtZW50IGluY2x1ZGluZyBhbnkgY29tbWVudHMgYW5kIGRpcmVjdGl2ZXMgdGhhdCB3b3VsZCBiZSBhcHBsaWVkIHRvIGEgc3Vic2VxdWVudCBkb2N1bWVudC5cbiAgICAgKiBAcGFyYW0gZW5kT2Zmc2V0IC0gU2hvdWxkIGJlIHNldCBpZiBgZm9yY2VEb2NgIGlzIGFsc28gc2V0LCB0byBzZXQgdGhlIGRvY3VtZW50IHJhbmdlIGVuZCBhbmQgdG8gaW5kaWNhdGUgZXJyb3JzIGNvcnJlY3RseS5cbiAgICAgKi9cbiAgICAqY29tcG9zZSh0b2tlbnMsIGZvcmNlRG9jID0gZmFsc2UsIGVuZE9mZnNldCA9IC0xKSB7XG4gICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zKVxuICAgICAgICAgICAgeWllbGQqIHRoaXMubmV4dCh0b2tlbik7XG4gICAgICAgIHlpZWxkKiB0aGlzLmVuZChmb3JjZURvYywgZW5kT2Zmc2V0KTtcbiAgICB9XG4gICAgLyoqIEFkdmFuY2UgdGhlIGNvbXBvc2VyIGJ5IG9uZSBDU1QgdG9rZW4uICovXG4gICAgKm5leHQodG9rZW4pIHtcbiAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdkaXJlY3RpdmUnOlxuICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aXZlcy5hZGQodG9rZW4uc291cmNlLCAob2Zmc2V0LCBtZXNzYWdlLCB3YXJuaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcyA9IGdldEVycm9yUG9zKHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgcG9zWzBdICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKHBvcywgJ0JBRF9ESVJFQ1RJVkUnLCBtZXNzYWdlLCB3YXJuaW5nKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnByZWx1ZGUucHVzaCh0b2tlbi5zb3VyY2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuYXREaXJlY3RpdmVzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RvY3VtZW50Jzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRvYyA9IGNvbXBvc2VEb2ModGhpcy5vcHRpb25zLCB0aGlzLmRpcmVjdGl2ZXMsIHRva2VuLCB0aGlzLm9uRXJyb3IpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0RGlyZWN0aXZlcyAmJiAhZG9jLmRpcmVjdGl2ZXMuZG9jU3RhcnQpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcih0b2tlbiwgJ01JU1NJTkdfQ0hBUicsICdNaXNzaW5nIGRpcmVjdGl2ZXMtZW5kL2RvYy1zdGFydCBpbmRpY2F0b3IgbGluZScpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUoZG9jLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jKVxuICAgICAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLmRvYztcbiAgICAgICAgICAgICAgICB0aGlzLmRvYyA9IGRvYztcbiAgICAgICAgICAgICAgICB0aGlzLmF0RGlyZWN0aXZlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnYnl0ZS1vcmRlci1tYXJrJzpcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5wcmVsdWRlLnB1c2godG9rZW4uc291cmNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IHRva2VuLnNvdXJjZVxuICAgICAgICAgICAgICAgICAgICA/IGAke3Rva2VuLm1lc3NhZ2V9OiAke0pTT04uc3RyaW5naWZ5KHRva2VuLnNvdXJjZSl9YFxuICAgICAgICAgICAgICAgICAgICA6IHRva2VuLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgWUFNTFBhcnNlRXJyb3IoZ2V0RXJyb3JQb3ModG9rZW4pLCAnVU5FWFBFQ1RFRF9UT0tFTicsIG1zZyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXREaXJlY3RpdmVzIHx8ICF0aGlzLmRvYylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMucHVzaChlcnJvcik7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvYy5lcnJvcnMucHVzaChlcnJvcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdkb2MtZW5kJzoge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5kb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNnID0gJ1VuZXhwZWN0ZWQgZG9jLWVuZCB3aXRob3V0IHByZWNlZGluZyBkb2N1bWVudCc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2gobmV3IFlBTUxQYXJzZUVycm9yKGdldEVycm9yUG9zKHRva2VuKSwgJ1VORVhQRUNURURfVE9LRU4nLCBtc2cpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZG9jLmRpcmVjdGl2ZXMuZG9jRW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSByZXNvbHZlRW5kKHRva2VuLmVuZCwgdG9rZW4ub2Zmc2V0ICsgdG9rZW4uc291cmNlLmxlbmd0aCwgdGhpcy5kb2Mub3B0aW9ucy5zdHJpY3QsIHRoaXMub25FcnJvcik7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWNvcmF0ZSh0aGlzLmRvYywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGVuZC5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRjID0gdGhpcy5kb2MuY29tbWVudDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2MuY29tbWVudCA9IGRjID8gYCR7ZGN9XFxuJHtlbmQuY29tbWVudH1gIDogZW5kLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZG9jLnJhbmdlWzJdID0gZW5kLm9mZnNldDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMucHVzaChuZXcgWUFNTFBhcnNlRXJyb3IoZ2V0RXJyb3JQb3ModG9rZW4pLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbnN1cHBvcnRlZCB0b2tlbiAke3Rva2VuLnR5cGV9YCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGwgYXQgZW5kIG9mIGlucHV0IHRvIHlpZWxkIGFueSByZW1haW5pbmcgZG9jdW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZm9yY2VEb2MgLSBJZiB0aGUgc3RyZWFtIGNvbnRhaW5zIG5vIGRvY3VtZW50LCBzdGlsbCBlbWl0IGEgZmluYWwgZG9jdW1lbnQgaW5jbHVkaW5nIGFueSBjb21tZW50cyBhbmQgZGlyZWN0aXZlcyB0aGF0IHdvdWxkIGJlIGFwcGxpZWQgdG8gYSBzdWJzZXF1ZW50IGRvY3VtZW50LlxuICAgICAqIEBwYXJhbSBlbmRPZmZzZXQgLSBTaG91bGQgYmUgc2V0IGlmIGBmb3JjZURvY2AgaXMgYWxzbyBzZXQsIHRvIHNldCB0aGUgZG9jdW1lbnQgcmFuZ2UgZW5kIGFuZCB0byBpbmRpY2F0ZSBlcnJvcnMgY29ycmVjdGx5LlxuICAgICAqL1xuICAgICplbmQoZm9yY2VEb2MgPSBmYWxzZSwgZW5kT2Zmc2V0ID0gLTEpIHtcbiAgICAgICAgaWYgKHRoaXMuZG9jKSB7XG4gICAgICAgICAgICB0aGlzLmRlY29yYXRlKHRoaXMuZG9jLCB0cnVlKTtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZG9jO1xuICAgICAgICAgICAgdGhpcy5kb2MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZvcmNlRG9jKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7IF9kaXJlY3RpdmVzOiB0aGlzLmRpcmVjdGl2ZXMgfSwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGRvYyA9IG5ldyBEb2N1bWVudCh1bmRlZmluZWQsIG9wdHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuYXREaXJlY3RpdmVzKVxuICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihlbmRPZmZzZXQsICdNSVNTSU5HX0NIQVInLCAnTWlzc2luZyBkaXJlY3RpdmVzLWVuZCBpbmRpY2F0b3IgbGluZScpO1xuICAgICAgICAgICAgZG9jLnJhbmdlID0gWzAsIGVuZE9mZnNldCwgZW5kT2Zmc2V0XTtcbiAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUoZG9jLCBmYWxzZSk7XG4gICAgICAgICAgICB5aWVsZCBkb2M7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IENvbXBvc2VyIH07XG4iLCJpbXBvcnQgeyBEb2N1bWVudCB9IGZyb20gJy4uL2RvYy9Eb2N1bWVudC5qcyc7XG5pbXBvcnQgeyBjb21wb3NlTm9kZSwgY29tcG9zZUVtcHR5Tm9kZSB9IGZyb20gJy4vY29tcG9zZS1ub2RlLmpzJztcbmltcG9ydCB7IHJlc29sdmVFbmQgfSBmcm9tICcuL3Jlc29sdmUtZW5kLmpzJztcbmltcG9ydCB7IHJlc29sdmVQcm9wcyB9IGZyb20gJy4vcmVzb2x2ZS1wcm9wcy5qcyc7XG5cbmZ1bmN0aW9uIGNvbXBvc2VEb2Mob3B0aW9ucywgZGlyZWN0aXZlcywgeyBvZmZzZXQsIHN0YXJ0LCB2YWx1ZSwgZW5kIH0sIG9uRXJyb3IpIHtcbiAgICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7IF9kaXJlY3RpdmVzOiBkaXJlY3RpdmVzIH0sIG9wdGlvbnMpO1xuICAgIGNvbnN0IGRvYyA9IG5ldyBEb2N1bWVudCh1bmRlZmluZWQsIG9wdHMpO1xuICAgIGNvbnN0IGN0eCA9IHtcbiAgICAgICAgYXRLZXk6IGZhbHNlLFxuICAgICAgICBhdFJvb3Q6IHRydWUsXG4gICAgICAgIGRpcmVjdGl2ZXM6IGRvYy5kaXJlY3RpdmVzLFxuICAgICAgICBvcHRpb25zOiBkb2Mub3B0aW9ucyxcbiAgICAgICAgc2NoZW1hOiBkb2Muc2NoZW1hXG4gICAgfTtcbiAgICBjb25zdCBwcm9wcyA9IHJlc29sdmVQcm9wcyhzdGFydCwge1xuICAgICAgICBpbmRpY2F0b3I6ICdkb2Mtc3RhcnQnLFxuICAgICAgICBuZXh0OiB2YWx1ZSA/PyBlbmQ/LlswXSxcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBvbkVycm9yLFxuICAgICAgICBwYXJlbnRJbmRlbnQ6IDAsXG4gICAgICAgIHN0YXJ0T25OZXdsaW5lOiB0cnVlXG4gICAgfSk7XG4gICAgaWYgKHByb3BzLmZvdW5kKSB7XG4gICAgICAgIGRvYy5kaXJlY3RpdmVzLmRvY1N0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICAodmFsdWUudHlwZSA9PT0gJ2Jsb2NrLW1hcCcgfHwgdmFsdWUudHlwZSA9PT0gJ2Jsb2NrLXNlcScpICYmXG4gICAgICAgICAgICAhcHJvcHMuaGFzTmV3bGluZSlcbiAgICAgICAgICAgIG9uRXJyb3IocHJvcHMuZW5kLCAnTUlTU0lOR19DSEFSJywgJ0Jsb2NrIGNvbGxlY3Rpb24gY2Fubm90IHN0YXJ0IG9uIHNhbWUgbGluZSB3aXRoIGRpcmVjdGl2ZXMtZW5kIG1hcmtlcicpO1xuICAgIH1cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIElmIENvbnRlbnRzIGlzIHNldCwgbGV0J3MgdHJ1c3QgdGhlIHVzZXJcbiAgICBkb2MuY29udGVudHMgPSB2YWx1ZVxuICAgICAgICA/IGNvbXBvc2VOb2RlKGN0eCwgdmFsdWUsIHByb3BzLCBvbkVycm9yKVxuICAgICAgICA6IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBwcm9wcy5lbmQsIHN0YXJ0LCBudWxsLCBwcm9wcywgb25FcnJvcik7XG4gICAgY29uc3QgY29udGVudEVuZCA9IGRvYy5jb250ZW50cy5yYW5nZVsyXTtcbiAgICBjb25zdCByZSA9IHJlc29sdmVFbmQoZW5kLCBjb250ZW50RW5kLCBmYWxzZSwgb25FcnJvcik7XG4gICAgaWYgKHJlLmNvbW1lbnQpXG4gICAgICAgIGRvYy5jb21tZW50ID0gcmUuY29tbWVudDtcbiAgICBkb2MucmFuZ2UgPSBbb2Zmc2V0LCBjb250ZW50RW5kLCByZS5vZmZzZXRdO1xuICAgIHJldHVybiBkb2M7XG59XG5cbmV4cG9ydCB7IGNvbXBvc2VEb2MgfTtcbiIsImltcG9ydCB7IHJlc29sdmVCbG9ja1NjYWxhciB9IGZyb20gJy4uL2NvbXBvc2UvcmVzb2x2ZS1ibG9jay1zY2FsYXIuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUZsb3dTY2FsYXIgfSBmcm9tICcuLi9jb21wb3NlL3Jlc29sdmUtZmxvdy1zY2FsYXIuanMnO1xuaW1wb3J0IHsgWUFNTFBhcnNlRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMuanMnO1xuaW1wb3J0IHsgc3RyaW5naWZ5U3RyaW5nIH0gZnJvbSAnLi4vc3RyaW5naWZ5L3N0cmluZ2lmeVN0cmluZy5qcyc7XG5cbmZ1bmN0aW9uIHJlc29sdmVBc1NjYWxhcih0b2tlbiwgc3RyaWN0ID0gdHJ1ZSwgb25FcnJvcikge1xuICAgIGlmICh0b2tlbikge1xuICAgICAgICBjb25zdCBfb25FcnJvciA9IChwb3MsIGNvZGUsIG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHR5cGVvZiBwb3MgPT09ICdudW1iZXInID8gcG9zIDogQXJyYXkuaXNBcnJheShwb3MpID8gcG9zWzBdIDogcG9zLm9mZnNldDtcbiAgICAgICAgICAgIGlmIChvbkVycm9yKVxuICAgICAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0LCBjb2RlLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgWUFNTFBhcnNlRXJyb3IoW29mZnNldCwgb2Zmc2V0ICsgMV0sIGNvZGUsIG1lc3NhZ2UpO1xuICAgICAgICB9O1xuICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVGbG93U2NhbGFyKHRva2VuLCBzdHJpY3QsIF9vbkVycm9yKTtcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVCbG9ja1NjYWxhcih7IG9wdGlvbnM6IHsgc3RyaWN0IH0gfSwgdG9rZW4sIF9vbkVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHNjYWxhciB0b2tlbiB3aXRoIGB2YWx1ZWBcbiAqXG4gKiBWYWx1ZXMgdGhhdCByZXByZXNlbnQgYW4gYWN0dWFsIHN0cmluZyBidXQgbWF5IGJlIHBhcnNlZCBhcyBhIGRpZmZlcmVudCB0eXBlIHNob3VsZCB1c2UgYSBgdHlwZWAgb3RoZXIgdGhhbiBgJ1BMQUlOJ2AsXG4gKiBhcyB0aGlzIGZ1bmN0aW9uIGRvZXMgbm90IHN1cHBvcnQgYW55IHNjaGVtYSBvcGVyYXRpb25zIGFuZCB3b24ndCBjaGVjayBmb3Igc3VjaCBjb25mbGljdHMuXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZhbHVlLCB3aGljaCB3aWxsIGhhdmUgaXRzIGNvbnRlbnQgcHJvcGVybHkgaW5kZW50ZWQuXG4gKiBAcGFyYW0gY29udGV4dC5lbmQgQ29tbWVudHMgYW5kIHdoaXRlc3BhY2UgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgdmFsdWUsIG9yIGFmdGVyIHRoZSBibG9jayBzY2FsYXIgaGVhZGVyLiBJZiB1bmRlZmluZWQsIGEgbmV3bGluZSB3aWxsIGJlIGFkZGVkLlxuICogQHBhcmFtIGNvbnRleHQuaW1wbGljaXRLZXkgQmVpbmcgd2l0aGluIGFuIGltcGxpY2l0IGtleSBtYXkgYWZmZWN0IHRoZSByZXNvbHZlZCB0eXBlIG9mIHRoZSB0b2tlbidzIHZhbHVlLlxuICogQHBhcmFtIGNvbnRleHQuaW5kZW50IFRoZSBpbmRlbnQgbGV2ZWwgb2YgdGhlIHRva2VuLlxuICogQHBhcmFtIGNvbnRleHQuaW5GbG93IElzIHRoaXMgc2NhbGFyIHdpdGhpbiBhIGZsb3cgY29sbGVjdGlvbj8gVGhpcyBtYXkgYWZmZWN0IHRoZSByZXNvbHZlZCB0eXBlIG9mIHRoZSB0b2tlbidzIHZhbHVlLlxuICogQHBhcmFtIGNvbnRleHQub2Zmc2V0IFRoZSBvZmZzZXQgcG9zaXRpb24gb2YgdGhlIHRva2VuLlxuICogQHBhcmFtIGNvbnRleHQudHlwZSBUaGUgcHJlZmVycmVkIHR5cGUgb2YgdGhlIHNjYWxhciB0b2tlbi4gSWYgdW5kZWZpbmVkLCB0aGUgcHJldmlvdXMgdHlwZSBvZiB0aGUgYHRva2VuYCB3aWxsIGJlIHVzZWQsIGRlZmF1bHRpbmcgdG8gYCdQTEFJTidgLlxuICovXG5mdW5jdGlvbiBjcmVhdGVTY2FsYXJUb2tlbih2YWx1ZSwgY29udGV4dCkge1xuICAgIGNvbnN0IHsgaW1wbGljaXRLZXkgPSBmYWxzZSwgaW5kZW50LCBpbkZsb3cgPSBmYWxzZSwgb2Zmc2V0ID0gLTEsIHR5cGUgPSAnUExBSU4nIH0gPSBjb250ZXh0O1xuICAgIGNvbnN0IHNvdXJjZSA9IHN0cmluZ2lmeVN0cmluZyh7IHR5cGUsIHZhbHVlIH0sIHtcbiAgICAgICAgaW1wbGljaXRLZXksXG4gICAgICAgIGluZGVudDogaW5kZW50ID4gMCA/ICcgJy5yZXBlYXQoaW5kZW50KSA6ICcnLFxuICAgICAgICBpbkZsb3csXG4gICAgICAgIG9wdGlvbnM6IHsgYmxvY2tRdW90ZTogdHJ1ZSwgbGluZVdpZHRoOiAtMSB9XG4gICAgfSk7XG4gICAgY29uc3QgZW5kID0gY29udGV4dC5lbmQgPz8gW1xuICAgICAgICB7IHR5cGU6ICduZXdsaW5lJywgb2Zmc2V0OiAtMSwgaW5kZW50LCBzb3VyY2U6ICdcXG4nIH1cbiAgICBdO1xuICAgIHN3aXRjaCAoc291cmNlWzBdKSB7XG4gICAgICAgIGNhc2UgJ3wnOlxuICAgICAgICBjYXNlICc+Jzoge1xuICAgICAgICAgICAgY29uc3QgaGUgPSBzb3VyY2UuaW5kZXhPZignXFxuJyk7XG4gICAgICAgICAgICBjb25zdCBoZWFkID0gc291cmNlLnN1YnN0cmluZygwLCBoZSk7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gc291cmNlLnN1YnN0cmluZyhoZSArIDEpICsgJ1xcbic7XG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IFtcbiAgICAgICAgICAgICAgICB7IHR5cGU6ICdibG9jay1zY2FsYXItaGVhZGVyJywgb2Zmc2V0LCBpbmRlbnQsIHNvdXJjZTogaGVhZCB9XG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaWYgKCFhZGRFbmR0b0Jsb2NrUHJvcHMocHJvcHMsIGVuZCkpXG4gICAgICAgICAgICAgICAgcHJvcHMucHVzaCh7IHR5cGU6ICduZXdsaW5lJywgb2Zmc2V0OiAtMSwgaW5kZW50LCBzb3VyY2U6ICdcXG4nIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogJ2Jsb2NrLXNjYWxhcicsIG9mZnNldCwgaW5kZW50LCBwcm9wcywgc291cmNlOiBib2R5IH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnXCInOlxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJywgb2Zmc2V0LCBpbmRlbnQsIHNvdXJjZSwgZW5kIH07XG4gICAgICAgIGNhc2UgXCInXCI6XG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiAnc2luZ2xlLXF1b3RlZC1zY2FsYXInLCBvZmZzZXQsIGluZGVudCwgc291cmNlLCBlbmQgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6ICdzY2FsYXInLCBvZmZzZXQsIGluZGVudCwgc291cmNlLCBlbmQgfTtcbiAgICB9XG59XG4vKipcbiAqIFNldCB0aGUgdmFsdWUgb2YgYHRva2VuYCB0byB0aGUgZ2l2ZW4gc3RyaW5nIGB2YWx1ZWAsIG92ZXJ3cml0aW5nIGFueSBwcmV2aW91cyBjb250ZW50cyBhbmQgdHlwZSB0aGF0IGl0IG1heSBoYXZlLlxuICpcbiAqIEJlc3QgZWZmb3J0cyBhcmUgbWFkZSB0byByZXRhaW4gYW55IGNvbW1lbnRzIHByZXZpb3VzbHkgYXNzb2NpYXRlZCB3aXRoIHRoZSBgdG9rZW5gLFxuICogdGhvdWdoIGFsbCBjb250ZW50cyB3aXRoaW4gYSBjb2xsZWN0aW9uJ3MgYGl0ZW1zYCB3aWxsIGJlIG92ZXJ3cml0dGVuLlxuICpcbiAqIFZhbHVlcyB0aGF0IHJlcHJlc2VudCBhbiBhY3R1YWwgc3RyaW5nIGJ1dCBtYXkgYmUgcGFyc2VkIGFzIGEgZGlmZmVyZW50IHR5cGUgc2hvdWxkIHVzZSBhIGB0eXBlYCBvdGhlciB0aGFuIGAnUExBSU4nYCxcbiAqIGFzIHRoaXMgZnVuY3Rpb24gZG9lcyBub3Qgc3VwcG9ydCBhbnkgc2NoZW1hIG9wZXJhdGlvbnMgYW5kIHdvbid0IGNoZWNrIGZvciBzdWNoIGNvbmZsaWN0cy5cbiAqXG4gKiBAcGFyYW0gdG9rZW4gQW55IHRva2VuLiBJZiBpdCBkb2VzIG5vdCBpbmNsdWRlIGFuIGBpbmRlbnRgIHZhbHVlLCB0aGUgdmFsdWUgd2lsbCBiZSBzdHJpbmdpZmllZCBhcyBpZiBpdCB3ZXJlIGFuIGltcGxpY2l0IGtleS5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2YWx1ZSwgd2hpY2ggd2lsbCBoYXZlIGl0cyBjb250ZW50IHByb3Blcmx5IGluZGVudGVkLlxuICogQHBhcmFtIGNvbnRleHQuYWZ0ZXJLZXkgSW4gbW9zdCBjYXNlcywgdmFsdWVzIGFmdGVyIGEga2V5IHNob3VsZCBoYXZlIGFuIGFkZGl0aW9uYWwgbGV2ZWwgb2YgaW5kZW50YXRpb24uXG4gKiBAcGFyYW0gY29udGV4dC5pbXBsaWNpdEtleSBCZWluZyB3aXRoaW4gYW4gaW1wbGljaXQga2V5IG1heSBhZmZlY3QgdGhlIHJlc29sdmVkIHR5cGUgb2YgdGhlIHRva2VuJ3MgdmFsdWUuXG4gKiBAcGFyYW0gY29udGV4dC5pbkZsb3cgQmVpbmcgd2l0aGluIGEgZmxvdyBjb2xsZWN0aW9uIG1heSBhZmZlY3QgdGhlIHJlc29sdmVkIHR5cGUgb2YgdGhlIHRva2VuJ3MgdmFsdWUuXG4gKiBAcGFyYW0gY29udGV4dC50eXBlIFRoZSBwcmVmZXJyZWQgdHlwZSBvZiB0aGUgc2NhbGFyIHRva2VuLiBJZiB1bmRlZmluZWQsIHRoZSBwcmV2aW91cyB0eXBlIG9mIHRoZSBgdG9rZW5gIHdpbGwgYmUgdXNlZCwgZGVmYXVsdGluZyB0byBgJ1BMQUlOJ2AuXG4gKi9cbmZ1bmN0aW9uIHNldFNjYWxhclZhbHVlKHRva2VuLCB2YWx1ZSwgY29udGV4dCA9IHt9KSB7XG4gICAgbGV0IHsgYWZ0ZXJLZXkgPSBmYWxzZSwgaW1wbGljaXRLZXkgPSBmYWxzZSwgaW5GbG93ID0gZmFsc2UsIHR5cGUgfSA9IGNvbnRleHQ7XG4gICAgbGV0IGluZGVudCA9ICdpbmRlbnQnIGluIHRva2VuID8gdG9rZW4uaW5kZW50IDogbnVsbDtcbiAgICBpZiAoYWZ0ZXJLZXkgJiYgdHlwZW9mIGluZGVudCA9PT0gJ251bWJlcicpXG4gICAgICAgIGluZGVudCArPSAyO1xuICAgIGlmICghdHlwZSlcbiAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgdHlwZSA9ICdRVU9URV9TSU5HTEUnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHR5cGUgPSAnUVVPVEVfRE9VQkxFJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhcic6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXIgPSB0b2tlbi5wcm9wc1swXTtcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyLnR5cGUgIT09ICdibG9jay1zY2FsYXItaGVhZGVyJylcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJsb2NrIHNjYWxhciBoZWFkZXInKTtcbiAgICAgICAgICAgICAgICB0eXBlID0gaGVhZGVyLnNvdXJjZVswXSA9PT0gJz4nID8gJ0JMT0NLX0ZPTERFRCcgOiAnQkxPQ0tfTElURVJBTCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHR5cGUgPSAnUExBSU4nO1xuICAgICAgICB9XG4gICAgY29uc3Qgc291cmNlID0gc3RyaW5naWZ5U3RyaW5nKHsgdHlwZSwgdmFsdWUgfSwge1xuICAgICAgICBpbXBsaWNpdEtleTogaW1wbGljaXRLZXkgfHwgaW5kZW50ID09PSBudWxsLFxuICAgICAgICBpbmRlbnQ6IGluZGVudCAhPT0gbnVsbCAmJiBpbmRlbnQgPiAwID8gJyAnLnJlcGVhdChpbmRlbnQpIDogJycsXG4gICAgICAgIGluRmxvdyxcbiAgICAgICAgb3B0aW9uczogeyBibG9ja1F1b3RlOiB0cnVlLCBsaW5lV2lkdGg6IC0xIH1cbiAgICB9KTtcbiAgICBzd2l0Y2ggKHNvdXJjZVswXSkge1xuICAgICAgICBjYXNlICd8JzpcbiAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgICBzZXRCbG9ja1NjYWxhclZhbHVlKHRva2VuLCBzb3VyY2UpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICAgIHNldEZsb3dTY2FsYXJWYWx1ZSh0b2tlbiwgc291cmNlLCAnZG91YmxlLXF1b3RlZC1zY2FsYXInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiJ1wiOlxuICAgICAgICAgICAgc2V0Rmxvd1NjYWxhclZhbHVlKHRva2VuLCBzb3VyY2UsICdzaW5nbGUtcXVvdGVkLXNjYWxhcicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBzZXRGbG93U2NhbGFyVmFsdWUodG9rZW4sIHNvdXJjZSwgJ3NjYWxhcicpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldEJsb2NrU2NhbGFyVmFsdWUodG9rZW4sIHNvdXJjZSkge1xuICAgIGNvbnN0IGhlID0gc291cmNlLmluZGV4T2YoJ1xcbicpO1xuICAgIGNvbnN0IGhlYWQgPSBzb3VyY2Uuc3Vic3RyaW5nKDAsIGhlKTtcbiAgICBjb25zdCBib2R5ID0gc291cmNlLnN1YnN0cmluZyhoZSArIDEpICsgJ1xcbic7XG4gICAgaWYgKHRva2VuLnR5cGUgPT09ICdibG9jay1zY2FsYXInKSB7XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IHRva2VuLnByb3BzWzBdO1xuICAgICAgICBpZiAoaGVhZGVyLnR5cGUgIT09ICdibG9jay1zY2FsYXItaGVhZGVyJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBibG9jayBzY2FsYXIgaGVhZGVyJyk7XG4gICAgICAgIGhlYWRlci5zb3VyY2UgPSBoZWFkO1xuICAgICAgICB0b2tlbi5zb3VyY2UgPSBib2R5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgeyBvZmZzZXQgfSA9IHRva2VuO1xuICAgICAgICBjb25zdCBpbmRlbnQgPSAnaW5kZW50JyBpbiB0b2tlbiA/IHRva2VuLmluZGVudCA6IC0xO1xuICAgICAgICBjb25zdCBwcm9wcyA9IFtcbiAgICAgICAgICAgIHsgdHlwZTogJ2Jsb2NrLXNjYWxhci1oZWFkZXInLCBvZmZzZXQsIGluZGVudCwgc291cmNlOiBoZWFkIH1cbiAgICAgICAgXTtcbiAgICAgICAgaWYgKCFhZGRFbmR0b0Jsb2NrUHJvcHMocHJvcHMsICdlbmQnIGluIHRva2VuID8gdG9rZW4uZW5kIDogdW5kZWZpbmVkKSlcbiAgICAgICAgICAgIHByb3BzLnB1c2goeyB0eXBlOiAnbmV3bGluZScsIG9mZnNldDogLTEsIGluZGVudCwgc291cmNlOiAnXFxuJyB9KTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModG9rZW4pKVxuICAgICAgICAgICAgaWYgKGtleSAhPT0gJ3R5cGUnICYmIGtleSAhPT0gJ29mZnNldCcpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRva2VuW2tleV07XG4gICAgICAgIE9iamVjdC5hc3NpZ24odG9rZW4sIHsgdHlwZTogJ2Jsb2NrLXNjYWxhcicsIGluZGVudCwgcHJvcHMsIHNvdXJjZTogYm9keSB9KTtcbiAgICB9XG59XG4vKiogQHJldHVybnMgYHRydWVgIGlmIGxhc3QgdG9rZW4gaXMgYSBuZXdsaW5lICovXG5mdW5jdGlvbiBhZGRFbmR0b0Jsb2NrUHJvcHMocHJvcHMsIGVuZCkge1xuICAgIGlmIChlbmQpXG4gICAgICAgIGZvciAoY29uc3Qgc3Qgb2YgZW5kKVxuICAgICAgICAgICAgc3dpdGNoIChzdC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgICAgICBwcm9wcy5wdXNoKHN0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnB1c2goc3QpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBzZXRGbG93U2NhbGFyVmFsdWUodG9rZW4sIHNvdXJjZSwgdHlwZSkge1xuICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgIHRva2VuLnR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgdG9rZW4uc291cmNlID0gc291cmNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhcic6IHtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IHRva2VuLnByb3BzLnNsaWNlKDEpO1xuICAgICAgICAgICAgbGV0IG9hID0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgIGlmICh0b2tlbi5wcm9wc1swXS50eXBlID09PSAnYmxvY2stc2NhbGFyLWhlYWRlcicpXG4gICAgICAgICAgICAgICAgb2EgLT0gdG9rZW4ucHJvcHNbMF0uc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdG9rIG9mIGVuZClcbiAgICAgICAgICAgICAgICB0b2sub2Zmc2V0ICs9IG9hO1xuICAgICAgICAgICAgZGVsZXRlIHRva2VuLnByb3BzO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0b2tlbiwgeyB0eXBlLCBzb3VyY2UsIGVuZCB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2Jsb2NrLW1hcCc6XG4gICAgICAgIGNhc2UgJ2Jsb2NrLXNlcSc6IHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHRva2VuLm9mZnNldCArIHNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCBubCA9IHsgdHlwZTogJ25ld2xpbmUnLCBvZmZzZXQsIGluZGVudDogdG9rZW4uaW5kZW50LCBzb3VyY2U6ICdcXG4nIH07XG4gICAgICAgICAgICBkZWxldGUgdG9rZW4uaXRlbXM7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRva2VuLCB7IHR5cGUsIHNvdXJjZSwgZW5kOiBbbmxdIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgY29uc3QgaW5kZW50ID0gJ2luZGVudCcgaW4gdG9rZW4gPyB0b2tlbi5pbmRlbnQgOiAtMTtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9ICdlbmQnIGluIHRva2VuICYmIEFycmF5LmlzQXJyYXkodG9rZW4uZW5kKVxuICAgICAgICAgICAgICAgID8gdG9rZW4uZW5kLmZpbHRlcihzdCA9PiBzdC50eXBlID09PSAnc3BhY2UnIHx8XG4gICAgICAgICAgICAgICAgICAgIHN0LnR5cGUgPT09ICdjb21tZW50JyB8fFxuICAgICAgICAgICAgICAgICAgICBzdC50eXBlID09PSAnbmV3bGluZScpXG4gICAgICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRva2VuKSlcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSAndHlwZScgJiYga2V5ICE9PSAnb2Zmc2V0JylcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRva2VuW2tleV07XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRva2VuLCB7IHR5cGUsIGluZGVudCwgc291cmNlLCBlbmQgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVNjYWxhclRva2VuLCByZXNvbHZlQXNTY2FsYXIsIHNldFNjYWxhclZhbHVlIH07XG4iLCIvKipcbiAqIFN0cmluZ2lmeSBhIENTVCBkb2N1bWVudCwgdG9rZW4sIG9yIGNvbGxlY3Rpb24gaXRlbVxuICpcbiAqIEZhaXIgd2FybmluZzogVGhpcyBhcHBsaWVzIG5vIHZhbGlkYXRpb24gd2hhdHNvZXZlciwgYW5kXG4gKiBzaW1wbHkgY29uY2F0ZW5hdGVzIHRoZSBzb3VyY2VzIGluIHRoZWlyIGxvZ2ljYWwgb3JkZXIuXG4gKi9cbmNvbnN0IHN0cmluZ2lmeSA9IChjc3QpID0+ICd0eXBlJyBpbiBjc3QgPyBzdHJpbmdpZnlUb2tlbihjc3QpIDogc3RyaW5naWZ5SXRlbShjc3QpO1xuZnVuY3Rpb24gc3RyaW5naWZ5VG9rZW4odG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnYmxvY2stc2NhbGFyJzoge1xuICAgICAgICAgICAgbGV0IHJlcyA9ICcnO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0b2sgb2YgdG9rZW4ucHJvcHMpXG4gICAgICAgICAgICAgICAgcmVzICs9IHN0cmluZ2lmeVRva2VuKHRvayk7XG4gICAgICAgICAgICByZXR1cm4gcmVzICsgdG9rZW4uc291cmNlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2Jsb2NrLW1hcCc6XG4gICAgICAgIGNhc2UgJ2Jsb2NrLXNlcSc6IHtcbiAgICAgICAgICAgIGxldCByZXMgPSAnJztcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0b2tlbi5pdGVtcylcbiAgICAgICAgICAgICAgICByZXMgKz0gc3RyaW5naWZ5SXRlbShpdGVtKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnZmxvdy1jb2xsZWN0aW9uJzoge1xuICAgICAgICAgICAgbGV0IHJlcyA9IHRva2VuLnN0YXJ0LnNvdXJjZTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0b2tlbi5pdGVtcylcbiAgICAgICAgICAgICAgICByZXMgKz0gc3RyaW5naWZ5SXRlbShpdGVtKTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3Qgb2YgdG9rZW4uZW5kKVxuICAgICAgICAgICAgICAgIHJlcyArPSBzdC5zb3VyY2U7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2RvY3VtZW50Jzoge1xuICAgICAgICAgICAgbGV0IHJlcyA9IHN0cmluZ2lmeUl0ZW0odG9rZW4pO1xuICAgICAgICAgICAgaWYgKHRva2VuLmVuZClcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIHRva2VuLmVuZClcbiAgICAgICAgICAgICAgICAgICAgcmVzICs9IHN0LnNvdXJjZTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgbGV0IHJlcyA9IHRva2VuLnNvdXJjZTtcbiAgICAgICAgICAgIGlmICgnZW5kJyBpbiB0b2tlbiAmJiB0b2tlbi5lbmQpXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdCBvZiB0b2tlbi5lbmQpXG4gICAgICAgICAgICAgICAgICAgIHJlcyArPSBzdC5zb3VyY2U7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc3RyaW5naWZ5SXRlbSh7IHN0YXJ0LCBrZXksIHNlcCwgdmFsdWUgfSkge1xuICAgIGxldCByZXMgPSAnJztcbiAgICBmb3IgKGNvbnN0IHN0IG9mIHN0YXJ0KVxuICAgICAgICByZXMgKz0gc3Quc291cmNlO1xuICAgIGlmIChrZXkpXG4gICAgICAgIHJlcyArPSBzdHJpbmdpZnlUb2tlbihrZXkpO1xuICAgIGlmIChzZXApXG4gICAgICAgIGZvciAoY29uc3Qgc3Qgb2Ygc2VwKVxuICAgICAgICAgICAgcmVzICs9IHN0LnNvdXJjZTtcbiAgICBpZiAodmFsdWUpXG4gICAgICAgIHJlcyArPSBzdHJpbmdpZnlUb2tlbih2YWx1ZSk7XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IHsgc3RyaW5naWZ5IH07XG4iLCJjb25zdCBCUkVBSyA9IFN5bWJvbCgnYnJlYWsgdmlzaXQnKTtcbmNvbnN0IFNLSVAgPSBTeW1ib2woJ3NraXAgY2hpbGRyZW4nKTtcbmNvbnN0IFJFTU9WRSA9IFN5bWJvbCgncmVtb3ZlIGl0ZW0nKTtcbi8qKlxuICogQXBwbHkgYSB2aXNpdG9yIHRvIGEgQ1NUIGRvY3VtZW50IG9yIGl0ZW0uXG4gKlxuICogV2Fsa3MgdGhyb3VnaCB0aGUgdHJlZSAoZGVwdGgtZmlyc3QpIHN0YXJ0aW5nIGZyb20gdGhlIHJvb3QsIGNhbGxpbmcgYVxuICogYHZpc2l0b3JgIGZ1bmN0aW9uIHdpdGggdHdvIGFyZ3VtZW50cyB3aGVuIGVudGVyaW5nIGVhY2ggaXRlbTpcbiAqICAgLSBgaXRlbWA6IFRoZSBjdXJyZW50IGl0ZW0sIHdoaWNoIGluY2x1ZGVkIHRoZSBmb2xsb3dpbmcgbWVtYmVyczpcbiAqICAgICAtIGBzdGFydDogU291cmNlVG9rZW5bXWAg4oCTIFNvdXJjZSB0b2tlbnMgYmVmb3JlIHRoZSBrZXkgb3IgdmFsdWUsXG4gKiAgICAgICBwb3NzaWJseSBpbmNsdWRpbmcgaXRzIGFuY2hvciBvciB0YWcuXG4gKiAgICAgLSBga2V5PzogVG9rZW4gfCBudWxsYCDigJMgU2V0IGZvciBwYWlyIHZhbHVlcy4gTWF5IHRoZW4gYmUgYG51bGxgLCBpZlxuICogICAgICAgdGhlIGtleSBiZWZvcmUgdGhlIGA6YCBzZXBhcmF0b3IgaXMgZW1wdHkuXG4gKiAgICAgLSBgc2VwPzogU291cmNlVG9rZW5bXWAg4oCTIFNvdXJjZSB0b2tlbnMgYmV0d2VlbiB0aGUga2V5IGFuZCB0aGUgdmFsdWUsXG4gKiAgICAgICB3aGljaCBzaG91bGQgaW5jbHVkZSB0aGUgYDpgIG1hcCB2YWx1ZSBpbmRpY2F0b3IgaWYgYHZhbHVlYCBpcyBzZXQuXG4gKiAgICAgLSBgdmFsdWU/OiBUb2tlbmAg4oCTIFRoZSB2YWx1ZSBvZiBhIHNlcXVlbmNlIGl0ZW0sIG9yIG9mIGEgbWFwIHBhaXIuXG4gKiAgIC0gYHBhdGhgOiBUaGUgc3RlcHMgZnJvbSB0aGUgcm9vdCB0byB0aGUgY3VycmVudCBub2RlLCBhcyBhbiBhcnJheSBvZlxuICogICAgIGBbJ2tleScgfCAndmFsdWUnLCBudW1iZXJdYCB0dXBsZXMuXG4gKlxuICogVGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgdmlzaXRvciBtYXkgYmUgdXNlZCB0byBjb250cm9sIHRoZSB0cmF2ZXJzYWw6XG4gKiAgIC0gYHVuZGVmaW5lZGAgKGRlZmF1bHQpOiBEbyBub3RoaW5nIGFuZCBjb250aW51ZVxuICogICAtIGB2aXNpdC5TS0lQYDogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGlzIHRva2VuLCBjb250aW51ZSB3aXRoXG4gKiAgICAgIG5leHQgc2libGluZ1xuICogICAtIGB2aXNpdC5CUkVBS2A6IFRlcm1pbmF0ZSB0cmF2ZXJzYWwgY29tcGxldGVseVxuICogICAtIGB2aXNpdC5SRU1PVkVgOiBSZW1vdmUgdGhlIGN1cnJlbnQgaXRlbSwgdGhlbiBjb250aW51ZSB3aXRoIHRoZSBuZXh0IG9uZVxuICogICAtIGBudW1iZXJgOiBTZXQgdGhlIGluZGV4IG9mIHRoZSBuZXh0IHN0ZXAuIFRoaXMgaXMgdXNlZnVsIGVzcGVjaWFsbHkgaWZcbiAqICAgICB0aGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgdG9rZW4gaGFzIGNoYW5nZWQuXG4gKiAgIC0gYGZ1bmN0aW9uYDogRGVmaW5lIHRoZSBuZXh0IHZpc2l0b3IgZm9yIHRoaXMgaXRlbS4gQWZ0ZXIgdGhlIG9yaWdpbmFsXG4gKiAgICAgdmlzaXRvciBpcyBjYWxsZWQgb24gaXRlbSBlbnRyeSwgbmV4dCB2aXNpdG9ycyBhcmUgY2FsbGVkIGFmdGVyIGhhbmRsaW5nXG4gKiAgICAgYSBub24tZW1wdHkgYGtleWAgYW5kIHdoZW4gZXhpdGluZyB0aGUgaXRlbS5cbiAqL1xuZnVuY3Rpb24gdmlzaXQoY3N0LCB2aXNpdG9yKSB7XG4gICAgaWYgKCd0eXBlJyBpbiBjc3QgJiYgY3N0LnR5cGUgPT09ICdkb2N1bWVudCcpXG4gICAgICAgIGNzdCA9IHsgc3RhcnQ6IGNzdC5zdGFydCwgdmFsdWU6IGNzdC52YWx1ZSB9O1xuICAgIF92aXNpdChPYmplY3QuZnJlZXplKFtdKSwgY3N0LCB2aXNpdG9yKTtcbn1cbi8vIFdpdGhvdXQgdGhlIGBhcyBzeW1ib2xgIGNhc3RzLCBUUyBkZWNsYXJlcyB0aGVzZSBpbiB0aGUgYHZpc2l0YFxuLy8gbmFtZXNwYWNlIHVzaW5nIGB2YXJgLCBidXQgdGhlbiBjb21wbGFpbnMgYWJvdXQgdGhhdCBiZWNhdXNlXG4vLyBgdW5pcXVlIHN5bWJvbGAgbXVzdCBiZSBgY29uc3RgLlxuLyoqIFRlcm1pbmF0ZSB2aXNpdCB0cmF2ZXJzYWwgY29tcGxldGVseSAqL1xudmlzaXQuQlJFQUsgPSBCUkVBSztcbi8qKiBEbyBub3QgdmlzaXQgdGhlIGNoaWxkcmVuIG9mIHRoZSBjdXJyZW50IGl0ZW0gKi9cbnZpc2l0LlNLSVAgPSBTS0lQO1xuLyoqIFJlbW92ZSB0aGUgY3VycmVudCBpdGVtICovXG52aXNpdC5SRU1PVkUgPSBSRU1PVkU7XG4vKiogRmluZCB0aGUgaXRlbSBhdCBgcGF0aGAgZnJvbSBgY3N0YCBhcyB0aGUgcm9vdCAqL1xudmlzaXQuaXRlbUF0UGF0aCA9IChjc3QsIHBhdGgpID0+IHtcbiAgICBsZXQgaXRlbSA9IGNzdDtcbiAgICBmb3IgKGNvbnN0IFtmaWVsZCwgaW5kZXhdIG9mIHBhdGgpIHtcbiAgICAgICAgY29uc3QgdG9rID0gaXRlbT8uW2ZpZWxkXTtcbiAgICAgICAgaWYgKHRvayAmJiAnaXRlbXMnIGluIHRvaykge1xuICAgICAgICAgICAgaXRlbSA9IHRvay5pdGVtc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG59O1xuLyoqXG4gKiBHZXQgdGhlIGltbWVkaWF0ZSBwYXJlbnQgY29sbGVjdGlvbiBvZiB0aGUgaXRlbSBhdCBgcGF0aGAgZnJvbSBgY3N0YCBhcyB0aGUgcm9vdC5cbiAqXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIGNvbGxlY3Rpb24gaXMgbm90IGZvdW5kLCB3aGljaCBzaG91bGQgbmV2ZXIgaGFwcGVuIGlmIHRoZSBpdGVtIGl0c2VsZiBleGlzdHMuXG4gKi9cbnZpc2l0LnBhcmVudENvbGxlY3Rpb24gPSAoY3N0LCBwYXRoKSA9PiB7XG4gICAgY29uc3QgcGFyZW50ID0gdmlzaXQuaXRlbUF0UGF0aChjc3QsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBjb25zdCBmaWVsZCA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXVswXTtcbiAgICBjb25zdCBjb2xsID0gcGFyZW50Py5bZmllbGRdO1xuICAgIGlmIChjb2xsICYmICdpdGVtcycgaW4gY29sbClcbiAgICAgICAgcmV0dXJuIGNvbGw7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQYXJlbnQgY29sbGVjdGlvbiBub3QgZm91bmQnKTtcbn07XG5mdW5jdGlvbiBfdmlzaXQocGF0aCwgaXRlbSwgdmlzaXRvcikge1xuICAgIGxldCBjdHJsID0gdmlzaXRvcihpdGVtLCBwYXRoKTtcbiAgICBpZiAodHlwZW9mIGN0cmwgPT09ICdzeW1ib2wnKVxuICAgICAgICByZXR1cm4gY3RybDtcbiAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIFsna2V5JywgJ3ZhbHVlJ10pIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBpdGVtW2ZpZWxkXTtcbiAgICAgICAgaWYgKHRva2VuICYmICdpdGVtcycgaW4gdG9rZW4pIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW4uaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaSA9IF92aXNpdChPYmplY3QuZnJlZXplKHBhdGguY29uY2F0KFtbZmllbGQsIGldXSkpLCB0b2tlbi5pdGVtc1tpXSwgdmlzaXRvcik7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgIGkgPSBjaSAtIDE7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2kgPT09IEJSRUFLKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2kgPT09IFJFTU9WRSkge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbi5pdGVtcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGkgLT0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGN0cmwgPT09ICdmdW5jdGlvbicgJiYgZmllbGQgPT09ICdrZXknKVxuICAgICAgICAgICAgICAgIGN0cmwgPSBjdHJsKGl0ZW0sIHBhdGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgY3RybCA9PT0gJ2Z1bmN0aW9uJyA/IGN0cmwoaXRlbSwgcGF0aCkgOiBjdHJsO1xufVxuXG5leHBvcnQgeyB2aXNpdCB9O1xuIiwiZXhwb3J0IHsgY3JlYXRlU2NhbGFyVG9rZW4sIHJlc29sdmVBc1NjYWxhciwgc2V0U2NhbGFyVmFsdWUgfSBmcm9tICcuL2NzdC1zY2FsYXIuanMnO1xuZXhwb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSAnLi9jc3Qtc3RyaW5naWZ5LmpzJztcbmV4cG9ydCB7IHZpc2l0IH0gZnJvbSAnLi9jc3QtdmlzaXQuanMnO1xuXG4vKiogVGhlIGJ5dGUgb3JkZXIgbWFyayAqL1xuY29uc3QgQk9NID0gJ1xcdXtGRUZGfSc7XG4vKiogU3RhcnQgb2YgZG9jLW1vZGUgKi9cbmNvbnN0IERPQ1VNRU5UID0gJ1xceDAyJzsgLy8gQzA6IFN0YXJ0IG9mIFRleHRcbi8qKiBVbmV4cGVjdGVkIGVuZCBvZiBmbG93LW1vZGUgKi9cbmNvbnN0IEZMT1dfRU5EID0gJ1xceDE4JzsgLy8gQzA6IENhbmNlbFxuLyoqIE5leHQgdG9rZW4gaXMgYSBzY2FsYXIgdmFsdWUgKi9cbmNvbnN0IFNDQUxBUiA9ICdcXHgxZic7IC8vIEMwOiBVbml0IFNlcGFyYXRvclxuLyoqIEByZXR1cm5zIGB0cnVlYCBpZiBgdG9rZW5gIGlzIGEgZmxvdyBvciBibG9jayBjb2xsZWN0aW9uICovXG5jb25zdCBpc0NvbGxlY3Rpb24gPSAodG9rZW4pID0+ICEhdG9rZW4gJiYgJ2l0ZW1zJyBpbiB0b2tlbjtcbi8qKiBAcmV0dXJucyBgdHJ1ZWAgaWYgYHRva2VuYCBpcyBhIGZsb3cgb3IgYmxvY2sgc2NhbGFyOyBub3QgYW4gYWxpYXMgKi9cbmNvbnN0IGlzU2NhbGFyID0gKHRva2VuKSA9PiAhIXRva2VuICYmXG4gICAgKHRva2VuLnR5cGUgPT09ICdzY2FsYXInIHx8XG4gICAgICAgIHRva2VuLnR5cGUgPT09ICdzaW5nbGUtcXVvdGVkLXNjYWxhcicgfHxcbiAgICAgICAgdG9rZW4udHlwZSA9PT0gJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJyB8fFxuICAgICAgICB0b2tlbi50eXBlID09PSAnYmxvY2stc2NhbGFyJyk7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqIEdldCBhIHByaW50YWJsZSByZXByZXNlbnRhdGlvbiBvZiBhIGxleGVyIHRva2VuICovXG5mdW5jdGlvbiBwcmV0dHlUb2tlbih0b2tlbikge1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSBCT006XG4gICAgICAgICAgICByZXR1cm4gJzxCT00+JztcbiAgICAgICAgY2FzZSBET0NVTUVOVDpcbiAgICAgICAgICAgIHJldHVybiAnPERPQz4nO1xuICAgICAgICBjYXNlIEZMT1dfRU5EOlxuICAgICAgICAgICAgcmV0dXJuICc8RkxPV19FTkQ+JztcbiAgICAgICAgY2FzZSBTQ0FMQVI6XG4gICAgICAgICAgICByZXR1cm4gJzxTQ0FMQVI+JztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0b2tlbik7XG4gICAgfVxufVxuLyoqIElkZW50aWZ5IHRoZSB0eXBlIG9mIGEgbGV4ZXIgdG9rZW4uIE1heSByZXR1cm4gYG51bGxgIGZvciB1bmtub3duIHRva2Vucy4gKi9cbmZ1bmN0aW9uIHRva2VuVHlwZShzb3VyY2UpIHtcbiAgICBzd2l0Y2ggKHNvdXJjZSkge1xuICAgICAgICBjYXNlIEJPTTpcbiAgICAgICAgICAgIHJldHVybiAnYnl0ZS1vcmRlci1tYXJrJztcbiAgICAgICAgY2FzZSBET0NVTUVOVDpcbiAgICAgICAgICAgIHJldHVybiAnZG9jLW1vZGUnO1xuICAgICAgICBjYXNlIEZMT1dfRU5EOlxuICAgICAgICAgICAgcmV0dXJuICdmbG93LWVycm9yLWVuZCc7XG4gICAgICAgIGNhc2UgU0NBTEFSOlxuICAgICAgICAgICAgcmV0dXJuICdzY2FsYXInO1xuICAgICAgICBjYXNlICctLS0nOlxuICAgICAgICAgICAgcmV0dXJuICdkb2Mtc3RhcnQnO1xuICAgICAgICBjYXNlICcuLi4nOlxuICAgICAgICAgICAgcmV0dXJuICdkb2MtZW5kJztcbiAgICAgICAgY2FzZSAnJzpcbiAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgY2FzZSAnXFxyXFxuJzpcbiAgICAgICAgICAgIHJldHVybiAnbmV3bGluZSc7XG4gICAgICAgIGNhc2UgJy0nOlxuICAgICAgICAgICAgcmV0dXJuICdzZXEtaXRlbS1pbmQnO1xuICAgICAgICBjYXNlICc/JzpcbiAgICAgICAgICAgIHJldHVybiAnZXhwbGljaXQta2V5LWluZCc7XG4gICAgICAgIGNhc2UgJzonOlxuICAgICAgICAgICAgcmV0dXJuICdtYXAtdmFsdWUtaW5kJztcbiAgICAgICAgY2FzZSAneyc6XG4gICAgICAgICAgICByZXR1cm4gJ2Zsb3ctbWFwLXN0YXJ0JztcbiAgICAgICAgY2FzZSAnfSc6XG4gICAgICAgICAgICByZXR1cm4gJ2Zsb3ctbWFwLWVuZCc7XG4gICAgICAgIGNhc2UgJ1snOlxuICAgICAgICAgICAgcmV0dXJuICdmbG93LXNlcS1zdGFydCc7XG4gICAgICAgIGNhc2UgJ10nOlxuICAgICAgICAgICAgcmV0dXJuICdmbG93LXNlcS1lbmQnO1xuICAgICAgICBjYXNlICcsJzpcbiAgICAgICAgICAgIHJldHVybiAnY29tbWEnO1xuICAgIH1cbiAgICBzd2l0Y2ggKHNvdXJjZVswXSkge1xuICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgY2FzZSAnXFx0JzpcbiAgICAgICAgICAgIHJldHVybiAnc3BhY2UnO1xuICAgICAgICBjYXNlICcjJzpcbiAgICAgICAgICAgIHJldHVybiAnY29tbWVudCc7XG4gICAgICAgIGNhc2UgJyUnOlxuICAgICAgICAgICAgcmV0dXJuICdkaXJlY3RpdmUtbGluZSc7XG4gICAgICAgIGNhc2UgJyonOlxuICAgICAgICAgICAgcmV0dXJuICdhbGlhcyc7XG4gICAgICAgIGNhc2UgJyYnOlxuICAgICAgICAgICAgcmV0dXJuICdhbmNob3InO1xuICAgICAgICBjYXNlICchJzpcbiAgICAgICAgICAgIHJldHVybiAndGFnJztcbiAgICAgICAgY2FzZSBcIidcIjpcbiAgICAgICAgICAgIHJldHVybiAnc2luZ2xlLXF1b3RlZC1zY2FsYXInO1xuICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICByZXR1cm4gJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJztcbiAgICAgICAgY2FzZSAnfCc6XG4gICAgICAgIGNhc2UgJz4nOlxuICAgICAgICAgICAgcmV0dXJuICdibG9jay1zY2FsYXItaGVhZGVyJztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCB7IEJPTSwgRE9DVU1FTlQsIEZMT1dfRU5ELCBTQ0FMQVIsIGlzQ29sbGVjdGlvbiwgaXNTY2FsYXIsIHByZXR0eVRva2VuLCB0b2tlblR5cGUgfTtcbiIsImltcG9ydCB7IEJPTSwgRE9DVU1FTlQsIEZMT1dfRU5ELCBTQ0FMQVIgfSBmcm9tICcuL2NzdC5qcyc7XG5cbi8qXG5TVEFSVCAtPiBzdHJlYW1cblxuc3RyZWFtXG4gIGRpcmVjdGl2ZSAtPiBsaW5lLWVuZCAtPiBzdHJlYW1cbiAgaW5kZW50ICsgbGluZS1lbmQgLT4gc3RyZWFtXG4gIFtlbHNlXSAtPiBsaW5lLXN0YXJ0XG5cbmxpbmUtZW5kXG4gIGNvbW1lbnQgLT4gbGluZS1lbmRcbiAgbmV3bGluZSAtPiAuXG4gIGlucHV0LWVuZCAtPiBFTkRcblxubGluZS1zdGFydFxuICBkb2Mtc3RhcnQgLT4gZG9jXG4gIGRvYy1lbmQgLT4gc3RyZWFtXG4gIFtlbHNlXSAtPiBpbmRlbnQgLT4gYmxvY2stc3RhcnRcblxuYmxvY2stc3RhcnRcbiAgc2VxLWl0ZW0tc3RhcnQgLT4gYmxvY2stc3RhcnRcbiAgZXhwbGljaXQta2V5LXN0YXJ0IC0+IGJsb2NrLXN0YXJ0XG4gIG1hcC12YWx1ZS1zdGFydCAtPiBibG9jay1zdGFydFxuICBbZWxzZV0gLT4gZG9jXG5cbmRvY1xuICBsaW5lLWVuZCAtPiBsaW5lLXN0YXJ0XG4gIHNwYWNlcyAtPiBkb2NcbiAgYW5jaG9yIC0+IGRvY1xuICB0YWcgLT4gZG9jXG4gIGZsb3ctc3RhcnQgLT4gZmxvdyAtPiBkb2NcbiAgZmxvdy1lbmQgLT4gZXJyb3IgLT4gZG9jXG4gIHNlcS1pdGVtLXN0YXJ0IC0+IGVycm9yIC0+IGRvY1xuICBleHBsaWNpdC1rZXktc3RhcnQgLT4gZXJyb3IgLT4gZG9jXG4gIG1hcC12YWx1ZS1zdGFydCAtPiBkb2NcbiAgYWxpYXMgLT4gZG9jXG4gIHF1b3RlLXN0YXJ0IC0+IHF1b3RlZC1zY2FsYXIgLT4gZG9jXG4gIGJsb2NrLXNjYWxhci1oZWFkZXIgLT4gbGluZS1lbmQgLT4gYmxvY2stc2NhbGFyKG1pbikgLT4gbGluZS1zdGFydFxuICBbZWxzZV0gLT4gcGxhaW4tc2NhbGFyKGZhbHNlLCBtaW4pIC0+IGRvY1xuXG5mbG93XG4gIGxpbmUtZW5kIC0+IGZsb3dcbiAgc3BhY2VzIC0+IGZsb3dcbiAgYW5jaG9yIC0+IGZsb3dcbiAgdGFnIC0+IGZsb3dcbiAgZmxvdy1zdGFydCAtPiBmbG93IC0+IGZsb3dcbiAgZmxvdy1lbmQgLT4gLlxuICBzZXEtaXRlbS1zdGFydCAtPiBlcnJvciAtPiBmbG93XG4gIGV4cGxpY2l0LWtleS1zdGFydCAtPiBmbG93XG4gIG1hcC12YWx1ZS1zdGFydCAtPiBmbG93XG4gIGFsaWFzIC0+IGZsb3dcbiAgcXVvdGUtc3RhcnQgLT4gcXVvdGVkLXNjYWxhciAtPiBmbG93XG4gIGNvbW1hIC0+IGZsb3dcbiAgW2Vsc2VdIC0+IHBsYWluLXNjYWxhcih0cnVlLCAwKSAtPiBmbG93XG5cbnF1b3RlZC1zY2FsYXJcbiAgcXVvdGUtZW5kIC0+IC5cbiAgW2Vsc2VdIC0+IHF1b3RlZC1zY2FsYXJcblxuYmxvY2stc2NhbGFyKG1pbilcbiAgbmV3bGluZSArIHBlZWsoaW5kZW50IDwgbWluKSAtPiAuXG4gIFtlbHNlXSAtPiBibG9jay1zY2FsYXIobWluKVxuXG5wbGFpbi1zY2FsYXIoaXMtZmxvdywgbWluKVxuICBzY2FsYXItZW5kKGlzLWZsb3cpIC0+IC5cbiAgcGVlayhuZXdsaW5lICsgKGluZGVudCA8IG1pbikpIC0+IC5cbiAgW2Vsc2VdIC0+IHBsYWluLXNjYWxhcihtaW4pXG4qL1xuZnVuY3Rpb24gaXNFbXB0eShjaCkge1xuICAgIHN3aXRjaCAoY2gpIHtcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIGNhc2UgJyAnOlxuICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICBjYXNlICdcXHInOlxuICAgICAgICBjYXNlICdcXHQnOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuY29uc3QgaGV4RGlnaXRzID0gbmV3IFNldCgnMDEyMzQ1Njc4OUFCQ0RFRmFiY2RlZicpO1xuY29uc3QgdGFnQ2hhcnMgPSBuZXcgU2V0KFwiMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXotIzsvPzpAJj0rJF8uIX4qJygpXCIpO1xuY29uc3QgZmxvd0luZGljYXRvckNoYXJzID0gbmV3IFNldCgnLFtde30nKTtcbmNvbnN0IGludmFsaWRBbmNob3JDaGFycyA9IG5ldyBTZXQoJyAsW117fVxcblxcclxcdCcpO1xuY29uc3QgaXNOb3RBbmNob3JDaGFyID0gKGNoKSA9PiAhY2ggfHwgaW52YWxpZEFuY2hvckNoYXJzLmhhcyhjaCk7XG4vKipcbiAqIFNwbGl0cyBhbiBpbnB1dCBzdHJpbmcgaW50byBsZXhpY2FsIHRva2VucywgaS5lLiBzbWFsbGVyIHN0cmluZ3MgdGhhdCBhcmVcbiAqIGVhc2lseSBpZGVudGlmaWFibGUgYnkgYHRva2Vucy50b2tlblR5cGUoKWAuXG4gKlxuICogTGV4aW5nIHN0YXJ0cyBhbHdheXMgaW4gYSBcInN0cmVhbVwiIGNvbnRleHQuIEluY29tcGxldGUgaW5wdXQgbWF5IGJlIGJ1ZmZlcmVkXG4gKiB1bnRpbCBhIGNvbXBsZXRlIHRva2VuIGNhbiBiZSBlbWl0dGVkLlxuICpcbiAqIEluIGFkZGl0aW9uIHRvIHNsaWNlcyBvZiB0aGUgb3JpZ2luYWwgaW5wdXQsIHRoZSBmb2xsb3dpbmcgY29udHJvbCBjaGFyYWN0ZXJzXG4gKiBtYXkgYWxzbyBiZSBlbWl0dGVkOlxuICpcbiAqIC0gYFxceDAyYCAoU3RhcnQgb2YgVGV4dCk6IEEgZG9jdW1lbnQgc3RhcnRzIHdpdGggdGhlIG5leHQgdG9rZW5cbiAqIC0gYFxceDE4YCAoQ2FuY2VsKTogVW5leHBlY3RlZCBlbmQgb2YgZmxvdy1tb2RlIChpbmRpY2F0ZXMgYW4gZXJyb3IpXG4gKiAtIGBcXHgxZmAgKFVuaXQgU2VwYXJhdG9yKTogTmV4dCB0b2tlbiBpcyBhIHNjYWxhciB2YWx1ZVxuICogLSBgXFx1e0ZFRkZ9YCAoQnl0ZSBvcmRlciBtYXJrKTogRW1pdHRlZCBzZXBhcmF0ZWx5IG91dHNpZGUgZG9jdW1lbnRzXG4gKi9cbmNsYXNzIExleGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgYnVmZmVyIG1hcmtzIHRoZSBlbmQgb2ZcbiAgICAgICAgICogYWxsIGlucHV0XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmF0RW5kID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFeHBsaWNpdCBpbmRlbnQgc2V0IGluIGJsb2NrIHNjYWxhciBoZWFkZXIsIGFzIGFuIG9mZnNldCBmcm9tIHRoZSBjdXJyZW50XG4gICAgICAgICAqIG1pbmltdW0gaW5kZW50LCBzbyBlLmcuIHNldCB0byAxIGZyb20gYSBoZWFkZXIgYHwyK2AuIFNldCB0byAtMSBpZiBub3RcbiAgICAgICAgICogZXhwbGljaXRseSBzZXQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmJsb2NrU2NhbGFySW5kZW50ID0gLTE7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCbG9jayBzY2FsYXJzIHRoYXQgaW5jbHVkZSBhICsgKGtlZXApIGNob21waW5nIGluZGljYXRvciBpbiB0aGVpciBoZWFkZXJcbiAgICAgICAgICogaW5jbHVkZSB0cmFpbGluZyBlbXB0eSBsaW5lcywgd2hpY2ggYXJlIG90aGVyd2lzZSBleGNsdWRlZCBmcm9tIHRoZVxuICAgICAgICAgKiBzY2FsYXIncyBjb250ZW50cy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYmxvY2tTY2FsYXJLZWVwID0gZmFsc2U7XG4gICAgICAgIC8qKiBDdXJyZW50IGlucHV0ICovXG4gICAgICAgIHRoaXMuYnVmZmVyID0gJyc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGbGFnIG5vdGluZyB3aGV0aGVyIHRoZSBtYXAgdmFsdWUgaW5kaWNhdG9yIDogY2FuIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGlzXG4gICAgICAgICAqIG5vZGUgd2l0aGluIGEgZmxvdyBjb250ZXh0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mbG93S2V5ID0gZmFsc2U7XG4gICAgICAgIC8qKiBDb3VudCBvZiBzdXJyb3VuZGluZyBmbG93IGNvbGxlY3Rpb24gbGV2ZWxzLiAqL1xuICAgICAgICB0aGlzLmZsb3dMZXZlbCA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNaW5pbXVtIGxldmVsIG9mIGluZGVudGF0aW9uIHJlcXVpcmVkIGZvciBuZXh0IGxpbmVzIHRvIGJlIHBhcnNlZCBhcyBhXG4gICAgICAgICAqIHBhcnQgb2YgdGhlIGN1cnJlbnQgc2NhbGFyIHZhbHVlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbmRlbnROZXh0ID0gMDtcbiAgICAgICAgLyoqIEluZGVudGF0aW9uIGxldmVsIG9mIHRoZSBjdXJyZW50IGxpbmUuICovXG4gICAgICAgIHRoaXMuaW5kZW50VmFsdWUgPSAwO1xuICAgICAgICAvKiogUG9zaXRpb24gb2YgdGhlIG5leHQgXFxuIGNoYXJhY3Rlci4gKi9cbiAgICAgICAgdGhpcy5saW5lRW5kUG9zID0gbnVsbDtcbiAgICAgICAgLyoqIFN0b3JlcyB0aGUgc3RhdGUgb2YgdGhlIGxleGVyIGlmIHJlYWNoaW5nIHRoZSBlbmQgb2YgaW5jcG9tcGxldGUgaW5wdXQgKi9cbiAgICAgICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgICAgICAgLyoqIEEgcG9pbnRlciB0byBgYnVmZmVyYDsgdGhlIGN1cnJlbnQgcG9zaXRpb24gb2YgdGhlIGxleGVyLiAqL1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIFlBTUwgdG9rZW5zIGZyb20gdGhlIGBzb3VyY2VgIHN0cmluZy4gSWYgYGluY29tcGxldGVgLFxuICAgICAqIGEgcGFydCBvZiB0aGUgbGFzdCBsaW5lIG1heSBiZSBsZWZ0IGFzIGEgYnVmZmVyIGZvciB0aGUgbmV4dCBjYWxsLlxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBnZW5lcmF0b3Igb2YgbGV4aWNhbCB0b2tlbnNcbiAgICAgKi9cbiAgICAqbGV4KHNvdXJjZSwgaW5jb21wbGV0ZSA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ3NvdXJjZSBpcyBub3QgYSBzdHJpbmcnKTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gdGhpcy5idWZmZXIgPyB0aGlzLmJ1ZmZlciArIHNvdXJjZSA6IHNvdXJjZTtcbiAgICAgICAgICAgIHRoaXMubGluZUVuZFBvcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdEVuZCA9ICFpbmNvbXBsZXRlO1xuICAgICAgICBsZXQgbmV4dCA9IHRoaXMubmV4dCA/PyAnc3RyZWFtJztcbiAgICAgICAgd2hpbGUgKG5leHQgJiYgKGluY29tcGxldGUgfHwgdGhpcy5oYXNDaGFycygxKSkpXG4gICAgICAgICAgICBuZXh0ID0geWllbGQqIHRoaXMucGFyc2VOZXh0KG5leHQpO1xuICAgIH1cbiAgICBhdExpbmVFbmQoKSB7XG4gICAgICAgIGxldCBpID0gdGhpcy5wb3M7XG4gICAgICAgIGxldCBjaCA9IHRoaXMuYnVmZmVyW2ldO1xuICAgICAgICB3aGlsZSAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xcdCcpXG4gICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgIGlmICghY2ggfHwgY2ggPT09ICcjJyB8fCBjaCA9PT0gJ1xcbicpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKGNoID09PSAnXFxyJylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlcltpICsgMV0gPT09ICdcXG4nO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNoYXJBdChuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlclt0aGlzLnBvcyArIG5dO1xuICAgIH1cbiAgICBjb250aW51ZVNjYWxhcihvZmZzZXQpIHtcbiAgICAgICAgbGV0IGNoID0gdGhpcy5idWZmZXJbb2Zmc2V0XTtcbiAgICAgICAgaWYgKHRoaXMuaW5kZW50TmV4dCA+IDApIHtcbiAgICAgICAgICAgIGxldCBpbmRlbnQgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGNoID09PSAnICcpXG4gICAgICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsrK2luZGVudCArIG9mZnNldF07XG4gICAgICAgICAgICBpZiAoY2ggPT09ICdcXHInKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuYnVmZmVyW2luZGVudCArIG9mZnNldCArIDFdO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0ID09PSAnXFxuJyB8fCAoIW5leHQgJiYgIXRoaXMuYXRFbmQpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2Zmc2V0ICsgaW5kZW50ICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaCA9PT0gJ1xcbicgfHwgaW5kZW50ID49IHRoaXMuaW5kZW50TmV4dCB8fCAoIWNoICYmICF0aGlzLmF0RW5kKVxuICAgICAgICAgICAgICAgID8gb2Zmc2V0ICsgaW5kZW50XG4gICAgICAgICAgICAgICAgOiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJy4nKSB7XG4gICAgICAgICAgICBjb25zdCBkdCA9IHRoaXMuYnVmZmVyLnN1YnN0cihvZmZzZXQsIDMpO1xuICAgICAgICAgICAgaWYgKChkdCA9PT0gJy0tLScgfHwgZHQgPT09ICcuLi4nKSAmJiBpc0VtcHR5KHRoaXMuYnVmZmVyW29mZnNldCArIDNdKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9XG4gICAgZ2V0TGluZSgpIHtcbiAgICAgICAgbGV0IGVuZCA9IHRoaXMubGluZUVuZFBvcztcbiAgICAgICAgaWYgKHR5cGVvZiBlbmQgIT09ICdudW1iZXInIHx8IChlbmQgIT09IC0xICYmIGVuZCA8IHRoaXMucG9zKSkge1xuICAgICAgICAgICAgZW5kID0gdGhpcy5idWZmZXIuaW5kZXhPZignXFxuJywgdGhpcy5wb3MpO1xuICAgICAgICAgICAgdGhpcy5saW5lRW5kUG9zID0gZW5kO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmQgPT09IC0xKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXRFbmQgPyB0aGlzLmJ1ZmZlci5zdWJzdHJpbmcodGhpcy5wb3MpIDogbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyW2VuZCAtIDFdID09PSAnXFxyJylcbiAgICAgICAgICAgIGVuZCAtPSAxO1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIuc3Vic3RyaW5nKHRoaXMucG9zLCBlbmQpO1xuICAgIH1cbiAgICBoYXNDaGFycyhuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvcyArIG4gPD0gdGhpcy5idWZmZXIubGVuZ3RoO1xuICAgIH1cbiAgICBzZXROZXh0KHN0YXRlKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gdGhpcy5idWZmZXIuc3Vic3RyaW5nKHRoaXMucG9zKTtcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICB0aGlzLmxpbmVFbmRQb3MgPSBudWxsO1xuICAgICAgICB0aGlzLm5leHQgPSBzdGF0ZTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHBlZWsobikge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIuc3Vic3RyKHRoaXMucG9zLCBuKTtcbiAgICB9XG4gICAgKnBhcnNlTmV4dChuZXh0KSB7XG4gICAgICAgIHN3aXRjaCAobmV4dCkge1xuICAgICAgICAgICAgY2FzZSAnc3RyZWFtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VTdHJlYW0oKTtcbiAgICAgICAgICAgIGNhc2UgJ2xpbmUtc3RhcnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUxpbmVTdGFydCgpO1xuICAgICAgICAgICAgY2FzZSAnYmxvY2stc3RhcnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUJsb2NrU3RhcnQoKTtcbiAgICAgICAgICAgIGNhc2UgJ2RvYyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlRG9jdW1lbnQoKTtcbiAgICAgICAgICAgIGNhc2UgJ2Zsb3cnOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUZsb3dDb2xsZWN0aW9uKCk7XG4gICAgICAgICAgICBjYXNlICdxdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VRdW90ZWRTY2FsYXIoKTtcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlQmxvY2tTY2FsYXIoKTtcbiAgICAgICAgICAgIGNhc2UgJ3BsYWluLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlUGxhaW5TY2FsYXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAqcGFyc2VTdHJlYW0oKSB7XG4gICAgICAgIGxldCBsaW5lID0gdGhpcy5nZXRMaW5lKCk7XG4gICAgICAgIGlmIChsaW5lID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnc3RyZWFtJyk7XG4gICAgICAgIGlmIChsaW5lWzBdID09PSBCT00pIHtcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lLnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGluZVswXSA9PT0gJyUnKSB7XG4gICAgICAgICAgICBsZXQgZGlyRW5kID0gbGluZS5sZW5ndGg7XG4gICAgICAgICAgICBsZXQgY3MgPSBsaW5lLmluZGV4T2YoJyMnKTtcbiAgICAgICAgICAgIHdoaWxlIChjcyAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaCA9IGxpbmVbY3MgLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xcdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlyRW5kID0gY3MgLSAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNzID0gbGluZS5pbmRleE9mKCcjJywgY3MgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoID0gbGluZVtkaXJFbmQgLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xcdCcpXG4gICAgICAgICAgICAgICAgICAgIGRpckVuZCAtPSAxO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuID0gKHlpZWxkKiB0aGlzLnB1c2hDb3VudChkaXJFbmQpKSArICh5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpKTtcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudChsaW5lLmxlbmd0aCAtIG4pOyAvLyBwb3NzaWJsZSBjb21tZW50XG4gICAgICAgICAgICB0aGlzLnB1c2hOZXdsaW5lKCk7XG4gICAgICAgICAgICByZXR1cm4gJ3N0cmVhbSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYXRMaW5lRW5kKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHNwID0geWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKTtcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudChsaW5lLmxlbmd0aCAtIHNwKTtcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hOZXdsaW5lKCk7XG4gICAgICAgICAgICByZXR1cm4gJ3N0cmVhbSc7XG4gICAgICAgIH1cbiAgICAgICAgeWllbGQgRE9DVU1FTlQ7XG4gICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUxpbmVTdGFydCgpO1xuICAgIH1cbiAgICAqcGFyc2VMaW5lU3RhcnQoKSB7XG4gICAgICAgIGNvbnN0IGNoID0gdGhpcy5jaGFyQXQoMCk7XG4gICAgICAgIGlmICghY2ggJiYgIXRoaXMuYXRFbmQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdsaW5lLXN0YXJ0Jyk7XG4gICAgICAgIGlmIChjaCA9PT0gJy0nIHx8IGNoID09PSAnLicpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hdEVuZCAmJiAhdGhpcy5oYXNDaGFycyg0KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdsaW5lLXN0YXJ0Jyk7XG4gICAgICAgICAgICBjb25zdCBzID0gdGhpcy5wZWVrKDMpO1xuICAgICAgICAgICAgaWYgKChzID09PSAnLS0tJyB8fCBzID09PSAnLi4uJykgJiYgaXNFbXB0eSh0aGlzLmNoYXJBdCgzKSkpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQoMyk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnRWYWx1ZSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnROZXh0ID0gMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcyA9PT0gJy0tLScgPyAnZG9jJyA6ICdzdHJlYW0nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5kZW50VmFsdWUgPSB5aWVsZCogdGhpcy5wdXNoU3BhY2VzKGZhbHNlKTtcbiAgICAgICAgaWYgKHRoaXMuaW5kZW50TmV4dCA+IHRoaXMuaW5kZW50VmFsdWUgJiYgIWlzRW1wdHkodGhpcy5jaGFyQXQoMSkpKVxuICAgICAgICAgICAgdGhpcy5pbmRlbnROZXh0ID0gdGhpcy5pbmRlbnRWYWx1ZTtcbiAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlQmxvY2tTdGFydCgpO1xuICAgIH1cbiAgICAqcGFyc2VCbG9ja1N0YXJ0KCkge1xuICAgICAgICBjb25zdCBbY2gwLCBjaDFdID0gdGhpcy5wZWVrKDIpO1xuICAgICAgICBpZiAoIWNoMSAmJiAhdGhpcy5hdEVuZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ2Jsb2NrLXN0YXJ0Jyk7XG4gICAgICAgIGlmICgoY2gwID09PSAnLScgfHwgY2gwID09PSAnPycgfHwgY2gwID09PSAnOicpICYmIGlzRW1wdHkoY2gxKSkge1xuICAgICAgICAgICAgY29uc3QgbiA9ICh5aWVsZCogdGhpcy5wdXNoQ291bnQoMSkpICsgKHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSkpO1xuICAgICAgICAgICAgdGhpcy5pbmRlbnROZXh0ID0gdGhpcy5pbmRlbnRWYWx1ZSArIDE7XG4gICAgICAgICAgICB0aGlzLmluZGVudFZhbHVlICs9IG47XG4gICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VCbG9ja1N0YXJ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdkb2MnO1xuICAgIH1cbiAgICAqcGFyc2VEb2N1bWVudCgpIHtcbiAgICAgICAgeWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKTtcbiAgICAgICAgY29uc3QgbGluZSA9IHRoaXMuZ2V0TGluZSgpO1xuICAgICAgICBpZiAobGluZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ2RvYycpO1xuICAgICAgICBsZXQgbiA9IHlpZWxkKiB0aGlzLnB1c2hJbmRpY2F0b3JzKCk7XG4gICAgICAgIHN3aXRjaCAobGluZVtuXSkge1xuICAgICAgICAgICAgY2FzZSAnIyc6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KGxpbmUubGVuZ3RoIC0gbik7XG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaE5ld2xpbmUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VMaW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGNhc2UgJ3snOlxuICAgICAgICAgICAgY2FzZSAnWyc6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0tleSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0xldmVsID0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Zsb3cnO1xuICAgICAgICAgICAgY2FzZSAnfSc6XG4gICAgICAgICAgICBjYXNlICddJzpcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGFuIGVycm9yXG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KDEpO1xuICAgICAgICAgICAgICAgIHJldHVybiAnZG9jJztcbiAgICAgICAgICAgIGNhc2UgJyonOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hVbnRpbChpc05vdEFuY2hvckNoYXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiAnZG9jJztcbiAgICAgICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICAgIGNhc2UgXCInXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlUXVvdGVkU2NhbGFyKCk7XG4gICAgICAgICAgICBjYXNlICd8JzpcbiAgICAgICAgICAgIGNhc2UgJz4nOlxuICAgICAgICAgICAgICAgIG4gKz0geWllbGQqIHRoaXMucGFyc2VCbG9ja1NjYWxhckhlYWRlcigpO1xuICAgICAgICAgICAgICAgIG4gKz0geWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKTtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQobGluZS5sZW5ndGggLSBuKTtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoTmV3bGluZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUJsb2NrU2NhbGFyKCk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZVBsYWluU2NhbGFyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKnBhcnNlRmxvd0NvbGxlY3Rpb24oKSB7XG4gICAgICAgIGxldCBubCwgc3A7XG4gICAgICAgIGxldCBpbmRlbnQgPSAtMTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgbmwgPSB5aWVsZCogdGhpcy5wdXNoTmV3bGluZSgpO1xuICAgICAgICAgICAgaWYgKG5sID4gMCkge1xuICAgICAgICAgICAgICAgIHNwID0geWllbGQqIHRoaXMucHVzaFNwYWNlcyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnRWYWx1ZSA9IGluZGVudCA9IHNwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3AgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3AgKz0geWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKTtcbiAgICAgICAgfSB3aGlsZSAobmwgKyBzcCA+IDApO1xuICAgICAgICBjb25zdCBsaW5lID0gdGhpcy5nZXRMaW5lKCk7XG4gICAgICAgIGlmIChsaW5lID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnZmxvdycpO1xuICAgICAgICBpZiAoKGluZGVudCAhPT0gLTEgJiYgaW5kZW50IDwgdGhpcy5pbmRlbnROZXh0ICYmIGxpbmVbMF0gIT09ICcjJykgfHxcbiAgICAgICAgICAgIChpbmRlbnQgPT09IDAgJiZcbiAgICAgICAgICAgICAgICAobGluZS5zdGFydHNXaXRoKCctLS0nKSB8fCBsaW5lLnN0YXJ0c1dpdGgoJy4uLicpKSAmJlxuICAgICAgICAgICAgICAgIGlzRW1wdHkobGluZVszXSkpKSB7XG4gICAgICAgICAgICAvLyBBbGxvd2luZyBmb3IgdGhlIHRlcm1pbmFsIF0gb3IgfSBhdCB0aGUgc2FtZSAocmF0aGVyIHRoYW4gZ3JlYXRlcilcbiAgICAgICAgICAgIC8vIGluZGVudCBsZXZlbCBhcyB0aGUgaW5pdGlhbCBbIG9yIHsgaXMgdGVjaG5pY2FsbHkgaW52YWxpZCwgYnV0XG4gICAgICAgICAgICAvLyBmYWlsaW5nIGhlcmUgd291bGQgYmUgc3VycHJpc2luZyB0byB1c2Vycy5cbiAgICAgICAgICAgIGNvbnN0IGF0Rmxvd0VuZE1hcmtlciA9IGluZGVudCA9PT0gdGhpcy5pbmRlbnROZXh0IC0gMSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0xldmVsID09PSAxICYmXG4gICAgICAgICAgICAgICAgKGxpbmVbMF0gPT09ICddJyB8fCBsaW5lWzBdID09PSAnfScpO1xuICAgICAgICAgICAgaWYgKCFhdEZsb3dFbmRNYXJrZXIpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGFuIGVycm9yXG4gICAgICAgICAgICAgICAgdGhpcy5mbG93TGV2ZWwgPSAwO1xuICAgICAgICAgICAgICAgIHlpZWxkIEZMT1dfRU5EO1xuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUxpbmVTdGFydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBuID0gMDtcbiAgICAgICAgd2hpbGUgKGxpbmVbbl0gPT09ICcsJykge1xuICAgICAgICAgICAgbiArPSB5aWVsZCogdGhpcy5wdXNoQ291bnQoMSk7XG4gICAgICAgICAgICBuICs9IHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmZsb3dLZXkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBuICs9IHlpZWxkKiB0aGlzLnB1c2hJbmRpY2F0b3JzKCk7XG4gICAgICAgIHN3aXRjaCAobGluZVtuXSkge1xuICAgICAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdmbG93JztcbiAgICAgICAgICAgIGNhc2UgJyMnOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudChsaW5lLmxlbmd0aCAtIG4pO1xuICAgICAgICAgICAgICAgIHJldHVybiAnZmxvdyc7XG4gICAgICAgICAgICBjYXNlICd7JzpcbiAgICAgICAgICAgIGNhc2UgJ1snOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dLZXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dMZXZlbCArPSAxO1xuICAgICAgICAgICAgICAgIHJldHVybiAnZmxvdyc7XG4gICAgICAgICAgICBjYXNlICd9JzpcbiAgICAgICAgICAgIGNhc2UgJ10nOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dLZXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0xldmVsIC09IDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmxvd0xldmVsID8gJ2Zsb3cnIDogJ2RvYyc7XG4gICAgICAgICAgICBjYXNlICcqJzpcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoVW50aWwoaXNOb3RBbmNob3JDaGFyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Zsb3cnO1xuICAgICAgICAgICAgY2FzZSAnXCInOlxuICAgICAgICAgICAgY2FzZSBcIidcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dLZXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZVF1b3RlZFNjYWxhcigpO1xuICAgICAgICAgICAgY2FzZSAnOic6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gdGhpcy5jaGFyQXQoMSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmxvd0tleSB8fCBpc0VtcHR5KG5leHQpIHx8IG5leHQgPT09ICcsJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZsb3dLZXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KDEpO1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2Zsb3cnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0tleSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZVBsYWluU2NhbGFyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKnBhcnNlUXVvdGVkU2NhbGFyKCkge1xuICAgICAgICBjb25zdCBxdW90ZSA9IHRoaXMuY2hhckF0KDApO1xuICAgICAgICBsZXQgZW5kID0gdGhpcy5idWZmZXIuaW5kZXhPZihxdW90ZSwgdGhpcy5wb3MgKyAxKTtcbiAgICAgICAgaWYgKHF1b3RlID09PSBcIidcIikge1xuICAgICAgICAgICAgd2hpbGUgKGVuZCAhPT0gLTEgJiYgdGhpcy5idWZmZXJbZW5kICsgMV0gPT09IFwiJ1wiKVxuICAgICAgICAgICAgICAgIGVuZCA9IHRoaXMuYnVmZmVyLmluZGV4T2YoXCInXCIsIGVuZCArIDIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZG91YmxlLXF1b3RlXG4gICAgICAgICAgICB3aGlsZSAoZW5kICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGxldCBuID0gMDtcbiAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5idWZmZXJbZW5kIC0gMSAtIG5dID09PSAnXFxcXCcpXG4gICAgICAgICAgICAgICAgICAgIG4gKz0gMTtcbiAgICAgICAgICAgICAgICBpZiAobiAlIDIgPT09IDApXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGVuZCA9IHRoaXMuYnVmZmVyLmluZGV4T2YoJ1wiJywgZW5kICsgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gT25seSBsb29raW5nIGZvciBuZXdsaW5lcyB3aXRoaW4gdGhlIHF1b3Rlc1xuICAgICAgICBjb25zdCBxYiA9IHRoaXMuYnVmZmVyLnN1YnN0cmluZygwLCBlbmQpO1xuICAgICAgICBsZXQgbmwgPSBxYi5pbmRleE9mKCdcXG4nLCB0aGlzLnBvcyk7XG4gICAgICAgIGlmIChubCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHdoaWxlIChubCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjcyA9IHRoaXMuY29udGludWVTY2FsYXIobmwgKyAxKTtcbiAgICAgICAgICAgICAgICBpZiAoY3MgPT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBubCA9IHFiLmluZGV4T2YoJ1xcbicsIGNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChubCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGFuIGVycm9yIGNhdXNlZCBieSBhbiB1bmV4cGVjdGVkIHVuaW5kZW50XG4gICAgICAgICAgICAgICAgZW5kID0gbmwgLSAocWJbbmwgLSAxXSA9PT0gJ1xccicgPyAyIDogMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hdEVuZClcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdxdW90ZWQtc2NhbGFyJyk7XG4gICAgICAgICAgICBlbmQgPSB0aGlzLmJ1ZmZlci5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgeWllbGQqIHRoaXMucHVzaFRvSW5kZXgoZW5kICsgMSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gdGhpcy5mbG93TGV2ZWwgPyAnZmxvdycgOiAnZG9jJztcbiAgICB9XG4gICAgKnBhcnNlQmxvY2tTY2FsYXJIZWFkZXIoKSB7XG4gICAgICAgIHRoaXMuYmxvY2tTY2FsYXJJbmRlbnQgPSAtMTtcbiAgICAgICAgdGhpcy5ibG9ja1NjYWxhcktlZXAgPSBmYWxzZTtcbiAgICAgICAgbGV0IGkgPSB0aGlzLnBvcztcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoID0gdGhpcy5idWZmZXJbKytpXTtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJysnKVxuICAgICAgICAgICAgICAgIHRoaXMuYmxvY2tTY2FsYXJLZWVwID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoID4gJzAnICYmIGNoIDw9ICc5JylcbiAgICAgICAgICAgICAgICB0aGlzLmJsb2NrU2NhbGFySW5kZW50ID0gTnVtYmVyKGNoKSAtIDE7XG4gICAgICAgICAgICBlbHNlIGlmIChjaCAhPT0gJy0nKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wdXNoVW50aWwoY2ggPT4gaXNFbXB0eShjaCkgfHwgY2ggPT09ICcjJyk7XG4gICAgfVxuICAgICpwYXJzZUJsb2NrU2NhbGFyKCkge1xuICAgICAgICBsZXQgbmwgPSB0aGlzLnBvcyAtIDE7IC8vIG1heSBiZSAtMSBpZiB0aGlzLnBvcyA9PT0gMFxuICAgICAgICBsZXQgaW5kZW50ID0gMDtcbiAgICAgICAgbGV0IGNoO1xuICAgICAgICBsb29wOiBmb3IgKGxldCBpID0gdGhpcy5wb3M7IChjaCA9IHRoaXMuYnVmZmVyW2ldKTsgKytpKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGNoKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnICc6XG4gICAgICAgICAgICAgICAgICAgIGluZGVudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICAgICAgICAgICAgICBubCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGluZGVudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1xccic6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuYnVmZmVyW2kgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXh0ICYmICF0aGlzLmF0RW5kKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnYmxvY2stc2NhbGFyJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ID09PSAnXFxuJylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gLy8gZmFsbHRocm91Z2hcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBicmVhayBsb29wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghY2ggJiYgIXRoaXMuYXRFbmQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdibG9jay1zY2FsYXInKTtcbiAgICAgICAgaWYgKGluZGVudCA+PSB0aGlzLmluZGVudE5leHQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmJsb2NrU2NhbGFySW5kZW50ID09PSAtMSlcbiAgICAgICAgICAgICAgICB0aGlzLmluZGVudE5leHQgPSBpbmRlbnQ7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGVudE5leHQgPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJsb2NrU2NhbGFySW5kZW50ICsgKHRoaXMuaW5kZW50TmV4dCA9PT0gMCA/IDEgOiB0aGlzLmluZGVudE5leHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNzID0gdGhpcy5jb250aW51ZVNjYWxhcihubCArIDEpO1xuICAgICAgICAgICAgICAgIGlmIChjcyA9PT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIG5sID0gdGhpcy5idWZmZXIuaW5kZXhPZignXFxuJywgY3MpO1xuICAgICAgICAgICAgfSB3aGlsZSAobmwgIT09IC0xKTtcbiAgICAgICAgICAgIGlmIChubCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYXRFbmQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ2Jsb2NrLXNjYWxhcicpO1xuICAgICAgICAgICAgICAgIG5sID0gdGhpcy5idWZmZXIubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFRyYWlsaW5nIGluc3VmZmljaWVudGx5IGluZGVudGVkIHRhYnMgYXJlIGludmFsaWQuXG4gICAgICAgIC8vIFRvIGNhdGNoIHRoYXQgZHVyaW5nIHBhcnNpbmcsIHdlIGluY2x1ZGUgdGhlbSBpbiB0aGUgYmxvY2sgc2NhbGFyIHZhbHVlLlxuICAgICAgICBsZXQgaSA9IG5sICsgMTtcbiAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlcltpXTtcbiAgICAgICAgd2hpbGUgKGNoID09PSAnICcpXG4gICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcdCcpIHtcbiAgICAgICAgICAgIHdoaWxlIChjaCA9PT0gJ1xcdCcgfHwgY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xccicgfHwgY2ggPT09ICdcXG4nKVxuICAgICAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKytpXTtcbiAgICAgICAgICAgIG5sID0gaSAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuYmxvY2tTY2FsYXJLZWVwKSB7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgbGV0IGkgPSBubCAtIDE7XG4gICAgICAgICAgICAgICAgbGV0IGNoID0gdGhpcy5idWZmZXJbaV07XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAnXFxyJylcbiAgICAgICAgICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclstLWldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RDaGFyID0gaTsgLy8gRHJvcCB0aGUgbGluZSBpZiBsYXN0IGNoYXIgbm90IG1vcmUgaW5kZW50ZWRcbiAgICAgICAgICAgICAgICB3aGlsZSAoY2ggPT09ICcgJylcbiAgICAgICAgICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclstLWldO1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xcbicgJiYgaSA+PSB0aGlzLnBvcyAmJiBpICsgMSArIGluZGVudCA+IGxhc3RDaGFyKVxuICAgICAgICAgICAgICAgICAgICBubCA9IGk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHlpZWxkIFNDQUxBUjtcbiAgICAgICAgeWllbGQqIHRoaXMucHVzaFRvSW5kZXgobmwgKyAxLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlTGluZVN0YXJ0KCk7XG4gICAgfVxuICAgICpwYXJzZVBsYWluU2NhbGFyKCkge1xuICAgICAgICBjb25zdCBpbkZsb3cgPSB0aGlzLmZsb3dMZXZlbCA+IDA7XG4gICAgICAgIGxldCBlbmQgPSB0aGlzLnBvcyAtIDE7XG4gICAgICAgIGxldCBpID0gdGhpcy5wb3MgLSAxO1xuICAgICAgICBsZXQgY2g7XG4gICAgICAgIHdoaWxlICgoY2ggPSB0aGlzLmJ1ZmZlclsrK2ldKSkge1xuICAgICAgICAgICAgaWYgKGNoID09PSAnOicpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gdGhpcy5idWZmZXJbaSArIDFdO1xuICAgICAgICAgICAgICAgIGlmIChpc0VtcHR5KG5leHQpIHx8IChpbkZsb3cgJiYgZmxvd0luZGljYXRvckNoYXJzLmhhcyhuZXh0KSkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGVuZCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0VtcHR5KGNoKSkge1xuICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gdGhpcy5idWZmZXJbaSArIDFdO1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xccicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaCA9ICdcXG4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IHRoaXMuYnVmZmVyW2kgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmV4dCA9PT0gJyMnIHx8IChpbkZsb3cgJiYgZmxvd0luZGljYXRvckNoYXJzLmhhcyhuZXh0KSkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3MgPSB0aGlzLmNvbnRpbnVlU2NhbGFyKGkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNzID09PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBpID0gTWF0aC5tYXgoaSwgY3MgLSAyKTsgLy8gdG8gYWR2YW5jZSwgYnV0IHN0aWxsIGFjY291bnQgZm9yICcgIydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5GbG93ICYmIGZsb3dJbmRpY2F0b3JDaGFycy5oYXMoY2gpKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBlbmQgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghY2ggJiYgIXRoaXMuYXRFbmQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdwbGFpbi1zY2FsYXInKTtcbiAgICAgICAgeWllbGQgU0NBTEFSO1xuICAgICAgICB5aWVsZCogdGhpcy5wdXNoVG9JbmRleChlbmQgKyAxLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIGluRmxvdyA/ICdmbG93JyA6ICdkb2MnO1xuICAgIH1cbiAgICAqcHVzaENvdW50KG4pIHtcbiAgICAgICAgaWYgKG4gPiAwKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmJ1ZmZlci5zdWJzdHIodGhpcy5wb3MsIG4pO1xuICAgICAgICAgICAgdGhpcy5wb3MgKz0gbjtcbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAqcHVzaFRvSW5kZXgoaSwgYWxsb3dFbXB0eSkge1xuICAgICAgICBjb25zdCBzID0gdGhpcy5idWZmZXIuc2xpY2UodGhpcy5wb3MsIGkpO1xuICAgICAgICBpZiAocykge1xuICAgICAgICAgICAgeWllbGQgcztcbiAgICAgICAgICAgIHRoaXMucG9zICs9IHMubGVuZ3RoO1xuICAgICAgICAgICAgcmV0dXJuIHMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFsbG93RW1wdHkpXG4gICAgICAgICAgICB5aWVsZCAnJztcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgICpwdXNoSW5kaWNhdG9ycygpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmNoYXJBdCgwKSkge1xuICAgICAgICAgICAgY2FzZSAnISc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICgoeWllbGQqIHRoaXMucHVzaFRhZygpKSArXG4gICAgICAgICAgICAgICAgICAgICh5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpKSArXG4gICAgICAgICAgICAgICAgICAgICh5aWVsZCogdGhpcy5wdXNoSW5kaWNhdG9ycygpKSk7XG4gICAgICAgICAgICBjYXNlICcmJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKCh5aWVsZCogdGhpcy5wdXNoVW50aWwoaXNOb3RBbmNob3JDaGFyKSkgK1xuICAgICAgICAgICAgICAgICAgICAoeWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKSkgK1xuICAgICAgICAgICAgICAgICAgICAoeWllbGQqIHRoaXMucHVzaEluZGljYXRvcnMoKSkpO1xuICAgICAgICAgICAgY2FzZSAnLSc6IC8vIHRoaXMgaXMgYW4gZXJyb3JcbiAgICAgICAgICAgIGNhc2UgJz8nOiAvLyB0aGlzIGlzIGFuIGVycm9yIG91dHNpZGUgZmxvdyBjb2xsZWN0aW9uc1xuICAgICAgICAgICAgY2FzZSAnOic6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbkZsb3cgPSB0aGlzLmZsb3dMZXZlbCA+IDA7XG4gICAgICAgICAgICAgICAgY29uc3QgY2gxID0gdGhpcy5jaGFyQXQoMSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRW1wdHkoY2gxKSB8fCAoaW5GbG93ICYmIGZsb3dJbmRpY2F0b3JDaGFycy5oYXMoY2gxKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbkZsb3cpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGVudE5leHQgPSB0aGlzLmluZGVudFZhbHVlICsgMTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5mbG93S2V5KVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mbG93S2V5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSkpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICh5aWVsZCogdGhpcy5wdXNoSW5kaWNhdG9ycygpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAqcHVzaFRhZygpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hhckF0KDEpID09PSAnPCcpIHtcbiAgICAgICAgICAgIGxldCBpID0gdGhpcy5wb3MgKyAyO1xuICAgICAgICAgICAgbGV0IGNoID0gdGhpcy5idWZmZXJbaV07XG4gICAgICAgICAgICB3aGlsZSAoIWlzRW1wdHkoY2gpICYmIGNoICE9PSAnPicpXG4gICAgICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsrK2ldO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnB1c2hUb0luZGV4KGNoID09PSAnPicgPyBpICsgMSA6IGksIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBpID0gdGhpcy5wb3MgKyAxO1xuICAgICAgICAgICAgbGV0IGNoID0gdGhpcy5idWZmZXJbaV07XG4gICAgICAgICAgICB3aGlsZSAoY2gpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFnQ2hhcnMuaGFzKGNoKSlcbiAgICAgICAgICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsrK2ldO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoID09PSAnJScgJiZcbiAgICAgICAgICAgICAgICAgICAgaGV4RGlnaXRzLmhhcyh0aGlzLmJ1ZmZlcltpICsgMV0pICYmXG4gICAgICAgICAgICAgICAgICAgIGhleERpZ2l0cy5oYXModGhpcy5idWZmZXJbaSArIDJdKSkge1xuICAgICAgICAgICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWyhpICs9IDMpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wdXNoVG9JbmRleChpLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKnB1c2hOZXdsaW5lKCkge1xuICAgICAgICBjb25zdCBjaCA9IHRoaXMuYnVmZmVyW3RoaXMucG9zXTtcbiAgICAgICAgaWYgKGNoID09PSAnXFxuJylcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wdXNoQ291bnQoMSk7XG4gICAgICAgIGVsc2UgaWYgKGNoID09PSAnXFxyJyAmJiB0aGlzLmNoYXJBdCgxKSA9PT0gJ1xcbicpXG4gICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucHVzaENvdW50KDIpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgKnB1c2hTcGFjZXMoYWxsb3dUYWJzKSB7XG4gICAgICAgIGxldCBpID0gdGhpcy5wb3MgLSAxO1xuICAgICAgICBsZXQgY2g7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKytpXTtcbiAgICAgICAgfSB3aGlsZSAoY2ggPT09ICcgJyB8fCAoYWxsb3dUYWJzICYmIGNoID09PSAnXFx0JykpO1xuICAgICAgICBjb25zdCBuID0gaSAtIHRoaXMucG9zO1xuICAgICAgICBpZiAobiA+IDApIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuYnVmZmVyLnN1YnN0cih0aGlzLnBvcywgbik7XG4gICAgICAgICAgICB0aGlzLnBvcyA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG47XG4gICAgfVxuICAgICpwdXNoVW50aWwodGVzdCkge1xuICAgICAgICBsZXQgaSA9IHRoaXMucG9zO1xuICAgICAgICBsZXQgY2ggPSB0aGlzLmJ1ZmZlcltpXTtcbiAgICAgICAgd2hpbGUgKCF0ZXN0KGNoKSlcbiAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKytpXTtcbiAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnB1c2hUb0luZGV4KGksIGZhbHNlKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IExleGVyIH07XG4iLCIvKipcbiAqIFRyYWNrcyBuZXdsaW5lcyBkdXJpbmcgcGFyc2luZyBpbiBvcmRlciB0byBwcm92aWRlIGFuIGVmZmljaWVudCBBUEkgZm9yXG4gKiBkZXRlcm1pbmluZyB0aGUgb25lLWluZGV4ZWQgYHsgbGluZSwgY29sIH1gIHBvc2l0aW9uIGZvciBhbnkgb2Zmc2V0XG4gKiB3aXRoaW4gdGhlIGlucHV0LlxuICovXG5jbGFzcyBMaW5lQ291bnRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubGluZVN0YXJ0cyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2hvdWxkIGJlIGNhbGxlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgY2FsbFxuICAgICAgICAgKiBgbGluZUNvdW50ZXIubGluZVN0YXJ0cy5zb3J0KClgIGJlZm9yZSBjYWxsaW5nIGBsaW5lUG9zKClgLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hZGROZXdMaW5lID0gKG9mZnNldCkgPT4gdGhpcy5saW5lU3RhcnRzLnB1c2gob2Zmc2V0KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBlcmZvcm1zIGEgYmluYXJ5IHNlYXJjaCBhbmQgcmV0dXJucyB0aGUgMS1pbmRleGVkIHsgbGluZSwgY29sIH1cbiAgICAgICAgICogcG9zaXRpb24gb2YgYG9mZnNldGAuIElmIGBsaW5lID09PSAwYCwgYGFkZE5ld0xpbmVgIGhhcyBuZXZlciBiZWVuXG4gICAgICAgICAqIGNhbGxlZCBvciBgb2Zmc2V0YCBpcyBiZWZvcmUgdGhlIGZpcnN0IGtub3duIG5ld2xpbmUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxpbmVQb3MgPSAob2Zmc2V0KSA9PiB7XG4gICAgICAgICAgICBsZXQgbG93ID0gMDtcbiAgICAgICAgICAgIGxldCBoaWdoID0gdGhpcy5saW5lU3RhcnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWlkID0gKGxvdyArIGhpZ2gpID4+IDE7IC8vIE1hdGguZmxvb3IoKGxvdyArIGhpZ2gpIC8gMilcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5saW5lU3RhcnRzW21pZF0gPCBvZmZzZXQpXG4gICAgICAgICAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubGluZVN0YXJ0c1tsb3ddID09PSBvZmZzZXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgbGluZTogbG93ICsgMSwgY29sOiAxIH07XG4gICAgICAgICAgICBpZiAobG93ID09PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGxpbmU6IDAsIGNvbDogb2Zmc2V0IH07XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMubGluZVN0YXJ0c1tsb3cgLSAxXTtcbiAgICAgICAgICAgIHJldHVybiB7IGxpbmU6IGxvdywgY29sOiBvZmZzZXQgLSBzdGFydCArIDEgfTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IExpbmVDb3VudGVyIH07XG4iLCJpbXBvcnQgeyB0b2tlblR5cGUgfSBmcm9tICcuL2NzdC5qcyc7XG5pbXBvcnQgeyBMZXhlciB9IGZyb20gJy4vbGV4ZXIuanMnO1xuXG5mdW5jdGlvbiBpbmNsdWRlc1Rva2VuKGxpc3QsIHR5cGUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpXG4gICAgICAgIGlmIChsaXN0W2ldLnR5cGUgPT09IHR5cGUpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBmaW5kTm9uRW1wdHlJbmRleChsaXN0KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHN3aXRjaCAobGlzdFtpXS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5mdW5jdGlvbiBpc0Zsb3dUb2tlbih0b2tlbikge1xuICAgIHN3aXRjaCAodG9rZW4/LnR5cGUpIHtcbiAgICAgICAgY2FzZSAnYWxpYXMnOlxuICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnZmxvdy1jb2xsZWN0aW9uJzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFByZXZQcm9wcyhwYXJlbnQpIHtcbiAgICBzd2l0Y2ggKHBhcmVudC50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2RvY3VtZW50JzpcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnQuc3RhcnQ7XG4gICAgICAgIGNhc2UgJ2Jsb2NrLW1hcCc6IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ID0gcGFyZW50Lml0ZW1zW3BhcmVudC5pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIHJldHVybiBpdC5zZXAgPz8gaXQuc3RhcnQ7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnYmxvY2stc2VxJzpcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnQuaXRlbXNbcGFyZW50Lml0ZW1zLmxlbmd0aCAtIDFdLnN0YXJ0O1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cbi8qKiBOb3RlOiBNYXkgbW9kaWZ5IGlucHV0IGFycmF5ICovXG5mdW5jdGlvbiBnZXRGaXJzdEtleVN0YXJ0UHJvcHMocHJldikge1xuICAgIGlmIChwcmV2Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIGxldCBpID0gcHJldi5sZW5ndGg7XG4gICAgbG9vcDogd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgICAgIHN3aXRjaCAocHJldltpXS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdkb2Mtc3RhcnQnOlxuICAgICAgICAgICAgY2FzZSAnZXhwbGljaXQta2V5LWluZCc6XG4gICAgICAgICAgICBjYXNlICdtYXAtdmFsdWUtaW5kJzpcbiAgICAgICAgICAgIGNhc2UgJ3NlcS1pdGVtLWluZCc6XG4gICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICBicmVhayBsb29wO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChwcmV2WysraV0/LnR5cGUgPT09ICdzcGFjZScpIHtcbiAgICAgICAgLyogbG9vcCAqL1xuICAgIH1cbiAgICByZXR1cm4gcHJldi5zcGxpY2UoaSwgcHJldi5sZW5ndGgpO1xufVxuZnVuY3Rpb24gZml4Rmxvd1NlcUl0ZW1zKGZjKSB7XG4gICAgaWYgKGZjLnN0YXJ0LnR5cGUgPT09ICdmbG93LXNlcS1zdGFydCcpIHtcbiAgICAgICAgZm9yIChjb25zdCBpdCBvZiBmYy5pdGVtcykge1xuICAgICAgICAgICAgaWYgKGl0LnNlcCAmJlxuICAgICAgICAgICAgICAgICFpdC52YWx1ZSAmJlxuICAgICAgICAgICAgICAgICFpbmNsdWRlc1Rva2VuKGl0LnN0YXJ0LCAnZXhwbGljaXQta2V5LWluZCcpICYmXG4gICAgICAgICAgICAgICAgIWluY2x1ZGVzVG9rZW4oaXQuc2VwLCAnbWFwLXZhbHVlLWluZCcpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0LmtleSlcbiAgICAgICAgICAgICAgICAgICAgaXQudmFsdWUgPSBpdC5rZXk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGl0LmtleTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGbG93VG9rZW4oaXQudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZS5lbmQpXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShpdC52YWx1ZS5lbmQsIGl0LnNlcCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnZhbHVlLmVuZCA9IGl0LnNlcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShpdC5zdGFydCwgaXQuc2VwKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgaXQuc2VwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBBIFlBTUwgY29uY3JldGUgc3ludGF4IHRyZWUgKENTVCkgcGFyc2VyXG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IHNyYzogc3RyaW5nID0gLi4uXG4gKiBmb3IgKGNvbnN0IHRva2VuIG9mIG5ldyBQYXJzZXIoKS5wYXJzZShzcmMpKSB7XG4gKiAgIC8vIHRva2VuOiBUb2tlblxuICogfVxuICogYGBgXG4gKlxuICogVG8gdXNlIHRoZSBwYXJzZXIgd2l0aCBhIHVzZXItcHJvdmlkZWQgbGV4ZXI6XG4gKlxuICogYGBgdHNcbiAqIGZ1bmN0aW9uKiBwYXJzZShzb3VyY2U6IHN0cmluZywgbGV4ZXI6IExleGVyKSB7XG4gKiAgIGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzZXIoKVxuICogICBmb3IgKGNvbnN0IGxleGVtZSBvZiBsZXhlci5sZXgoc291cmNlKSlcbiAqICAgICB5aWVsZCogcGFyc2VyLm5leHQobGV4ZW1lKVxuICogICB5aWVsZCogcGFyc2VyLmVuZCgpXG4gKiB9XG4gKlxuICogY29uc3Qgc3JjOiBzdHJpbmcgPSAuLi5cbiAqIGNvbnN0IGxleGVyID0gbmV3IExleGVyKClcbiAqIGZvciAoY29uc3QgdG9rZW4gb2YgcGFyc2Uoc3JjLCBsZXhlcikpIHtcbiAqICAgLy8gdG9rZW46IFRva2VuXG4gKiB9XG4gKiBgYGBcbiAqL1xuY2xhc3MgUGFyc2VyIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gb25OZXdMaW5lIC0gSWYgZGVmaW5lZCwgY2FsbGVkIHNlcGFyYXRlbHkgd2l0aCB0aGUgc3RhcnQgcG9zaXRpb24gb2ZcbiAgICAgKiAgIGVhY2ggbmV3IGxpbmUgKGluIGBwYXJzZSgpYCwgaW5jbHVkaW5nIHRoZSBzdGFydCBvZiBpbnB1dCkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob25OZXdMaW5lKSB7XG4gICAgICAgIC8qKiBJZiB0cnVlLCBzcGFjZSBhbmQgc2VxdWVuY2UgaW5kaWNhdG9ycyBjb3VudCBhcyBpbmRlbnRhdGlvbiAqL1xuICAgICAgICB0aGlzLmF0TmV3TGluZSA9IHRydWU7XG4gICAgICAgIC8qKiBJZiB0cnVlLCBuZXh0IHRva2VuIGlzIGEgc2NhbGFyIHZhbHVlICovXG4gICAgICAgIHRoaXMuYXRTY2FsYXIgPSBmYWxzZTtcbiAgICAgICAgLyoqIEN1cnJlbnQgaW5kZW50YXRpb24gbGV2ZWwgKi9cbiAgICAgICAgdGhpcy5pbmRlbnQgPSAwO1xuICAgICAgICAvKiogQ3VycmVudCBvZmZzZXQgc2luY2UgdGhlIHN0YXJ0IG9mIHBhcnNpbmcgKi9cbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgICAvKiogT24gdGhlIHNhbWUgbGluZSB3aXRoIGEgYmxvY2sgbWFwIGtleSAqL1xuICAgICAgICB0aGlzLm9uS2V5TGluZSA9IGZhbHNlO1xuICAgICAgICAvKiogVG9wIGluZGljYXRlcyB0aGUgbm9kZSB0aGF0J3MgY3VycmVudGx5IGJlaW5nIGJ1aWx0ICovXG4gICAgICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICAgICAgLyoqIFRoZSBzb3VyY2Ugb2YgdGhlIGN1cnJlbnQgdG9rZW4sIHNldCBpbiBwYXJzZSgpICovXG4gICAgICAgIHRoaXMuc291cmNlID0gJyc7XG4gICAgICAgIC8qKiBUaGUgdHlwZSBvZiB0aGUgY3VycmVudCB0b2tlbiwgc2V0IGluIHBhcnNlKCkgKi9cbiAgICAgICAgdGhpcy50eXBlID0gJyc7XG4gICAgICAgIC8vIE11c3QgYmUgZGVmaW5lZCBhZnRlciBgbmV4dCgpYFxuICAgICAgICB0aGlzLmxleGVyID0gbmV3IExleGVyKCk7XG4gICAgICAgIHRoaXMub25OZXdMaW5lID0gb25OZXdMaW5lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZSBgc291cmNlYCBhcyBhIFlBTUwgc3RyZWFtLlxuICAgICAqIElmIGBpbmNvbXBsZXRlYCwgYSBwYXJ0IG9mIHRoZSBsYXN0IGxpbmUgbWF5IGJlIGxlZnQgYXMgYSBidWZmZXIgZm9yIHRoZSBuZXh0IGNhbGwuXG4gICAgICpcbiAgICAgKiBFcnJvcnMgYXJlIG5vdCB0aHJvd24sIGJ1dCB5aWVsZGVkIGFzIGB7IHR5cGU6ICdlcnJvcicsIG1lc3NhZ2UgfWAgdG9rZW5zLlxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBnZW5lcmF0b3Igb2YgdG9rZW5zIHJlcHJlc2VudGluZyBlYWNoIGRpcmVjdGl2ZSwgZG9jdW1lbnQsIGFuZCBvdGhlciBzdHJ1Y3R1cmUuXG4gICAgICovXG4gICAgKnBhcnNlKHNvdXJjZSwgaW5jb21wbGV0ZSA9IGZhbHNlKSB7XG4gICAgICAgIGlmICh0aGlzLm9uTmV3TGluZSAmJiB0aGlzLm9mZnNldCA9PT0gMClcbiAgICAgICAgICAgIHRoaXMub25OZXdMaW5lKDApO1xuICAgICAgICBmb3IgKGNvbnN0IGxleGVtZSBvZiB0aGlzLmxleGVyLmxleChzb3VyY2UsIGluY29tcGxldGUpKVxuICAgICAgICAgICAgeWllbGQqIHRoaXMubmV4dChsZXhlbWUpO1xuICAgICAgICBpZiAoIWluY29tcGxldGUpXG4gICAgICAgICAgICB5aWVsZCogdGhpcy5lbmQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWR2YW5jZSB0aGUgcGFyc2VyIGJ5IHRoZSBgc291cmNlYCBvZiBvbmUgbGV4aWNhbCB0b2tlbi5cbiAgICAgKi9cbiAgICAqbmV4dChzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIGlmICh0aGlzLmF0U2NhbGFyKSB7XG4gICAgICAgICAgICB0aGlzLmF0U2NhbGFyID0gZmFsc2U7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5zdGVwKCk7XG4gICAgICAgICAgICB0aGlzLm9mZnNldCArPSBzb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0b2tlblR5cGUoc291cmNlKTtcbiAgICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYE5vdCBhIFlBTUwgdG9rZW46ICR7c291cmNlfWA7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoeyB0eXBlOiAnZXJyb3InLCBvZmZzZXQ6IHRoaXMub2Zmc2V0LCBtZXNzYWdlLCBzb3VyY2UgfSk7XG4gICAgICAgICAgICB0aGlzLm9mZnNldCArPSBzb3VyY2UubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdzY2FsYXInKSB7XG4gICAgICAgICAgICB0aGlzLmF0TmV3TGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5hdFNjYWxhciA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSAnc2NhbGFyJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5zdGVwKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdE5ld0xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGVudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uTmV3TGluZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25OZXdMaW5lKHRoaXMub2Zmc2V0ICsgc291cmNlLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXROZXdMaW5lICYmIHNvdXJjZVswXSA9PT0gJyAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRlbnQgKz0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZXhwbGljaXQta2V5LWluZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbWFwLXZhbHVlLWluZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnc2VxLWl0ZW0taW5kJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXROZXdMaW5lKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRlbnQgKz0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZG9jLW1vZGUnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2Zsb3ctZXJyb3ItZW5kJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXROZXdMaW5lID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm9mZnNldCArPSBzb3VyY2UubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBDYWxsIGF0IGVuZCBvZiBpbnB1dCB0byBwdXNoIG91dCBhbnkgcmVtYWluaW5nIGNvbnN0cnVjdGlvbnMgKi9cbiAgICAqZW5kKCkge1xuICAgICAgICB3aGlsZSAodGhpcy5zdGFjay5sZW5ndGggPiAwKVxuICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgfVxuICAgIGdldCBzb3VyY2VUb2tlbigpIHtcbiAgICAgICAgY29uc3Qgc3QgPSB7XG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5zb3VyY2VcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHN0O1xuICAgIH1cbiAgICAqc3RlcCgpIHtcbiAgICAgICAgY29uc3QgdG9wID0gdGhpcy5wZWVrKDEpO1xuICAgICAgICBpZiAodGhpcy50eXBlID09PSAnZG9jLWVuZCcgJiYgKCF0b3AgfHwgdG9wLnR5cGUgIT09ICdkb2MtZW5kJykpIHtcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLnN0YWNrLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdkb2MtZW5kJyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcy5zb3VyY2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdG9wKVxuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnN0cmVhbSgpO1xuICAgICAgICBzd2l0Y2ggKHRvcC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdkb2N1bWVudCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLmRvY3VtZW50KHRvcCk7XG4gICAgICAgICAgICBjYXNlICdhbGlhcyc6XG4gICAgICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5zY2FsYXIodG9wKTtcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLmJsb2NrU2NhbGFyKHRvcCk7XG4gICAgICAgICAgICBjYXNlICdibG9jay1tYXAnOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5ibG9ja01hcCh0b3ApO1xuICAgICAgICAgICAgY2FzZSAnYmxvY2stc2VxJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMuYmxvY2tTZXF1ZW5jZSh0b3ApO1xuICAgICAgICAgICAgY2FzZSAnZmxvdy1jb2xsZWN0aW9uJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMuZmxvd0NvbGxlY3Rpb24odG9wKTtcbiAgICAgICAgICAgIGNhc2UgJ2RvYy1lbmQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5kb2N1bWVudEVuZCh0b3ApO1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgIH1cbiAgICBwZWVrKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSBuXTtcbiAgICB9XG4gICAgKnBvcChlcnJvcikge1xuICAgICAgICBjb25zdCB0b2tlbiA9IGVycm9yID8/IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gJ1RyaWVkIHRvIHBvcCBhbiBlbXB0eSBzdGFjayc7XG4gICAgICAgICAgICB5aWVsZCB7IHR5cGU6ICdlcnJvcicsIG9mZnNldDogdGhpcy5vZmZzZXQsIHNvdXJjZTogJycsIG1lc3NhZ2UgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgeWllbGQgdG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0b3AgPSB0aGlzLnBlZWsoMSk7XG4gICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2Jsb2NrLXNjYWxhcicpIHtcbiAgICAgICAgICAgICAgICAvLyBCbG9jayBzY2FsYXJzIHVzZSB0aGVpciBwYXJlbnQgcmF0aGVyIHRoYW4gaGVhZGVyIGluZGVudFxuICAgICAgICAgICAgICAgIHRva2VuLmluZGVudCA9ICdpbmRlbnQnIGluIHRvcCA/IHRvcC5pbmRlbnQgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gJ2Zsb3ctY29sbGVjdGlvbicgJiYgdG9wLnR5cGUgPT09ICdkb2N1bWVudCcpIHtcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgYWxsIGluZGVudCBmb3IgdG9wLWxldmVsIGZsb3cgY29sbGVjdGlvbnNcbiAgICAgICAgICAgICAgICB0b2tlbi5pbmRlbnQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdmbG93LWNvbGxlY3Rpb24nKVxuICAgICAgICAgICAgICAgIGZpeEZsb3dTZXFJdGVtcyh0b2tlbik7XG4gICAgICAgICAgICBzd2l0Y2ggKHRvcC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZG9jdW1lbnQnOlxuICAgICAgICAgICAgICAgICAgICB0b3AudmFsdWUgPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYmxvY2stc2NhbGFyJzpcbiAgICAgICAgICAgICAgICAgICAgdG9wLnByb3BzLnB1c2godG9rZW4pOyAvLyBlcnJvclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdibG9jay1tYXAnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ID0gdG9wLml0ZW1zW3RvcC5pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AuaXRlbXMucHVzaCh7IHN0YXJ0OiBbXSwga2V5OiB0b2tlbiwgc2VwOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnZhbHVlID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGl0LCB7IGtleTogdG9rZW4sIHNlcDogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9ICFpdC5leHBsaWNpdEtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnYmxvY2stc2VxJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdCA9IHRvcC5pdGVtc1t0b3AuaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcC5pdGVtcy5wdXNoKHsgc3RhcnQ6IFtdLCB2YWx1ZTogdG9rZW4gfSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnZhbHVlID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdmbG93LWNvbGxlY3Rpb24nOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ID0gdG9wLml0ZW1zW3RvcC5pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdCB8fCBpdC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcC5pdGVtcy5wdXNoKHsgc3RhcnQ6IFtdLCBrZXk6IHRva2VuLCBzZXA6IFtdIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC52YWx1ZSA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGl0LCB7IGtleTogdG9rZW4sIHNlcDogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodG9wLnR5cGUgPT09ICdkb2N1bWVudCcgfHxcbiAgICAgICAgICAgICAgICB0b3AudHlwZSA9PT0gJ2Jsb2NrLW1hcCcgfHxcbiAgICAgICAgICAgICAgICB0b3AudHlwZSA9PT0gJ2Jsb2NrLXNlcScpICYmXG4gICAgICAgICAgICAgICAgKHRva2VuLnR5cGUgPT09ICdibG9jay1tYXAnIHx8IHRva2VuLnR5cGUgPT09ICdibG9jay1zZXEnKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3QgPSB0b2tlbi5pdGVtc1t0b2tlbi5pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAobGFzdCAmJlxuICAgICAgICAgICAgICAgICAgICAhbGFzdC5zZXAgJiZcbiAgICAgICAgICAgICAgICAgICAgIWxhc3QudmFsdWUgJiZcbiAgICAgICAgICAgICAgICAgICAgbGFzdC5zdGFydC5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZpbmROb25FbXB0eUluZGV4KGxhc3Quc3RhcnQpID09PSAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAodG9rZW4uaW5kZW50ID09PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0LnN0YXJ0LmV2ZXJ5KHN0ID0+IHN0LnR5cGUgIT09ICdjb21tZW50JyB8fCBzdC5pbmRlbnQgPCB0b2tlbi5pbmRlbnQpKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9wLnR5cGUgPT09ICdkb2N1bWVudCcpXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AuZW5kID0gbGFzdC5zdGFydDtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wLml0ZW1zLnB1c2goeyBzdGFydDogbGFzdC5zdGFydCB9KTtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4uaXRlbXMuc3BsaWNlKC0xLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgKnN0cmVhbSgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2RpcmVjdGl2ZS1saW5lJzpcbiAgICAgICAgICAgICAgICB5aWVsZCB7IHR5cGU6ICdkaXJlY3RpdmUnLCBvZmZzZXQ6IHRoaXMub2Zmc2V0LCBzb3VyY2U6IHRoaXMuc291cmNlIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnYnl0ZS1vcmRlci1tYXJrJzpcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgeWllbGQgdGhpcy5zb3VyY2VUb2tlbjtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlICdkb2MtbW9kZSc6XG4gICAgICAgICAgICBjYXNlICdkb2Mtc3RhcnQnOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZG9jID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZG9jdW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogW11cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdkb2Mtc3RhcnQnKVxuICAgICAgICAgICAgICAgICAgICBkb2Muc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goZG9jKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgeWllbGQge1xuICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICBtZXNzYWdlOiBgVW5leHBlY3RlZCAke3RoaXMudHlwZX0gdG9rZW4gaW4gWUFNTCBzdHJlYW1gLFxuICAgICAgICAgICAgc291cmNlOiB0aGlzLnNvdXJjZVxuICAgICAgICB9O1xuICAgIH1cbiAgICAqZG9jdW1lbnQoZG9jKSB7XG4gICAgICAgIGlmIChkb2MudmFsdWUpXG4gICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMubGluZUVuZChkb2MpO1xuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnZG9jLXN0YXJ0Jzoge1xuICAgICAgICAgICAgICAgIGlmIChmaW5kTm9uRW1wdHlJbmRleChkb2Muc3RhcnQpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGRvYy5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2FuY2hvcic6XG4gICAgICAgICAgICBjYXNlICd0YWcnOlxuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICBkb2Muc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYnYgPSB0aGlzLnN0YXJ0QmxvY2tWYWx1ZShkb2MpO1xuICAgICAgICBpZiAoYnYpXG4gICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goYnYpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHlpZWxkIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogYFVuZXhwZWN0ZWQgJHt0aGlzLnR5cGV9IHRva2VuIGluIFlBTUwgZG9jdW1lbnRgLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcy5zb3VyY2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgKnNjYWxhcihzY2FsYXIpIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ21hcC12YWx1ZS1pbmQnKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2ID0gZ2V0UHJldlByb3BzKHRoaXMucGVlaygyKSk7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IGdldEZpcnN0S2V5U3RhcnRQcm9wcyhwcmV2KTtcbiAgICAgICAgICAgIGxldCBzZXA7XG4gICAgICAgICAgICBpZiAoc2NhbGFyLmVuZCkge1xuICAgICAgICAgICAgICAgIHNlcCA9IHNjYWxhci5lbmQ7XG4gICAgICAgICAgICAgICAgc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNjYWxhci5lbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgc2VwID0gW3RoaXMuc291cmNlVG9rZW5dO1xuICAgICAgICAgICAgY29uc3QgbWFwID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgIG9mZnNldDogc2NhbGFyLm9mZnNldCxcbiAgICAgICAgICAgICAgICBpbmRlbnQ6IHNjYWxhci5pbmRlbnQsXG4gICAgICAgICAgICAgICAgaXRlbXM6IFt7IHN0YXJ0LCBrZXk6IHNjYWxhciwgc2VwIH1dXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdID0gbWFwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLmxpbmVFbmQoc2NhbGFyKTtcbiAgICB9XG4gICAgKmJsb2NrU2NhbGFyKHNjYWxhcikge1xuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICBzY2FsYXIucHJvcHMucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICAgICAgICAgIHNjYWxhci5zb3VyY2UgPSB0aGlzLnNvdXJjZTtcbiAgICAgICAgICAgICAgICAvLyBibG9jay1zY2FsYXIgc291cmNlIGluY2x1ZGVzIHRyYWlsaW5nIG5ld2xpbmVcbiAgICAgICAgICAgICAgICB0aGlzLmF0TmV3TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnQgPSAwO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uTmV3TGluZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmwgPSB0aGlzLnNvdXJjZS5pbmRleE9mKCdcXG4nKSArIDE7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChubCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbk5ld0xpbmUodGhpcy5vZmZzZXQgKyBubCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBubCA9IHRoaXMuc291cmNlLmluZGV4T2YoJ1xcbicsIG5sKSArIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5zdGVwKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKmJsb2NrTWFwKG1hcCkge1xuICAgICAgICBjb25zdCBpdCA9IG1hcC5pdGVtc1ttYXAuaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgIC8vIGl0LnNlcCBpcyB0cnVlLWlzaCBpZiBwYWlyIGFscmVhZHkgaGFzIGtleSBvciA6IHNlcGFyYXRvclxuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoaXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kID0gJ2VuZCcgaW4gaXQudmFsdWUgPyBpdC52YWx1ZS5lbmQgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3QgPSBBcnJheS5pc0FycmF5KGVuZCkgPyBlbmRbZW5kLmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdD8udHlwZSA9PT0gJ2NvbW1lbnQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kPy5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0OiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnNlcCkge1xuICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0OiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnNlcCkge1xuICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0SW5kZW50ZWRDb21tZW50KGl0LnN0YXJ0LCBtYXAuaW5kZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IG1hcC5pdGVtc1ttYXAuaXRlbXMubGVuZ3RoIC0gMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSBwcmV2Py52YWx1ZT8uZW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZW5kKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGVuZCwgaXQuc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaXQuc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmluZGVudCA+PSBtYXAuaW5kZW50KSB7XG4gICAgICAgICAgICBjb25zdCBhdE1hcEluZGVudCA9ICF0aGlzLm9uS2V5TGluZSAmJiB0aGlzLmluZGVudCA9PT0gbWFwLmluZGVudDtcbiAgICAgICAgICAgIGNvbnN0IGF0TmV4dEl0ZW0gPSBhdE1hcEluZGVudCAmJlxuICAgICAgICAgICAgICAgIChpdC5zZXAgfHwgaXQuZXhwbGljaXRLZXkpICYmXG4gICAgICAgICAgICAgICAgdGhpcy50eXBlICE9PSAnc2VxLWl0ZW0taW5kJztcbiAgICAgICAgICAgIC8vIEZvciBlbXB0eSBub2RlcywgYXNzaWduIG5ld2xpbmUtc2VwYXJhdGVkIG5vdCBpbmRlbnRlZCBlbXB0eSB0b2tlbnMgdG8gZm9sbG93aW5nIG5vZGVcbiAgICAgICAgICAgIGxldCBzdGFydCA9IFtdO1xuICAgICAgICAgICAgaWYgKGF0TmV4dEl0ZW0gJiYgaXQuc2VwICYmICFpdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5sID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdC5zZXAubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3QgPSBpdC5zZXBbaV07XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc3QudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmwucHVzaChpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdC5pbmRlbnQgPiBtYXAuaW5kZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubC5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBubC5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChubC5sZW5ndGggPj0gMilcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBpdC5zZXAuc3BsaWNlKG5sWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnYW5jaG9yJzpcbiAgICAgICAgICAgICAgICBjYXNlICd0YWcnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoYXROZXh0SXRlbSB8fCBpdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHsgc3RhcnQgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQuc2VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2V4cGxpY2l0LWtleS1pbmQnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWl0LnNlcCAmJiAhaXQuZXhwbGljaXRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5leHBsaWNpdEtleSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYXROZXh0SXRlbSB8fCBpdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHsgc3RhcnQsIGV4cGxpY2l0S2V5OiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFt7IHN0YXJ0OiBbdGhpcy5zb3VyY2VUb2tlbl0sIGV4cGxpY2l0S2V5OiB0cnVlIH1dXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBjYXNlICdtYXAtdmFsdWUtaW5kJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0LmV4cGxpY2l0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWl0LnNlcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlc1Rva2VuKGl0LnN0YXJ0LCAnbmV3bGluZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXQsIHsga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gZ2V0Rmlyc3RLZXlTdGFydFByb3BzKGl0LnN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQsIGtleTogbnVsbCwgc2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0OiBbXSwga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGluY2x1ZGVzVG9rZW4oaXQuc2VwLCAnbWFwLXZhbHVlLWluZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLW1hcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydCwga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNGbG93VG9rZW4oaXQua2V5KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFpbmNsdWRlc1Rva2VuKGl0LnNlcCwgJ25ld2xpbmUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gZ2V0Rmlyc3RLZXlTdGFydFByb3BzKGl0LnN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBpdC5rZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VwID0gaXQuc2VwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdHlwZSBndWFyZCBpcyB3cm9uZyBoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGl0LmtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHR5cGUgZ3VhcmQgaXMgd3JvbmcgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBpdC5zZXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLW1hcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydCwga2V5LCBzZXAgfV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXJ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgYWN0dWFsbHkgYXQgbmV4dCBpdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQuc2VwID0gaXQuc2VwLmNvbmNhdChzdGFydCwgdGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXQuc2VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihpdCwgeyBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQudmFsdWUgfHwgYXROZXh0SXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHsgc3RhcnQsIGtleTogbnVsbCwgc2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpbmNsdWRlc1Rva2VuKGl0LnNlcCwgJ21hcC12YWx1ZS1pbmQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQ6IFtdLCBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBjYXNlICdhbGlhcyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZzID0gdGhpcy5mbG93U2NhbGFyKHRoaXMudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdE5leHRJdGVtIHx8IGl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0LCBrZXk6IGZzLCBzZXA6IFtdIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnNlcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGZzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXQsIHsga2V5OiBmcywgc2VwOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnYgPSB0aGlzLnN0YXJ0QmxvY2tWYWx1ZShtYXApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidi50eXBlID09PSAnYmxvY2stc2VxJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXQuZXhwbGljaXRLZXkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQuc2VwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFpbmNsdWRlc1Rva2VuKGl0LnNlcCwgJ25ld2xpbmUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3Aoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVW5leHBlY3RlZCBibG9jay1zZXEtaW5kIG9uIHNhbWUgbGluZSB3aXRoIGtleScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYXRNYXBJbmRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGJ2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgIH1cbiAgICAqYmxvY2tTZXF1ZW5jZShzZXEpIHtcbiAgICAgICAgY29uc3QgaXQgPSBzZXEuaXRlbXNbc2VxLml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9ICdlbmQnIGluIGl0LnZhbHVlID8gaXQudmFsdWUuZW5kIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0ID0gQXJyYXkuaXNBcnJheShlbmQpID8gZW5kW2VuZC5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3Q/LnR5cGUgPT09ICdjb21tZW50JylcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZD8ucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VxLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICBzZXEuaXRlbXMucHVzaCh7IHN0YXJ0OiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0SW5kZW50ZWRDb21tZW50KGl0LnN0YXJ0LCBzZXEuaW5kZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IHNlcS5pdGVtc1tzZXEuaXRlbXMubGVuZ3RoIC0gMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSBwcmV2Py52YWx1ZT8uZW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZW5kKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGVuZCwgaXQuc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcS5pdGVtcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaXQuc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnYW5jaG9yJzpcbiAgICAgICAgICAgIGNhc2UgJ3RhZyc6XG4gICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlIHx8IHRoaXMuaW5kZW50IDw9IHNlcS5pbmRlbnQpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnc2VxLWl0ZW0taW5kJzpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbmRlbnQgIT09IHNlcS5pbmRlbnQpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSB8fCBpbmNsdWRlc1Rva2VuKGl0LnN0YXJ0LCAnc2VxLWl0ZW0taW5kJykpXG4gICAgICAgICAgICAgICAgICAgIHNlcS5pdGVtcy5wdXNoKHsgc3RhcnQ6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmluZGVudCA+IHNlcS5pbmRlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ2ID0gdGhpcy5zdGFydEJsb2NrVmFsdWUoc2VxKTtcbiAgICAgICAgICAgIGlmIChidikge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChidik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICB5aWVsZCogdGhpcy5zdGVwKCk7XG4gICAgfVxuICAgICpmbG93Q29sbGVjdGlvbihmYykge1xuICAgICAgICBjb25zdCBpdCA9IGZjLml0ZW1zW2ZjLml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAodGhpcy50eXBlID09PSAnZmxvdy1lcnJvci1lbmQnKSB7XG4gICAgICAgICAgICBsZXQgdG9wO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHRvcCA9IHRoaXMucGVlaygxKTtcbiAgICAgICAgICAgIH0gd2hpbGUgKHRvcCAmJiB0b3AudHlwZSA9PT0gJ2Zsb3ctY29sbGVjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZjLmVuZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnY29tbWEnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2V4cGxpY2l0LWtleS1pbmQnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWl0IHx8IGl0LnNlcClcbiAgICAgICAgICAgICAgICAgICAgICAgIGZjLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSAnbWFwLXZhbHVlLWluZCc6XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXQgfHwgaXQudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBmYy5pdGVtcy5wdXNoKHsgc3RhcnQ6IFtdLCBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihpdCwgeyBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2FuY2hvcic6XG4gICAgICAgICAgICAgICAgY2FzZSAndGFnJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdCB8fCBpdC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGZjLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgaXQuc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2FsaWFzJzpcbiAgICAgICAgICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnMgPSB0aGlzLmZsb3dTY2FsYXIodGhpcy50eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdCB8fCBpdC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGZjLml0ZW1zLnB1c2goeyBzdGFydDogW10sIGtleTogZnMsIHNlcDogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnNlcClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChmcyk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXQsIHsga2V5OiBmcywgc2VwOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdmbG93LW1hcC1lbmQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2Zsb3ctc2VxLWVuZCc6XG4gICAgICAgICAgICAgICAgICAgIGZjLmVuZC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBidiA9IHRoaXMuc3RhcnRCbG9ja1ZhbHVlKGZjKTtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlIHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICAgICAgICBpZiAoYnYpXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGJ2KTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnN0ZXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMucGVlaygyKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnQudHlwZSA9PT0gJ2Jsb2NrLW1hcCcgJiZcbiAgICAgICAgICAgICAgICAoKHRoaXMudHlwZSA9PT0gJ21hcC12YWx1ZS1pbmQnICYmIHBhcmVudC5pbmRlbnQgPT09IGZjLmluZGVudCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMudHlwZSA9PT0gJ25ld2xpbmUnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhcGFyZW50Lml0ZW1zW3BhcmVudC5pdGVtcy5sZW5ndGggLSAxXS5zZXApKSkge1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnN0ZXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gJ21hcC12YWx1ZS1pbmQnICYmXG4gICAgICAgICAgICAgICAgcGFyZW50LnR5cGUgIT09ICdmbG93LWNvbGxlY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IGdldFByZXZQcm9wcyhwYXJlbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gZ2V0Rmlyc3RLZXlTdGFydFByb3BzKHByZXYpO1xuICAgICAgICAgICAgICAgIGZpeEZsb3dTZXFJdGVtcyhmYyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VwID0gZmMuZW5kLnNwbGljZSgxLCBmYy5lbmQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBzZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IGZjLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50OiBmYy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydCwga2V5OiBmYywgc2VwIH1dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdID0gbWFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMubGluZUVuZChmYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZmxvd1NjYWxhcih0eXBlKSB7XG4gICAgICAgIGlmICh0aGlzLm9uTmV3TGluZSkge1xuICAgICAgICAgICAgbGV0IG5sID0gdGhpcy5zb3VyY2UuaW5kZXhPZignXFxuJykgKyAxO1xuICAgICAgICAgICAgd2hpbGUgKG5sICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbk5ld0xpbmUodGhpcy5vZmZzZXQgKyBubCk7XG4gICAgICAgICAgICAgICAgbmwgPSB0aGlzLnNvdXJjZS5pbmRleE9mKCdcXG4nLCBubCkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlXG4gICAgICAgIH07XG4gICAgfVxuICAgIHN0YXJ0QmxvY2tWYWx1ZShwYXJlbnQpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FsaWFzJzpcbiAgICAgICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmxvd1NjYWxhcih0aGlzLnR5cGUpO1xuICAgICAgICAgICAgY2FzZSAnYmxvY2stc2NhbGFyLWhlYWRlcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLXNjYWxhcicsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgIHByb3BzOiBbdGhpcy5zb3VyY2VUb2tlbl0sXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJydcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSAnZmxvdy1tYXAtc3RhcnQnOlxuICAgICAgICAgICAgY2FzZSAnZmxvdy1zZXEtc3RhcnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdmbG93LWNvbGxlY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogdGhpcy5zb3VyY2VUb2tlbixcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ3NlcS1pdGVtLWluZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLXNlcScsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH1dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ2V4cGxpY2l0LWtleS1pbmQnOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBnZXRQcmV2UHJvcHMocGFyZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGdldEZpcnN0S2V5U3RhcnRQcm9wcyhwcmV2KTtcbiAgICAgICAgICAgICAgICBzdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQsIGV4cGxpY2l0S2V5OiB0cnVlIH1dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ21hcC12YWx1ZS1pbmQnOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBnZXRQcmV2UHJvcHMocGFyZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGdldEZpcnN0S2V5U3RhcnRQcm9wcyhwcmV2KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFt7IHN0YXJ0LCBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH1dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYXRJbmRlbnRlZENvbW1lbnQoc3RhcnQsIGluZGVudCkge1xuICAgICAgICBpZiAodGhpcy50eXBlICE9PSAnY29tbWVudCcpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmluZGVudCA8PSBpbmRlbnQpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiBzdGFydC5ldmVyeShzdCA9PiBzdC50eXBlID09PSAnbmV3bGluZScgfHwgc3QudHlwZSA9PT0gJ3NwYWNlJyk7XG4gICAgfVxuICAgICpkb2N1bWVudEVuZChkb2NFbmQpIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSAhPT0gJ2RvYy1tb2RlJykge1xuICAgICAgICAgICAgaWYgKGRvY0VuZC5lbmQpXG4gICAgICAgICAgICAgICAgZG9jRW5kLmVuZC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGRvY0VuZC5lbmQgPSBbdGhpcy5zb3VyY2VUb2tlbl07XG4gICAgICAgICAgICBpZiAodGhpcy50eXBlID09PSAnbmV3bGluZScpXG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKmxpbmVFbmQodG9rZW4pIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1hJzpcbiAgICAgICAgICAgIGNhc2UgJ2RvYy1zdGFydCc6XG4gICAgICAgICAgICBjYXNlICdkb2MtZW5kJzpcbiAgICAgICAgICAgIGNhc2UgJ2Zsb3ctc2VxLWVuZCc6XG4gICAgICAgICAgICBjYXNlICdmbG93LW1hcC1lbmQnOlxuICAgICAgICAgICAgY2FzZSAnbWFwLXZhbHVlLWluZCc6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gYWxsIG90aGVyIHZhbHVlcyBhcmUgZXJyb3JzXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuLmVuZClcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4uZW5kLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0b2tlbi5lbmQgPSBbdGhpcy5zb3VyY2VUb2tlbl07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ25ld2xpbmUnKVxuICAgICAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgUGFyc2VyIH07XG4iLCJpbXBvcnQgeyBDb21wb3NlciB9IGZyb20gJy4vY29tcG9zZS9jb21wb3Nlci5qcyc7XG5pbXBvcnQgeyBEb2N1bWVudCB9IGZyb20gJy4vZG9jL0RvY3VtZW50LmpzJztcbmltcG9ydCB7IHByZXR0aWZ5RXJyb3IsIFlBTUxQYXJzZUVycm9yIH0gZnJvbSAnLi9lcnJvcnMuanMnO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gJy4vbG9nLmpzJztcbmltcG9ydCB7IGlzRG9jdW1lbnQgfSBmcm9tICcuL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IExpbmVDb3VudGVyIH0gZnJvbSAnLi9wYXJzZS9saW5lLWNvdW50ZXIuanMnO1xuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSAnLi9wYXJzZS9wYXJzZXIuanMnO1xuXG5mdW5jdGlvbiBwYXJzZU9wdGlvbnMob3B0aW9ucykge1xuICAgIGNvbnN0IHByZXR0eUVycm9ycyA9IG9wdGlvbnMucHJldHR5RXJyb3JzICE9PSBmYWxzZTtcbiAgICBjb25zdCBsaW5lQ291bnRlciA9IG9wdGlvbnMubGluZUNvdW50ZXIgfHwgKHByZXR0eUVycm9ycyAmJiBuZXcgTGluZUNvdW50ZXIoKSkgfHwgbnVsbDtcbiAgICByZXR1cm4geyBsaW5lQ291bnRlciwgcHJldHR5RXJyb3JzIH07XG59XG4vKipcbiAqIFBhcnNlIHRoZSBpbnB1dCBhcyBhIHN0cmVhbSBvZiBZQU1MIGRvY3VtZW50cy5cbiAqXG4gKiBEb2N1bWVudHMgc2hvdWxkIGJlIHNlcGFyYXRlZCBmcm9tIGVhY2ggb3RoZXIgYnkgYC4uLmAgb3IgYC0tLWAgbWFya2VyIGxpbmVzLlxuICpcbiAqIEByZXR1cm5zIElmIGFuIGVtcHR5IGBkb2NzYCBhcnJheSBpcyByZXR1cm5lZCwgaXQgd2lsbCBiZSBvZiB0eXBlXG4gKiAgIEVtcHR5U3RyZWFtIGFuZCBjb250YWluIGFkZGl0aW9uYWwgc3RyZWFtIGluZm9ybWF0aW9uLiBJblxuICogICBUeXBlU2NyaXB0LCB5b3Ugc2hvdWxkIHVzZSBgJ2VtcHR5JyBpbiBkb2NzYCBhcyBhIHR5cGUgZ3VhcmQgZm9yIGl0LlxuICovXG5mdW5jdGlvbiBwYXJzZUFsbERvY3VtZW50cyhzb3VyY2UsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgbGluZUNvdW50ZXIsIHByZXR0eUVycm9ycyB9ID0gcGFyc2VPcHRpb25zKG9wdGlvbnMpO1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzZXIobGluZUNvdW50ZXI/LmFkZE5ld0xpbmUpO1xuICAgIGNvbnN0IGNvbXBvc2VyID0gbmV3IENvbXBvc2VyKG9wdGlvbnMpO1xuICAgIGNvbnN0IGRvY3MgPSBBcnJheS5mcm9tKGNvbXBvc2VyLmNvbXBvc2UocGFyc2VyLnBhcnNlKHNvdXJjZSkpKTtcbiAgICBpZiAocHJldHR5RXJyb3JzICYmIGxpbmVDb3VudGVyKVxuICAgICAgICBmb3IgKGNvbnN0IGRvYyBvZiBkb2NzKSB7XG4gICAgICAgICAgICBkb2MuZXJyb3JzLmZvckVhY2gocHJldHRpZnlFcnJvcihzb3VyY2UsIGxpbmVDb3VudGVyKSk7XG4gICAgICAgICAgICBkb2Mud2FybmluZ3MuZm9yRWFjaChwcmV0dGlmeUVycm9yKHNvdXJjZSwgbGluZUNvdW50ZXIpKTtcbiAgICAgICAgfVxuICAgIGlmIChkb2NzLmxlbmd0aCA+IDApXG4gICAgICAgIHJldHVybiBkb2NzO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKFtdLCB7IGVtcHR5OiB0cnVlIH0sIGNvbXBvc2VyLnN0cmVhbUluZm8oKSk7XG59XG4vKiogUGFyc2UgYW4gaW5wdXQgc3RyaW5nIGludG8gYSBzaW5nbGUgWUFNTC5Eb2N1bWVudCAqL1xuZnVuY3Rpb24gcGFyc2VEb2N1bWVudChzb3VyY2UsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgbGluZUNvdW50ZXIsIHByZXR0eUVycm9ycyB9ID0gcGFyc2VPcHRpb25zKG9wdGlvbnMpO1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzZXIobGluZUNvdW50ZXI/LmFkZE5ld0xpbmUpO1xuICAgIGNvbnN0IGNvbXBvc2VyID0gbmV3IENvbXBvc2VyKG9wdGlvbnMpO1xuICAgIC8vIGBkb2NgIGlzIGFsd2F5cyBzZXQgYnkgY29tcG9zZS5lbmQodHJ1ZSkgYXQgdGhlIHZlcnkgbGF0ZXN0XG4gICAgbGV0IGRvYyA9IG51bGw7XG4gICAgZm9yIChjb25zdCBfZG9jIG9mIGNvbXBvc2VyLmNvbXBvc2UocGFyc2VyLnBhcnNlKHNvdXJjZSksIHRydWUsIHNvdXJjZS5sZW5ndGgpKSB7XG4gICAgICAgIGlmICghZG9jKVxuICAgICAgICAgICAgZG9jID0gX2RvYztcbiAgICAgICAgZWxzZSBpZiAoZG9jLm9wdGlvbnMubG9nTGV2ZWwgIT09ICdzaWxlbnQnKSB7XG4gICAgICAgICAgICBkb2MuZXJyb3JzLnB1c2gobmV3IFlBTUxQYXJzZUVycm9yKF9kb2MucmFuZ2Uuc2xpY2UoMCwgMiksICdNVUxUSVBMRV9ET0NTJywgJ1NvdXJjZSBjb250YWlucyBtdWx0aXBsZSBkb2N1bWVudHM7IHBsZWFzZSB1c2UgWUFNTC5wYXJzZUFsbERvY3VtZW50cygpJykpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByZXR0eUVycm9ycyAmJiBsaW5lQ291bnRlcikge1xuICAgICAgICBkb2MuZXJyb3JzLmZvckVhY2gocHJldHRpZnlFcnJvcihzb3VyY2UsIGxpbmVDb3VudGVyKSk7XG4gICAgICAgIGRvYy53YXJuaW5ncy5mb3JFYWNoKHByZXR0aWZ5RXJyb3Ioc291cmNlLCBsaW5lQ291bnRlcikpO1xuICAgIH1cbiAgICByZXR1cm4gZG9jO1xufVxuZnVuY3Rpb24gcGFyc2Uoc3JjLCByZXZpdmVyLCBvcHRpb25zKSB7XG4gICAgbGV0IF9yZXZpdmVyID0gdW5kZWZpbmVkO1xuICAgIGlmICh0eXBlb2YgcmV2aXZlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBfcmV2aXZlciA9IHJldml2ZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCAmJiByZXZpdmVyICYmIHR5cGVvZiByZXZpdmVyID09PSAnb2JqZWN0Jykge1xuICAgICAgICBvcHRpb25zID0gcmV2aXZlcjtcbiAgICB9XG4gICAgY29uc3QgZG9jID0gcGFyc2VEb2N1bWVudChzcmMsIG9wdGlvbnMpO1xuICAgIGlmICghZG9jKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBkb2Mud2FybmluZ3MuZm9yRWFjaCh3YXJuaW5nID0+IHdhcm4oZG9jLm9wdGlvbnMubG9nTGV2ZWwsIHdhcm5pbmcpKTtcbiAgICBpZiAoZG9jLmVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChkb2Mub3B0aW9ucy5sb2dMZXZlbCAhPT0gJ3NpbGVudCcpXG4gICAgICAgICAgICB0aHJvdyBkb2MuZXJyb3JzWzBdO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBkb2MuZXJyb3JzID0gW107XG4gICAgfVxuICAgIHJldHVybiBkb2MudG9KUyhPYmplY3QuYXNzaWduKHsgcmV2aXZlcjogX3Jldml2ZXIgfSwgb3B0aW9ucykpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlLCByZXBsYWNlciwgb3B0aW9ucykge1xuICAgIGxldCBfcmVwbGFjZXIgPSBudWxsO1xuICAgIGlmICh0eXBlb2YgcmVwbGFjZXIgPT09ICdmdW5jdGlvbicgfHwgQXJyYXkuaXNBcnJheShyZXBsYWNlcikpIHtcbiAgICAgICAgX3JlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCAmJiByZXBsYWNlcikge1xuICAgICAgICBvcHRpb25zID0gcmVwbGFjZXI7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zLmxlbmd0aDtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbnN0IGluZGVudCA9IE1hdGgucm91bmQob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMgPSBpbmRlbnQgPCAxID8gdW5kZWZpbmVkIDogaW5kZW50ID4gOCA/IHsgaW5kZW50OiA4IH0gOiB7IGluZGVudCB9O1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCB7IGtlZXBVbmRlZmluZWQgfSA9IG9wdGlvbnMgPz8gcmVwbGFjZXIgPz8ge307XG4gICAgICAgIGlmICgha2VlcFVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChpc0RvY3VtZW50KHZhbHVlKSAmJiAhX3JlcGxhY2VyKVxuICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgcmV0dXJuIG5ldyBEb2N1bWVudCh2YWx1ZSwgX3JlcGxhY2VyLCBvcHRpb25zKS50b1N0cmluZyhvcHRpb25zKTtcbn1cblxuZXhwb3J0IHsgcGFyc2UsIHBhcnNlQWxsRG9jdW1lbnRzLCBwYXJzZURvY3VtZW50LCBzdHJpbmdpZnkgfTtcbiIsIi8qKlxuICogUGFyc2VzIGEgY29tbWFuZCBsaW5lIHN0cmluZyBpbnRvIGFuIGFycmF5IG9mIGFyZ3VtZW50cywgcHJlc2VydmluZyBxdW90ZWQgc3RyaW5ncy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGhhbmRsZXM6XG4gKiAtIFNwYWNlLXNlcGFyYXRlZCBhcmd1bWVudHNcbiAqIC0gRG91YmxlLXF1b3RlZCBzdHJpbmdzIChwcmVzZXJ2ZXMgc3BhY2VzIHdpdGhpbilcbiAqIC0gU2luZ2xlLXF1b3RlZCBzdHJpbmdzIChwcmVzZXJ2ZXMgc3BhY2VzIHdpdGhpbilcbiAqXG4gKiBAcGFyYW0gYXJnc1N0cmluZyBUaGUgY29tbWFuZCBsaW5lIHN0cmluZyB0byBwYXJzZVxuICogQHJldHVybnMgQW4gYXJyYXkgb2YgcGFyc2VkIGFyZ3VtZW50c1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDb21tYW5kTGluZUFyZ3MoYXJnc1N0cmluZzogc3RyaW5nKTogc3RyaW5nW10ge1xuICBpZiAoIWFyZ3NTdHJpbmcpIHJldHVybiBbXTtcblxuICBjb25zdCByZXN1bHQ6IHN0cmluZ1tdID0gW107XG4gIGxldCBjdXJyZW50ID0gJyc7XG4gIGxldCBpbkRvdWJsZVF1b3RlID0gZmFsc2U7XG4gIGxldCBpblNpbmdsZVF1b3RlID0gZmFsc2U7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzU3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2hhciA9IGFyZ3NTdHJpbmdbaV07XG5cbiAgICAvLyBIYW5kbGUgcXVvdGVzXG4gICAgaWYgKGNoYXIgPT09ICdcIicgJiYgIWluU2luZ2xlUXVvdGUpIHtcbiAgICAgIGluRG91YmxlUXVvdGUgPSAhaW5Eb3VibGVRdW90ZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChjaGFyID09PSBcIidcIiAmJiAhaW5Eb3VibGVRdW90ZSkge1xuICAgICAgaW5TaW5nbGVRdW90ZSA9ICFpblNpbmdsZVF1b3RlO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHNwYWNlcyAob25seSBzcGxpdCBvbiBzcGFjZXMgb3V0c2lkZSBvZiBxdW90ZXMpXG4gICAgaWYgKGNoYXIgPT09ICcgJyAmJiAhaW5Eb3VibGVRdW90ZSAmJiAhaW5TaW5nbGVRdW90ZSkge1xuICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goY3VycmVudCk7XG4gICAgICAgIGN1cnJlbnQgPSAnJztcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIEFkZCBjaGFyYWN0ZXIgdG8gY3VycmVudCBhcmd1bWVudFxuICAgIGN1cnJlbnQgKz0gY2hhcjtcbiAgfVxuXG4gIC8vIEFkZCB0aGUgbGFzdCBhcmd1bWVudCBpZiB0aGVyZSBpcyBvbmVcbiAgaWYgKGN1cnJlbnQpIHtcbiAgICByZXN1bHQucHVzaChjdXJyZW50KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBIVE1MLXN0eWxlIGNvbW1lbnRzIGZyb20gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIG1hcmtkb3duQ29udGVudCBUaGUgc3RyaW5nIGNvbnRhaW5pbmcgbWFya2Rvd24gY29udGVudFxuICogQHJldHVybnMgVGhlIHN0cmluZyB3aXRoIEhUTUwgY29tbWVudHMgcmVtb3ZlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBIdG1sQ29tbWVudHMobWFya2Rvd25Db250ZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gbWFya2Rvd25Db250ZW50LnJlcGxhY2UoLzwhLS1bXFxzXFxTXSo/LS0+L2csICcnKTtcbn1cbiIsImltcG9ydCB7IERFRkFVTFRfQUlERVJfRVhUUkFfQVJHUyB9IGZyb20gJy4vZGVmYXVsdE9wdGlvbnMnO1xuaW1wb3J0IHR5cGUgeyBNYWluT3B0aW9ucyB9IGZyb20gJy4vbWFpbic7XG5pbXBvcnQgdHlwZSB7IFJlc29sdXRpb25QbGFuIH0gZnJvbSAnLi9wbGFuJztcbmltcG9ydCB7IHBhcnNlQ29tbWFuZExpbmVBcmdzIH0gZnJvbSAnLi91dGlscyc7XG5cbi8qKlxuICogQnVpbGRzIHRoZSBjb21tYW5kIGxpbmUgYXJndW1lbnRzIGZvciB0aGUgYWlkZXIgY29tbWFuZFxuICpcbiAqIEBwYXJhbSBvcHRpb25zIFRoZSBtYWluIG9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0gYXJncyBBcmd1bWVudHMgdG8gaW5jbHVkZVxuICogQHJldHVybnMgQW4gYXJyYXkgb2YgY29tbWFuZCBsaW5lIGFyZ3VtZW50cyBmb3IgYWlkZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkQWlkZXJBcmdzKFxuICBvcHRpb25zOiBNYWluT3B0aW9ucyxcbiAgYXJnczogeyBwcm9tcHQ6IHN0cmluZzsgcmVzb2x1dGlvblBsYW4/OiBSZXNvbHV0aW9uUGxhbiB9XG4pOiBzdHJpbmdbXSB7XG4gIGNvbnN0IGFpZGVyQXJncyA9IFtcbiAgICAnLS15ZXMtYWx3YXlzJyxcbiAgICAnLS1uby1jaGVjay11cGRhdGUnLFxuICAgICctLW5vLWdpdGlnbm9yZScsXG4gICAgJy0tbm8tc2hvdy1tb2RlbC13YXJuaW5ncycsXG4gICAgJy0tbm8tc2hvdy1yZWxlYXNlLW5vdGVzJyxcbiAgICAuLi5wYXJzZUNvbW1hbmRMaW5lQXJncyhvcHRpb25zLmFpZGVyRXh0cmFBcmdzIHx8IERFRkFVTFRfQUlERVJfRVhUUkFfQVJHUyksXG4gIF07XG5cbiAgaWYgKG9wdGlvbnMuZHJ5UnVuKSB7XG4gICAgYWlkZXJBcmdzLnB1c2goJy0tZHJ5LXJ1bicpO1xuICB9XG5cbiAgYWlkZXJBcmdzLnB1c2goJy0tbWVzc2FnZScsIGFyZ3MucHJvbXB0KTtcbiAgaWYgKGFyZ3MucmVzb2x1dGlvblBsYW4gJiYgJ2ZpbGVQYXRocycgaW4gYXJncy5yZXNvbHV0aW9uUGxhbikge1xuICAgIGFpZGVyQXJncy5wdXNoKC4uLmFyZ3MucmVzb2x1dGlvblBsYW4uZmlsZVBhdGhzKTtcbiAgfVxuXG4gIHJldHVybiBhaWRlckFyZ3M7XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJlYXNvbmluZ0VmZm9ydCB9IGZyb20gJy4vdHlwZXMnO1xuXG50eXBlIE1lc3NhZ2UgPSB7IGNvbnRlbnQ6IHN0cmluZzsgcm9sZTogJ3N5c3RlbScgfCAndXNlcicgfCAnYXNzaXN0YW50JyB9O1xuXG5jb25zdCBPUEVOQUlfTU9ERUxfUFJFRklYRVMgPSBbJ2dwdC0nLCAnbzEnLCAnbzMnLCAnbzQnXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFwaVVybEFuZEtleShtb2RlbDogc3RyaW5nKTogeyB1cmw6IHN0cmluZzsgYXBpS2V5OiBzdHJpbmcgfSB7XG4gIGxldCB1cmw6IHN0cmluZztcbiAgbGV0IGFwaUtleTogc3RyaW5nO1xuICBpZiAobW9kZWwuc3RhcnRzV2l0aCgnZ2VtaW5pLScpKSB7XG4gICAgdXJsID0gJ2h0dHBzOi8vZ2VuZXJhdGl2ZWxhbmd1YWdlLmdvb2dsZWFwaXMuY29tL3YxYmV0YS9vcGVuYWkvY2hhdC9jb21wbGV0aW9ucyc7XG4gICAgYXBpS2V5ID0gcHJvY2Vzcy5lbnYuR0VNSU5JX0FQSV9LRVkgfHwgJyc7XG4gIH0gZWxzZSBpZiAoT1BFTkFJX01PREVMX1BSRUZJWEVTLnNvbWUoKHApID0+IG1vZGVsLnN0YXJ0c1dpdGgocCkpKSB7XG4gICAgdXJsID0gJ2h0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEvY2hhdC9jb21wbGV0aW9ucyc7XG4gICAgYXBpS2V5ID0gcHJvY2Vzcy5lbnYuT1BFTkFJX0FQSV9LRVkgfHwgJyc7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5lcnJvcihgVW5rbm93biBtb2RlbDogJHttb2RlbH1gKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cbiAgcmV0dXJuIHsgdXJsLCBhcGlLZXkgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNhbGxMbG1BcGkoXG4gIHVybDogc3RyaW5nLFxuICBhcGlLZXk6IHN0cmluZyxcbiAgbW9kZWw6IHN0cmluZyxcbiAgbWVzc2FnZXM6IE1lc3NhZ2VbXSxcbiAgcmVhc29uaW5nRWZmb3J0PzogUmVhc29uaW5nRWZmb3J0XG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICBpZiAoIWFwaUtleSkge1xuICAgIGNvbnNvbGUuZXJyb3IoYEFQSSBrZXkgZm9yICR7bW9kZWx9IGlzIG5vdCBzZXQuYCk7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xuICB9XG5cbiAgY29uc3QgcmVxdWVzdEJvZHk6IFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0ge1xuICAgIG1vZGVsLFxuICAgIG1lc3NhZ2VzLFxuICB9O1xuICBpZiAocmVhc29uaW5nRWZmb3J0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXF1ZXN0Qm9keS5yZWFzb25pbmdfZWZmb3J0ID0gcmVhc29uaW5nRWZmb3J0O1xuICB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke2FwaUtleX1gLFxuICAgIH0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkpLFxuICB9KTtcblxuICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgIGNvbnNvbGUuZXJyb3IoYExMTSBBUEkgZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH0gKCR7cmVzcG9uc2Uuc3RhdHVzfSk6ICR7ZXJyb3JUZXh0fWApO1xuICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgY29uc29sZS5sb2coYCR7bW9kZWx9OmAsIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgbnVsbCwgMikpO1xuICByZXR1cm4gcmVzdWx0LmNob2ljZXNbMF0ubWVzc2FnZS5jb250ZW50O1xufVxuIiwiaW1wb3J0IHR5cGUgeyBTcGF3bk9wdGlvbnNXaXRob3V0U3RkaW8gfSBmcm9tICdub2RlOmNoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHR5cGUgeyBTcGF3blN5bmNSZXR1cm5zIH0gZnJvbSAnbm9kZTpjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7IHNwYXduIH0gZnJvbSAnbm9kZTpjaGlsZF9wcm9jZXNzJztcbmltcG9ydCBhbnNpcyBmcm9tICdhbnNpcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW5Db21tYW5kKFxuICBjb21tYW5kOiBzdHJpbmcsXG4gIGFyZ3M6IHN0cmluZ1tdLFxuICBvcHRpb25zPzogU3Bhd25PcHRpb25zV2l0aG91dFN0ZGlvICYgeyBpZ25vcmVFeGl0U3RhdHVzPzogYm9vbGVhbiB9XG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCB7IGlnbm9yZUV4aXRTdGF0dXMsIC4uLnNwYXduT3B0aW9ucyB9ID0gb3B0aW9ucyA/PyB7fTtcbiAgY29uc29sZS5pbmZvKGFuc2lzLmdyZWVuKGAkICR7Y29tbWFuZH0gJHthcmdzfWApKTtcbiAgY29uc29sZS5pbmZvKCdzdGRvdXQ6IC0tLS0tLS0tLS0tLS0tLS0tLS0tLScpO1xuICBjb25zdCByZXQgPSBhd2FpdCBzcGF3bkFzeW5jKGNvbW1hbmQsIGFyZ3MsIHNwYXduT3B0aW9ucyk7XG4gIGNvbnN0IHN0ZGVyciA9IHJldC5zdGRlcnIudHJpbSgpO1xuICBpZiAoc3RkZXJyKSB7XG4gICAgY29uc29sZS5pbmZvKCdzdGRlcnI6IC0tLS0tLS0tLS0tLS0tLS0tLS0tLScpO1xuICAgIGNvbnNvbGUuaW5mbyhhbnNpcy55ZWxsb3coc3RkZXJyKSk7XG4gIH1cbiAgY29uc29sZS5pbmZvKCctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpO1xuICBjb25zb2xlLmluZm8oYW5zaXMubWFnZW50YShgRXhpdCBjb2RlOiAke3JldC5zdGF0dXN9XFxuYCkpO1xuICBpZiAoIWlnbm9yZUV4aXRTdGF0dXMgJiYgcmV0LnN0YXR1cyAhPT0gMCAmJiByZXQuc3RhdHVzICE9PSBudWxsKSB7XG4gICAgcHJvY2Vzcy5leGl0KHJldC5zdGF0dXMpO1xuICB9XG4gIHJldHVybiByZXQuc3Rkb3V0O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3Bhd25Bc3luYyhcbiAgY29tbWFuZDogc3RyaW5nLFxuICBhcmdzPzogUmVhZG9ubHlBcnJheTxzdHJpbmc+LFxuICBvcHRpb25zPzogU3Bhd25PcHRpb25zV2l0aG91dFN0ZGlvXG4pOiBQcm9taXNlPE9taXQ8U3Bhd25TeW5jUmV0dXJuczxzdHJpbmc+LCAnb3V0cHV0JyB8ICdlcnJvcic+PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFNhbml0aXplIGFyZ3MgdG8gcmVtb3ZlIG51bGwgYnl0ZXNcbiAgICAgIGNvbnN0IHNhbml0aXplZEFyZ3MgPSAoYXJncyA/PyBbXSkubWFwKChhcmcpID0+IGFyZy5yZXBsYWNlKC9cXDAvZywgJycpKTtcbiAgICAgIGNvbnN0IHByb2MgPSBzcGF3bihjb21tYW5kLCBzYW5pdGl6ZWRBcmdzLCBvcHRpb25zKTtcbiAgICAgIC8vIGBzZXRFbmNvZGluZ2AgaXMgdW5kZWZpbmVkIGluIEJ1blxuICAgICAgcHJvYy5zdGRvdXQ/LnNldEVuY29kaW5nPy4oJ3V0ZjgnKTtcbiAgICAgIHByb2Muc3RkZXJyPy5zZXRFbmNvZGluZz8uKCd1dGY4Jyk7XG5cbiAgICAgIGxldCBzdGRvdXQgPSAnJztcbiAgICAgIGxldCBzdGRlcnIgPSAnJztcbiAgICAgIHByb2Muc3Rkb3V0Py5vbignZGF0YScsIChkYXRhKSA9PiB7XG4gICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGRhdGEpO1xuICAgICAgICBzdGRvdXQgKz0gZGF0YTtcbiAgICAgIH0pO1xuICAgICAgcHJvYy5zdGRlcnI/Lm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgICAgc3RkZXJyICs9IGRhdGE7XG4gICAgICB9KTtcblxuICAgICAgcHJvYy5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuICAgICAgcHJvYy5vbignY2xvc2UnLCAoY29kZTogbnVtYmVyIHwgbnVsbCwgc2lnbmFsOiBOb2RlSlMuU2lnbmFscyB8IG51bGwpID0+IHtcbiAgICAgICAgaWYgKHByb2MucGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdQcm9jZXNzIGhhcyBubyBwaWQuJykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgcGlkOiBwcm9jLnBpZCxcbiAgICAgICAgICAgIHN0ZG91dCxcbiAgICAgICAgICAgIHN0ZGVycixcbiAgICAgICAgICAgIHN0YXR1czogY29kZSxcbiAgICAgICAgICAgIHNpZ25hbCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLXByb21pc2UtcmVqZWN0LWVycm9yc1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiaW1wb3J0IGZzIGZyb20gJ25vZGU6ZnMnO1xuaW1wb3J0IFlBTUwgZnJvbSAneWFtbCc7XG5pbXBvcnQgeyBjYWxsTGxtQXBpLCBnZXRBcGlVcmxBbmRLZXkgfSBmcm9tICcuL2xsbSc7XG5pbXBvcnQgdHlwZSB7IFJlYXNvbmluZ0VmZm9ydCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgcGFyc2VDb21tYW5kTGluZUFyZ3MgfSBmcm9tICcuL3V0aWxzJztcblxuaW1wb3J0IHsgREVGQVVMVF9SRVBPTUlYX0VYVFJBX0FSR1MgfSBmcm9tICcuL2RlZmF1bHRPcHRpb25zJztcbmltcG9ydCB7IHJ1bkNvbW1hbmQgfSBmcm9tICcuL3NwYXduJztcblxuY29uc3QgUkVQT01JWF9GSUxFX05BTUUgPSAncmVwb21peC5yZXN1bHQnO1xuXG5leHBvcnQgdHlwZSBSZXNvbHV0aW9uUGxhbiA9IHtcbiAgcGxhbj86IHN0cmluZztcbiAgZmlsZVBhdGhzOiBzdHJpbmdbXTtcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwbGFuQ29kZUNoYW5nZXMoXG4gIG1vZGVsOiBzdHJpbmcsXG4gIGlzc3VlQ29udGVudDogc3RyaW5nLFxuICBkZXRhaWxlZFBsYW46IGJvb2xlYW4sXG4gIHJlYXNvbmluZ0VmZm9ydD86IFJlYXNvbmluZ0VmZm9ydCxcbiAgcmVwb21peEV4dHJhQXJncz86IHN0cmluZ1xuKTogUHJvbWlzZTxSZXNvbHV0aW9uUGxhbj4ge1xuICBjb25zdCB7IHVybCwgYXBpS2V5IH0gPSBnZXRBcGlVcmxBbmRLZXkobW9kZWwpO1xuXG4gIC8vIEJhc2UgcmVwb21peCBjb21tYW5kIGFyZ3VtZW50c1xuICBjb25zdCByZXBvbWl4QXJncyA9IFsnLS15ZXMnLCAncmVwb21peEBsYXRlc3QnLCAnLS1vdXRwdXQnLCBSRVBPTUlYX0ZJTEVfTkFNRV07XG4gIHJlcG9taXhBcmdzLnB1c2goLi4ucGFyc2VDb21tYW5kTGluZUFyZ3MocmVwb21peEV4dHJhQXJncyB8fCBERUZBVUxUX1JFUE9NSVhfRVhUUkFfQVJHUykpO1xuXG4gIGF3YWl0IHJ1bkNvbW1hbmQoJ25weCcsIHJlcG9taXhBcmdzKTtcbiAgY29uc3QgY29udGV4dCA9IGZzLnJlYWRGaWxlU3luYyhSRVBPTUlYX0ZJTEVfTkFNRSwgJ3V0ZjgnKTtcbiAgdm9pZCBmcy5wcm9taXNlcy5ybShSRVBPTUlYX0ZJTEVfTkFNRSwgeyBmb3JjZTogdHJ1ZSB9KTtcblxuICBjb25zdCBwbGFubmluZ1Rhc2sgPSBkZXRhaWxlZFBsYW5cbiAgICA/IGBcbi0gSWRlbnRpZnkgdGhlIGZpbGVzIGZyb20gdGhlIHByb3ZpZGVkIGxpc3QgdGhhdCB3aWxsIG5lZWQgdG8gYmUgbW9kaWZpZWQgdG8gaW1wbGVtZW50IHRoZSBwbGFuIGFuZCByZXNvbHZlIHRoZSBpc3N1ZS5gXG4gICAgOiAnJztcbiAgY29uc3QgcGxhbkZvcm1hdCA9IGRldGFpbGVkUGxhblxuICAgID8gYCMgUGxhbiB0byBSZXNvbHZlIHRoZSBJc3N1ZVxuXG4xLiA8RGVzY3JpcHRpb24gb2Ygc3RlcCAxPlxuMi4gPERlc2NyaXB0aW9uIG9mIHN0ZXAgMj5cbjMuIC4uLlxuXG5gXG4gICAgOiAnJztcblxuICBjb25zdCBwcm9tcHQgPSBgXG5SZXZpZXcgdGhlIGZvbGxvd2luZyBHaXRIdWIgaXNzdWUgYW5kIHRoZSBmb2xsb3dpbmcgbGlzdCBvZiBhdmFpbGFibGUgZmlsZSBwYXRocyBhbmQgdGhlaXIgY29udGVudHMuXG5CYXNlZCBvbiB0aGlzIGluZm9ybWF0aW9uLCBwbGVhc2UgcGVyZm9ybSB0aGUgZm9sbG93aW5nIHRhc2tzOlxuXG4tIENyZWF0ZSBhIHN0ZXAtYnktc3RlcCBwbGFuIG91dGxpbmluZyBob3cgdG8gYWRkcmVzcyB0aGUgR2l0SHViIGlzc3VlLiBUaGUgcGxhbiBtdXN0IGZvY3VzIG9uIHdyaXRpbmcgY29kZSBleGNsdWRpbmcgdGVzdHMuXG4ke3BsYW5uaW5nVGFza31cblxuR2l0SHViIElzc3VlOlxuXFxgXFxgXFxgXFxgeW1sXG4ke1lBTUwuc3RyaW5naWZ5KGlzc3VlQ29udGVudCkudHJpbSgpfVxuXFxgXFxgXFxgXFxgXG5cbkF2YWlsYWJsZSBmaWxlczogVGhlIHVzZXIgd2lsbCBwcm92aWRlIHRoaXMgYXMgYSBzZXBhcmF0ZSBtZXNzYWdlLlxuXG5QbGVhc2UgZm9ybWF0IHlvdXIgcmVzcG9uc2UgYXMgZm9sbG93czpcblxcYFxcYFxcYFxuJHtwbGFuRm9ybWF0fSMgRmlsZSBQYXRocyB0byBiZSBNb2RpZmllZFxuXG4tIFxcYDxmaWxlUGF0aDE+XFxgXG4tIFxcYDxmaWxlUGF0aDI+XFxgXG4tIC4uLlxuXFxgXFxgXFxgXG5cbkVuc3VyZSB0aGF0IHRoZSBmaWxlIHBhdGhzIGFyZSBleGFjdGx5IGFzIHByb3ZpZGVkIGluIHRoZSBpbnB1dC5cbmAudHJpbSgpO1xuXG4gIGNvbnNvbGUuaW5mbyhgR2VuZXJhdGluZyBwbGFuIHdpdGggJHttb2RlbH0gKHJlYXNvbmluZyBlZmZvcnQ6ICR7cmVhc29uaW5nRWZmb3J0fSkgLi4uYCk7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2FsbExsbUFwaShcbiAgICB1cmwsXG4gICAgYXBpS2V5LFxuICAgIG1vZGVsLFxuICAgIFtcbiAgICAgIHtcbiAgICAgICAgcm9sZTogJ3N5c3RlbScsXG4gICAgICAgIGNvbnRlbnQ6IHByb21wdCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgY29udGVudDogY29udGV4dCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZWFzb25pbmdFZmZvcnRcbiAgKTtcbiAgY29uc29sZS5pbmZvKCdQbGFubmluZyBjb21wbGV0ZSEnKTtcblxuICBjb25zdCBwbGFuSGVhZGVyID0gJyMgUGxhbiB0byBSZXNvbHZlIHRoZSBJc3N1ZSc7XG4gIGNvbnN0IGZpbGVzSGVhZGVyID0gJyMgRmlsZSBQYXRocyB0byBiZSBNb2RpZmllZCc7XG5cbiAgbGV0IHBsYW46IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgbGV0IGZpbGVQYXRoczogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdCBwbGFuSGVhZGVySW5kZXggPSByZXNwb25zZS5pbmRleE9mKHBsYW5IZWFkZXIpO1xuICBjb25zdCBmaWxlc0hlYWRlckluZGV4ID0gcmVzcG9uc2UuaW5kZXhPZihmaWxlc0hlYWRlcik7XG5cbiAgaWYgKHBsYW5IZWFkZXJJbmRleCAhPT0gLTEpIHtcbiAgICBjb25zdCBwbGFuQ29udGVudFN0YXJ0SW5kZXggPSBwbGFuSGVhZGVySW5kZXggKyBwbGFuSGVhZGVyLmxlbmd0aDtcbiAgICAvLyBEZXRlcm1pbmUgdGhlIGVuZCBvZiB0aGUgcGxhbiBjb250ZW50LiBJdCdzIGVpdGhlciB0aGUgc3RhcnQgb2YgdGhlIGZpbGVzIGhlYWRlciBvciBlbmQgb2YgdGhlIHJlc3BvbnNlLlxuICAgIGNvbnN0IHBsYW5Db250ZW50RW5kSW5kZXggPSBmaWxlc0hlYWRlckluZGV4ICE9PSAtMSA/IGZpbGVzSGVhZGVySW5kZXggOiByZXNwb25zZS5sZW5ndGg7XG4gICAgcGxhbiA9IHJlc3BvbnNlLnNsaWNlKHBsYW5Db250ZW50U3RhcnRJbmRleCwgcGxhbkNvbnRlbnRFbmRJbmRleCkudHJpbSgpO1xuICB9XG5cbiAgaWYgKGZpbGVzSGVhZGVySW5kZXggIT09IC0xKSB7XG4gICAgY29uc3QgZmlsZXNDb250ZW50U3RhcnRJbmRleCA9IGZpbGVzSGVhZGVySW5kZXggKyBmaWxlc0hlYWRlci5sZW5ndGg7XG4gICAgLy8gVGhlIGZpbGVzIHNlY3Rpb24gZ29lcyBmcm9tIGFmdGVyIGl0cyBoZWFkZXIgdG8gdGhlIGVuZCBvZiB0aGUgcmVzcG9uc2UuXG4gICAgY29uc3QgZmlsZXNTZWN0aW9uVGV4dCA9IHJlc3BvbnNlLnNsaWNlKGZpbGVzQ29udGVudFN0YXJ0SW5kZXgpLnRyaW0oKTtcblxuICAgIGNvbnN0IGZpbGVQYXRoUmVnZXggPSAvXFxCLVxccypgPyhbXmBcXG5dKylgPy9nO1xuICAgIGNvbnN0IG1hdGNoZXMgPSBbLi4uZmlsZXNTZWN0aW9uVGV4dC5tYXRjaEFsbChmaWxlUGF0aFJlZ2V4KV07XG4gICAgZmlsZVBhdGhzID0gbWF0Y2hlcy5tYXAoKG1hdGNoKSA9PiBtYXRjaFsxXS50cmltKCkpO1xuICB9XG5cbiAgcmV0dXJuIHsgcGxhbiwgZmlsZVBhdGhzIH07XG59XG4iLCJpbXBvcnQgYW5zaXMgZnJvbSAnYW5zaXMnO1xuaW1wb3J0IHsgYnVpbGRBaWRlckFyZ3MgfSBmcm9tICcuL2FpZGVyJztcbmltcG9ydCB0eXBlIHsgTWFpbk9wdGlvbnMgfSBmcm9tICcuL21haW4nO1xuaW1wb3J0IHR5cGUgeyBSZXNvbHV0aW9uUGxhbiB9IGZyb20gJy4vcGxhbic7XG5pbXBvcnQgeyBydW5Db21tYW5kLCBzcGF3bkFzeW5jIH0gZnJvbSAnLi9zcGF3bic7XG5pbXBvcnQgeyBwYXJzZUNvbW1hbmRMaW5lQXJncyB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdGVzdEFuZEZpeChvcHRpb25zOiBNYWluT3B0aW9ucywgcmVzb2x1dGlvblBsYW4/OiBSZXNvbHV0aW9uUGxhbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IG1heEF0dGVtcHRzID0gb3B0aW9ucy5tYXhUZXN0QXR0ZW1wdHM7XG4gIGxldCBhdHRlbXB0cyA9IDA7XG4gIGxldCBmaXhSZXN1bHQgPSAnJztcblxuICB3aGlsZSAoYXR0ZW1wdHMgPCBtYXhBdHRlbXB0cykge1xuICAgIGF0dGVtcHRzKys7XG4gICAgY29uc29sZS5pbmZvKGFuc2lzLmN5YW4oYEV4ZWN1dGluZyB0ZXN0IGNvbW1hbmQgKGF0dGVtcHQgJHthdHRlbXB0c30vJHttYXhBdHRlbXB0c30pOiAke29wdGlvbnMudGVzdENvbW1hbmR9YCkpO1xuICAgIGNvbnN0IFtjb21tYW5kUHJvZ3JhbSwgLi4uY29tbWFuZEFyZ3NdID0gcGFyc2VDb21tYW5kTGluZUFyZ3Mob3B0aW9ucy50ZXN0Q29tbWFuZCB8fCAnJyk7XG5cbiAgICBjb25zdCB0ZXN0UmVzdWx0ID0gYXdhaXQgc3Bhd25Bc3luYyhjb21tYW5kUHJvZ3JhbSwgY29tbWFuZEFyZ3MsIHtcbiAgICAgIGN3ZDogcHJvY2Vzcy5jd2QoKSxcbiAgICB9KTtcblxuICAgIGlmICh0ZXN0UmVzdWx0LnN0YXR1cyA9PT0gMCkge1xuICAgICAgY29uc29sZS5pbmZvKGFuc2lzLmdyZWVuKCdUZXN0IGNvbW1hbmQgcGFzc2VkIHN1Y2Nlc3NmdWxseS4nKSk7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjb25zb2xlLndhcm4oYW5zaXMueWVsbG93KGBUZXN0IGNvbW1hbmQgZmFpbGVkIHdpdGggZXhpdCBjb2RlICR7dGVzdFJlc3VsdC5zdGF0dXN9LmApKTtcblxuICAgIC8vIE9ubHkgdHJ5IHRvIGZpeCBpZiB3ZSBoYXZlbid0IHJlYWNoZWQgdGhlIG1heGltdW0gYXR0ZW1wdHNcbiAgICBpZiAoYXR0ZW1wdHMgPj0gbWF4QXR0ZW1wdHMpIHtcbiAgICAgIGNvbnNvbGUud2FybihhbnNpcy55ZWxsb3coYE1heGltdW0gZml4IGF0dGVtcHRzICgke21heEF0dGVtcHRzfSkgcmVhY2hlZC4gR2l2aW5nIHVwLmApKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNvbnN0IHByb21wdCA9IGBcblRoZSBwcmV2aW91cyBjaGFuZ2VzIHdlcmUgYXBwbGllZCwgYnV0IHRoZSB0ZXN0IGNvbW1hbmQgXFxgJHtvcHRpb25zLnRlc3RDb21tYW5kfVxcYCBmYWlsZWQuXG5cbkV4aXQgY29kZTogJHt0ZXN0UmVzdWx0LnN0YXR1c31cblxuU3Rkb3V0OlxuXFxgXFxgXFxgXG4ke3Rlc3RSZXN1bHQuc3Rkb3V0fVxuXFxgXFxgXFxgXG5cblN0ZGVycjpcblxcYFxcYFxcYFxuJHt0ZXN0UmVzdWx0LnN0ZGVycn1cblxcYFxcYFxcYFxuXG5QbGVhc2UgYW5hbHl6ZSB0aGUgb3V0cHV0IGFuZCBmaXggdGhlIGVycm9ycy5cbmAudHJpbSgpO1xuXG4gICAgZml4UmVzdWx0ICs9IGF3YWl0IHJ1bkFpZGVyRml4KG9wdGlvbnMsIHByb21wdCwgcmVzb2x1dGlvblBsYW4pO1xuICB9XG5cbiAgcmV0dXJuIGZpeFJlc3VsdDtcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gcnVuIEFpZGVyIHdpdGggYSBmaXggcHJvbXB0XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW5BaWRlckZpeChcbiAgb3B0aW9uczogTWFpbk9wdGlvbnMsXG4gIHByb21wdDogc3RyaW5nLFxuICByZXNvbHV0aW9uUGxhbj86IFJlc29sdXRpb25QbGFuXG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCBhaWRlckFyZ3MgPSBidWlsZEFpZGVyQXJncyhvcHRpb25zLCB7IHByb21wdCwgcmVzb2x1dGlvblBsYW4gfSk7XG5cbiAgY29uc29sZS5pbmZvKGFuc2lzLmN5YW4oYEFza2luZyBBaWRlciB0byBmaXggXCIke29wdGlvbnMudGVzdENvbW1hbmR9XCIuLi5gKSk7XG4gIGNvbnN0IGFpZGVyUmVzdWx0ID0gYXdhaXQgcnVuQ29tbWFuZCgnYWlkZXInLCBhaWRlckFyZ3MsIHtcbiAgICBlbnY6IHsgLi4ucHJvY2Vzcy5lbnYsIE5PX0NPTE9SOiAnMScgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIGBcXG5cXG4jIEFpZGVyIGZpeCBhdHRlbXB0IGZvciBcIiR7b3B0aW9ucy50ZXN0Q29tbWFuZH1cIlxcblxcbiR7YWlkZXJSZXN1bHQudHJpbSgpfWA7XG59XG4iLCJpbXBvcnQgY2hpbGRfcHJvY2VzcyBmcm9tICdub2RlOmNoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IGFuc2lzIGZyb20gJ2Fuc2lzJztcbmltcG9ydCBZQU1MIGZyb20gJ3lhbWwnO1xuaW1wb3J0IHsgYnVpbGRBaWRlckFyZ3MgfSBmcm9tICcuL2FpZGVyJztcbmltcG9ydCB7IHBsYW5Db2RlQ2hhbmdlcyB9IGZyb20gJy4vcGxhbic7XG5pbXBvcnQgeyBjb25maWd1cmVHaXRVc2VyRGV0YWlsc0lmTmVlZGVkIH0gZnJvbSAnLi9wcm9maWxlJztcbmltcG9ydCB7IHJ1bkNvbW1hbmQgfSBmcm9tICcuL3NwYXduJztcbmltcG9ydCB7IHRlc3RBbmRGaXggfSBmcm9tICcuL3Rlc3QnO1xuaW1wb3J0IHR5cGUgeyBHaXRIdWJJc3N1ZSwgUmVhc29uaW5nRWZmb3J0IH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBzdHJpcEh0bWxDb21tZW50cyB9IGZyb20gJy4vdXRpbHMnO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHRoZSBtYWluIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWFpbk9wdGlvbnMge1xuICAvKiogQWRkaXRpb25hbCBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgYWlkZXIgY29tbWFuZCAqL1xuICBhaWRlckV4dHJhQXJncz86IHN0cmluZztcbiAgLyoqIFdoZXRoZXIgdG8gZ2VuZXJhdGUgYSBkZXRhaWxlZCBwbGFuICovXG4gIGRldGFpbGVkUGxhbjogYm9vbGVhbjtcbiAgLyoqIFJ1biB3aXRob3V0IG1ha2luZyBhY3R1YWwgY2hhbmdlcyAobm8gYnJhbmNoIGNyZWF0aW9uLCBubyBQUikgKi9cbiAgZHJ5UnVuOiBib29sZWFuO1xuICAvKiogR2l0SHViIGlzc3VlIG51bWJlciB0byBwcm9jZXNzICovXG4gIGlzc3VlTnVtYmVyOiBudW1iZXI7XG4gIC8qKiBNYXhpbXVtIG51bWJlciBvZiBhdHRlbXB0cyB0byBmaXggdGVzdCBmYWlsdXJlcyAqL1xuICBtYXhUZXN0QXR0ZW1wdHM6IG51bWJlcjtcbiAgLyoqIExMTSBtb2RlbCB0byB1c2UgZm9yIHBsYW5uaW5nIGNvZGUgY2hhbmdlcyAqL1xuICBwbGFubmluZ01vZGVsPzogc3RyaW5nO1xuICAvKiogTGV2ZWwgb2YgcmVhc29uaW5nIGVmZm9ydCBmb3IgdGhlIExMTSAqL1xuICByZWFzb25pbmdFZmZvcnQ/OiBSZWFzb25pbmdFZmZvcnQ7XG4gIC8qKiBFeHRyYSBhcmd1bWVudHMgZm9yIHJlcG9taXggd2hlbiBnZW5lcmF0aW5nIGNvbnRleHQgKi9cbiAgcmVwb21peEV4dHJhQXJncz86IHN0cmluZztcbiAgLyoqIENvbW1hbmQgdG8gcnVuIGFmdGVyIEFpZGVyIGFwcGxpZXMgY2hhbmdlcy4gSWYgaXQgZmFpbHMsIEFpZGVyIHdpbGwgdHJ5IHRvIGZpeCBpdC4gKi9cbiAgdGVzdENvbW1hbmQ/OiBzdHJpbmc7XG59XG5cbmNvbnN0IE1BWF9BTlNXRVJfTEVOR1RIID0gNjUwMDA7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG9wdGlvbnM6IE1haW5PcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gIGlmIChvcHRpb25zLmRyeVJ1bikge1xuICAgIGNvbnNvbGUuaW5mbyhhbnNpcy55ZWxsb3coJ1J1bm5pbmcgaW4gZHJ5LXJ1biBtb2RlLiBObyBicmFuY2hlcyBvciBQUnMgd2lsbCBiZSBjcmVhdGVkLicpKTtcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCBjb25maWd1cmVHaXRVc2VyRGV0YWlsc0lmTmVlZGVkKCk7XG4gIH1cblxuICBhd2FpdCBydW5Db21tYW5kKCdweXRob24nLCBbJy1tJywgJ3BpcCcsICdpbnN0YWxsJywgJ2FpZGVyLWluc3RhbGwnXSk7XG4gIGF3YWl0IHJ1bkNvbW1hbmQoJ3V2JywgWyd0b29sJywgJ3VuaW5zdGFsbCcsICdhaWRlci1jaGF0J10sIHsgaWdub3JlRXhpdFN0YXR1czogdHJ1ZSB9KTtcbiAgYXdhaXQgcnVuQ29tbWFuZCgnYWlkZXItaW5zdGFsbCcsIFtdKTtcbiAgYXdhaXQgcnVuQ29tbWFuZCgndXYnLCBbJ3Rvb2wnLCAncnVuJywgJy0tZnJvbScsICdhaWRlci1jaGF0JywgJ3BpcCcsICdpbnN0YWxsJywgJ2JvdG8zJ10pO1xuICAvLyBhd2FpdCBydW5Db21tYW5kKCdhaWRlcicsIFsnLS1pbnN0YWxsLW1haW4tYnJhbmNoJywgJy0teWVzLWFsd2F5cyddKTtcblxuICBjb25zdCBpc3N1ZVJlc3VsdCA9IGF3YWl0IHJ1bkNvbW1hbmQoJ2doJywgW1xuICAgICdpc3N1ZScsXG4gICAgJ3ZpZXcnLFxuICAgIG9wdGlvbnMuaXNzdWVOdW1iZXIudG9TdHJpbmcoKSxcbiAgICAnLS1qc29uJyxcbiAgICAnYXV0aG9yLHRpdGxlLGJvZHksbGFiZWxzLGNvbW1lbnRzJyxcbiAgXSk7XG4gIGNvbnN0IGlzc3VlOiBHaXRIdWJJc3N1ZSA9IEpTT04ucGFyc2UoaXNzdWVSZXN1bHQpO1xuXG4gIGNvbnN0IGNsZWFuZWRJc3N1ZUJvZHkgPSBzdHJpcEh0bWxDb21tZW50cyhpc3N1ZS5ib2R5KTtcbiAgY29uc3QgaXNzdWVPYmplY3QgPSB7XG4gICAgYXV0aG9yOiBpc3N1ZS5hdXRob3IubG9naW4sXG4gICAgdGl0bGU6IGlzc3VlLnRpdGxlLFxuICAgIGRlc2NyaXB0aW9uOiBjbGVhbmVkSXNzdWVCb2R5LFxuICAgIGNvbW1lbnRzOiBpc3N1ZS5jb21tZW50cy5tYXAoKGMpID0+ICh7XG4gICAgICBhdXRob3I6IGMuYXV0aG9yLmxvZ2luLFxuICAgICAgYm9keTogYy5ib2R5LFxuICAgIH0pKSxcbiAgfTtcbiAgY29uc3QgaXNzdWVUZXh0ID0gWUFNTC5zdHJpbmdpZnkoaXNzdWVPYmplY3QpLnRyaW0oKTtcbiAgY29uc3QgcmVzb2x1dGlvblBsYW4gPVxuICAgIChvcHRpb25zLnBsYW5uaW5nTW9kZWwgJiZcbiAgICAgIChhd2FpdCBwbGFuQ29kZUNoYW5nZXMoXG4gICAgICAgIG9wdGlvbnMucGxhbm5pbmdNb2RlbCxcbiAgICAgICAgaXNzdWVUZXh0LFxuICAgICAgICBvcHRpb25zLmRldGFpbGVkUGxhbixcbiAgICAgICAgb3B0aW9ucy5yZWFzb25pbmdFZmZvcnQsXG4gICAgICAgIG9wdGlvbnMucmVwb21peEV4dHJhQXJnc1xuICAgICAgKSkpIHx8XG4gICAgdW5kZWZpbmVkO1xuICBjb25zdCBwbGFuVGV4dCA9XG4gICAgcmVzb2x1dGlvblBsYW4gJiYgJ3BsYW4nIGluIHJlc29sdXRpb25QbGFuICYmIHJlc29sdXRpb25QbGFuLnBsYW5cbiAgICAgID8gYFxuIyBQbGFuXG5cbiR7cmVzb2x1dGlvblBsYW4ucGxhbn1cbmAudHJpbSgpXG4gICAgICA6ICcnO1xuICBjb25zdCBwcm9tcHQgPSBgXG5Nb2RpZnkgdGhlIGNvZGUgdG8gcmVzb2x2ZSB0aGUgZm9sbG93aW5nIEdpdEh1YiBpc3N1ZTpcblxcYFxcYFxcYFxcYHltbFxuJHtpc3N1ZVRleHR9XG5cXGBcXGBcXGBcXGBcblxuJHtwbGFuVGV4dH1cbmAudHJpbSgpO1xuICBjb25zb2xlLmxvZygnUmVzb2x1dGlvbiBwbGFuOicsIHJlc29sdXRpb25QbGFuKTtcblxuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuXG4gIGNvbnN0IGJyYW5jaE5hbWUgPSBgYWktcHItJHtvcHRpb25zLmlzc3VlTnVtYmVyfS0ke25vdy5nZXRGdWxsWWVhcigpfV8ke2dldFR3b0RpZ2l0cyhub3cuZ2V0TW9udGgoKSArIDEpfSR7Z2V0VHdvRGlnaXRzKG5vdy5nZXREYXRlKCkpfV8ke2dldFR3b0RpZ2l0cyhub3cuZ2V0SG91cnMoKSl9JHtnZXRUd29EaWdpdHMobm93LmdldE1pbnV0ZXMoKSl9JHtnZXRUd29EaWdpdHMobm93LmdldFNlY29uZHMoKSl9YDtcbiAgaWYgKCFvcHRpb25zLmRyeVJ1bikge1xuICAgIGF3YWl0IHJ1bkNvbW1hbmQoJ2dpdCcsIFsnc3dpdGNoJywgJy1DJywgYnJhbmNoTmFtZV0pO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuaW5mbyhhbnNpcy55ZWxsb3coYFdvdWxkIGNyZWF0ZSBicmFuY2g6ICR7YnJhbmNoTmFtZX1gKSk7XG4gIH1cblxuICAvLyBCdWlsZCBhaWRlciBjb21tYW5kIGFyZ3VtZW50c1xuICBjb25zdCBhaWRlckFyZ3MgPSBidWlsZEFpZGVyQXJncyhvcHRpb25zLCB7IHByb21wdDogcHJvbXB0LCByZXNvbHV0aW9uUGxhbiB9KTtcbiAgY29uc3QgYWlkZXJSZXN1bHQgPSBhd2FpdCBydW5Db21tYW5kKCdhaWRlcicsIGFpZGVyQXJncywge1xuICAgIGVudjogeyAuLi5wcm9jZXNzLmVudiwgTk9fQ09MT1I6ICcxJyB9LFxuICB9KTtcbiAgbGV0IGFpZGVyQW5zd2VyID0gYWlkZXJSZXN1bHQudHJpbSgpO1xuICBpZiAob3B0aW9ucy50ZXN0Q29tbWFuZCkge1xuICAgIGFpZGVyQW5zd2VyICs9IGF3YWl0IHRlc3RBbmRGaXgob3B0aW9ucywgcmVzb2x1dGlvblBsYW4pO1xuICB9XG5cbiAgLy8gVHJ5IGNvbW1pdGluZyBjaGFuZ2VzIGJlY2F1c2UgYWlkZXIgbWF5IGZhaWwgdG8gY29tbWl0IGNoYW5nZXMgZHVlIHRvIHByZS1jb21taXQgaG9va3NcbiAgYXdhaXQgcnVuQ29tbWFuZCgnZ2l0JywgWydjb21taXQnLCAnLW0nLCBgZml4OiBjbG9zZSAjJHtvcHRpb25zLmlzc3VlTnVtYmVyfWAsICctLW5vLXZlcmlmeSddLCB7XG4gICAgaWdub3JlRXhpdFN0YXR1czogdHJ1ZSxcbiAgfSk7XG4gIGlmICghb3B0aW9ucy5kcnlSdW4pIHtcbiAgICBhd2FpdCBydW5Db21tYW5kKCdnaXQnLCBbJ3B1c2gnLCAnb3JpZ2luJywgYnJhbmNoTmFtZSwgJy0tbm8tdmVyaWZ5J10pO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuaW5mbyhhbnNpcy55ZWxsb3coYFdvdWxkIHB1c2ggYnJhbmNoOiAke2JyYW5jaE5hbWV9IHRvIG9yaWdpbmApKTtcbiAgfVxuXG4gIC8vIENyZWF0ZSBhIFBSIHVzaW5nIEdpdEh1YiBDTElcbiAgY29uc3QgcHJUaXRsZSA9IGdldEhlYWRlck9mRmlyc3RDb21taXQoKTtcbiAgbGV0IHByQm9keSA9IGBDbG9zZXMgIyR7b3B0aW9ucy5pc3N1ZU51bWJlcn1cblxuJHtwbGFuVGV4dH1cbmA7XG4gIHByQm9keSArPSBgXG4jIEFpZGVyIExvZ1xuXG5cXGBcXGBcXGBcXGBcbiR7YWlkZXJBbnN3ZXIuc2xpY2UoMCwgTUFYX0FOU1dFUl9MRU5HVEggLSBwckJvZHkubGVuZ3RoKX1cblxcYFxcYFxcYFxcYGA7XG4gIHByQm9keSA9IHByQm9keS5yZXBsYWNlQWxsKC8oPzpcXHMqXFxuKXsyLH0vZywgJ1xcblxcbicpLnRyaW0oKTtcbiAgaWYgKCFvcHRpb25zLmRyeVJ1bikge1xuICAgIGNvbnN0IHJlcG9OYW1lID0gZ2V0R2l0UmVwb05hbWUoKTtcbiAgICBhd2FpdCBydW5Db21tYW5kKCdnaCcsIFsncHInLCAnY3JlYXRlJywgJy0tdGl0bGUnLCBwclRpdGxlLCAnLS1ib2R5JywgcHJCb2R5LCAnLS1yZXBvJywgcmVwb05hbWVdKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmluZm8oYW5zaXMueWVsbG93KGBXb3VsZCBjcmVhdGUgUFIgd2l0aCB0aXRsZTogJHtwclRpdGxlfWApKTtcbiAgICBjb25zb2xlLmluZm8oYW5zaXMueWVsbG93KGBQUiBib2R5IHdvdWxkIGluY2x1ZGUgdGhlIGFpZGVyIHJlc3BvbnNlIGFuZCBjbG9zZSBpc3N1ZSAjJHtvcHRpb25zLmlzc3VlTnVtYmVyfWApKTtcbiAgfVxuXG4gIGNvbnNvbGUuaW5mbyhgXFxuSXNzdWUgIyR7b3B0aW9ucy5pc3N1ZU51bWJlcn0gcHJvY2Vzc2VkIHN1Y2Nlc3NmdWxseS5gKTtcbiAgY29uc29sZS5pbmZvKCdBV1NfUkVHSU9OX05BTUU6JywgcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTl9OQU1FKTtcbn1cblxuZnVuY3Rpb24gZ2V0VHdvRGlnaXRzKHZhbHVlOiBudW1iZXIpOiBzdHJpbmcge1xuICByZXR1cm4gU3RyaW5nKHZhbHVlKS5wYWRTdGFydCgyLCAnMCcpO1xufVxuXG5mdW5jdGlvbiBnZXRHaXRSZXBvTmFtZSgpOiBzdHJpbmcge1xuICBjb25zdCByZXBvVXJsUmVzdWx0ID0gY2hpbGRfcHJvY2Vzcy5zcGF3blN5bmMoJ2dpdCcsIFsncmVtb3RlJywgJ2dldC11cmwnLCAnb3JpZ2luJ10sIHtcbiAgICBlbmNvZGluZzogJ3V0ZjgnLFxuICAgIHN0ZGlvOiAncGlwZScsXG4gIH0pO1xuICBjb25zdCByZXBvVXJsID0gcmVwb1VybFJlc3VsdC5zdGRvdXQudHJpbSgpO1xuICBjb25zdCByZXBvTWF0Y2ggPSByZXBvVXJsLm1hdGNoKC9naXRodWJcXC5jb21bXFwvOl0oW1xcdy1dK1xcL1tcXHctXSspKFxcLmdpdCk/JC8pO1xuICByZXR1cm4gcmVwb01hdGNoID8gcmVwb01hdGNoWzFdIDogJyc7XG59XG5cbmZ1bmN0aW9uIGdldEhlYWRlck9mRmlyc3RDb21taXQoKTogc3RyaW5nIHtcbiAgY29uc3QgZmlyc3RDb21taXRSZXN1bHQgPSBjaGlsZF9wcm9jZXNzLnNwYXduU3luYygnZ2l0JywgWydsb2cnLCAnbWFpbi4uSEVBRCcsICctLXJldmVyc2UnLCAnLS1wcmV0dHk9JXMnXSwge1xuICAgIGVuY29kaW5nOiAndXRmOCcsXG4gICAgc3RkaW86ICdwaXBlJyxcbiAgfSk7XG4gIHJldHVybiBmaXJzdENvbW1pdFJlc3VsdC5zdGRvdXQudHJpbSgpLnNwbGl0KCdcXG4nKVswXTtcbn1cbiIsImltcG9ydCBhbnNpcyBmcm9tICdhbnNpcyc7XG5pbXBvcnQgeyBydW5Db21tYW5kIH0gZnJvbSAnLi9zcGF3bic7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb25maWd1cmVHaXRVc2VyRGV0YWlsc0lmTmVlZGVkKCk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBnaXRVc2VyTmFtZSA9IChhd2FpdCBydW5Db21tYW5kKCdnaXQnLCBbJ2NvbmZpZycsICd1c2VyLm5hbWUnXSwgeyBpZ25vcmVFeGl0U3RhdHVzOiB0cnVlIH0pKS50cmltKCk7XG4gIGlmICghZ2l0VXNlck5hbWUpIHtcbiAgICBjb25zb2xlLmxvZyhhbnNpcy5kaW0oJ0dpdCB1c2VyLm5hbWUgbm90IHNldC4gQXR0ZW1wdGluZyB0byBjb25maWd1cmUgZnJvbSBHaXRIdWIgcHJvZmlsZS4uLicpKTtcbiAgICBjb25zdCBnaXRodWJOYW1lT3V0cHV0ID0gKGF3YWl0IHJ1bkNvbW1hbmQoJ2doJywgWydhcGknLCAndXNlcicsICctLWpxJywgJy5uYW1lJ10pKS50cmltKCk7XG4gICAgaWYgKGdpdGh1Yk5hbWVPdXRwdXQgJiYgZ2l0aHViTmFtZU91dHB1dCAhPT0gJ251bGwnKSB7XG4gICAgICBjb25zdCBuYW1lVG9TZXQgPSBnaXRodWJOYW1lT3V0cHV0LnJlcGxhY2UoL15cInxcIiQvZywgJycpOyAvLyBSZW1vdmUgcG90ZW50aWFsIHN1cnJvdW5kaW5nIHF1b3Rlc1xuICAgICAgYXdhaXQgcnVuQ29tbWFuZCgnZ2l0JywgWydjb25maWcnLCAndXNlci5uYW1lJywgbmFtZVRvU2V0XSk7XG4gICAgICBjb25zb2xlLmxvZyhhbnNpcy5ncmVlbihgU3VjY2Vzc2Z1bGx5IGNvbmZpZ3VyZWQgZ2l0IHVzZXIubmFtZSB0byBcIiR7bmFtZVRvU2V0fVwiYCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oYW5zaXMueWVsbG93KCdDb3VsZCBub3QgcmV0cmlldmUgdXNlciBuYW1lIGZyb20gR2l0SHViIHByb2ZpbGUgKGl0IG1pZ2h0IGJlIFwibnVsbFwiIG9yIG5vdCBzZXQpLicpKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBnaXRVc2VyRW1haWwgPSAoYXdhaXQgcnVuQ29tbWFuZCgnZ2l0JywgWydjb25maWcnLCAndXNlci5lbWFpbCddLCB7IGlnbm9yZUV4aXRTdGF0dXM6IHRydWUgfSkpLnRyaW0oKTtcbiAgaWYgKCFnaXRVc2VyRW1haWwpIHtcbiAgICBjb25zb2xlLmxvZyhhbnNpcy5kaW0oJ0dpdCB1c2VyLmVtYWlsIG5vdCBzZXQuIEF0dGVtcHRpbmcgdG8gY29uZmlndXJlIGZyb20gR2l0SHViIHByb2ZpbGUuLi4nKSk7XG4gICAgY29uc3QgZ2l0aHViRW1haWxPdXRwdXQgPSAoYXdhaXQgcnVuQ29tbWFuZCgnZ2gnLCBbJ2FwaScsICd1c2VyJywgJy0tanEnLCAnLmVtYWlsJ10pKS50cmltKCk7XG4gICAgaWYgKGdpdGh1YkVtYWlsT3V0cHV0ICYmIGdpdGh1YkVtYWlsT3V0cHV0ICE9PSAnbnVsbCcpIHtcbiAgICAgIGNvbnN0IGVtYWlsVG9TZXQgPSBnaXRodWJFbWFpbE91dHB1dC5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKTsgLy8gUmVtb3ZlIHBvdGVudGlhbCBzdXJyb3VuZGluZyBxdW90ZXNcbiAgICAgIGF3YWl0IHJ1bkNvbW1hbmQoJ2dpdCcsIFsnY29uZmlnJywgJ3VzZXIuZW1haWwnLCBlbWFpbFRvU2V0XSk7XG4gICAgICBjb25zb2xlLmxvZyhhbnNpcy5ncmVlbihgU3VjY2Vzc2Z1bGx5IGNvbmZpZ3VyZWQgZ2l0IHVzZXIuZW1haWwgdG8gXCIke2VtYWlsVG9TZXR9XCJgKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYW5zaXMueWVsbG93KCdDb3VsZCBub3QgcmV0cmlldmUgdXNlciBlbWFpbCBmcm9tIEdpdEh1YiBwcm9maWxlIChpdCBtaWdodCBiZSBcIm51bGxcIiwgcHJpdmF0ZSwgb3Igbm90IHNldCkuJylcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiREVGQVVMVF9BSURFUl9FWFRSQV9BUkdTIiwiREVGQVVMVF9SRVBPTUlYX0VYVFJBX0FSR1MiLCJERUZBVUxUX01BWF9URVNUX0FUVEVNUFRTIiwiZSIsInQiLCJyIiwiZGVmaW5lUHJvcGVydHkiLCJuIiwic2V0UHJvdG90eXBlT2YiLCJsIiwiY3JlYXRlIiwibyIsImtleXMiLCJzIiwiT2JqZWN0IiwiaSIsInJvdW5kIiwiYyIsIm1heCIsImEiLCJNYXRoIiwicCIsImV4ZWMiLCJsZW5ndGgiLCJwYXJzZUludCIsInUiLCJkIiwiZyIsInNvbWUiLCJ0ZXN0IiwiZ2xvYmFsVGhpcyIsInByb2Nlc3MiLCJhcmd2IiwiZW52Iiwiam9pbiIsImZhbHNlIiwiVEVSTSIsInRydWVjb2xvciIsImFuc2kyNTYiLCJhbnNpIiwiQ09MT1JURVJNIiwiQ0kiLCJQTTJfSE9NRSIsIk5FWFRfUlVOVElNRSIsImluY2x1ZGVzIiwic3Rkb3V0IiwiaXNUVFkiLCJwbGF0Zm9ybSIsIk5PX0NPTE9SIiwid2luZG93IiwiY2hyb21lIiwiZiIsIm9wZW4iLCJjbG9zZSIsImgiLCJiIiwiTyIsIm0iLCJyYXciLCJTdHJpbmciLCJpbmRleE9mIiwic2xpY2UiLCJyZXBsYWNlIiwidyIsIkFuc2lzIiwiaXNTdXBwb3J0ZWQiLCJzdHJpcCIsImV4dGVuZCIsIngiLCJnZXQiLCJ0aGlzIiwidmFsdWUiLCJ5IiwiUiIsIiQiLCJUIiwidiIsIkMiLCJFIiwiTSIsImZnIiwiYmciLCJyZ2IiLCJiZ1JnYiIsImhleCIsImJnSGV4IiwidmlzaWJsZSIsInJlc2V0IiwiYm9sZCIsImRpbSIsIml0YWxpYyIsInVuZGVybGluZSIsImludmVyc2UiLCJoaWRkZW4iLCJzdHJpa2V0aHJvdWdoIiwiSSIsInNwbGl0IiwibWFwIiwidG9VcHBlckNhc2UiLCJhbnNpc01vZHVsZSIsImRlZmF1bHQiLCJibGFjayIsInJlZCIsImdyZWVuIiwieWVsbG93IiwiYmx1ZSIsIm1hZ2VudGEiLCJjeWFuIiwid2hpdGUiLCJncmF5IiwicmVkQnJpZ2h0IiwiZ3JlZW5CcmlnaHQiLCJ5ZWxsb3dCcmlnaHQiLCJibHVlQnJpZ2h0IiwibWFnZW50YUJyaWdodCIsImN5YW5CcmlnaHQiLCJ3aGl0ZUJyaWdodCIsImJnQmxhY2siLCJiZ1JlZCIsImJnR3JlZW4iLCJiZ1llbGxvdyIsImJnQmx1ZSIsImJnTWFnZW50YSIsImJnQ3lhbiIsImJnV2hpdGUiLCJiZ0dyYXkiLCJiZ1JlZEJyaWdodCIsImJnR3JlZW5CcmlnaHQiLCJiZ1llbGxvd0JyaWdodCIsImJnQmx1ZUJyaWdodCIsImJnTWFnZW50YUJyaWdodCIsImJnQ3lhbkJyaWdodCIsImJnV2hpdGVCcmlnaHQiLCJBTElBUyIsIlN5bWJvbCIsImZvciIsIkRPQyIsIk1BUCIsIlBBSVIiLCJTQ0FMQVIiLCJTRVEiLCJOT0RFX1RZUEUiLCJpc0FsaWFzIiwibm9kZSIsImlzRG9jdW1lbnQiLCJpc01hcCIsImlzUGFpciIsImlzU2NhbGFyIiwiaXNTZXEiLCJpc0NvbGxlY3Rpb24iLCJpc05vZGUiLCJoYXNBbmNob3IiLCJhbmNob3IiLCJCUkVBSyIsIlNLSVAiLCJSRU1PVkUiLCJ2aXNpdCIsInZpc2l0b3IiLCJ2aXNpdG9yXyIsImluaXRWaXNpdG9yIiwidmlzaXRfIiwiY29udGVudHMiLCJmcmVlemUiLCJrZXkiLCJwYXRoIiwiY3RybCIsImNhbGxWaXNpdG9yIiwicmVwbGFjZU5vZGUiLCJjb25jYXQiLCJpdGVtcyIsImNpIiwic3BsaWNlIiwiY2siLCJjdiIsImFzeW5jIiwidmlzaXRBc3luYyIsInZpc2l0QXN5bmNfIiwiQ29sbGVjdGlvbiIsIk5vZGUiLCJWYWx1ZSIsImFzc2lnbiIsIkFsaWFzIiwiTWFwIiwiU2NhbGFyIiwiU2VxIiwiUGFpciIsInBhcmVudCIsInB0IiwiRXJyb3IiLCJlc2NhcGVDaGFycyIsIkRpcmVjdGl2ZXMiLCJjb25zdHJ1Y3RvciIsInlhbWwiLCJ0YWdzIiwiZG9jU3RhcnQiLCJkb2NFbmQiLCJkZWZhdWx0WWFtbCIsImRlZmF1bHRUYWdzIiwiY2xvbmUiLCJjb3B5IiwiYXREb2N1bWVudCIsInJlcyIsInZlcnNpb24iLCJhdE5leHREb2N1bWVudCIsImV4cGxpY2l0IiwiYWRkIiwibGluZSIsIm9uRXJyb3IiLCJwYXJ0cyIsInRyaW0iLCJuYW1lIiwic2hpZnQiLCJoYW5kbGUiLCJwcmVmaXgiLCJ0YWdOYW1lIiwic291cmNlIiwidmVyYmF0aW0iLCJzdWZmaXgiLCJtYXRjaCIsImRlY29kZVVSSUNvbXBvbmVudCIsImVycm9yIiwidGFnU3RyaW5nIiwidGFnIiwiZW50cmllcyIsInN0YXJ0c1dpdGgiLCJzdWJzdHJpbmciLCJjaCIsInRvU3RyaW5nIiwiZG9jIiwibGluZXMiLCJ0YWdFbnRyaWVzIiwidGFnTmFtZXMiLCJfa2V5IiwidG4iLCJwdXNoIiwiYW5jaG9ySXNWYWxpZCIsInNhIiwiSlNPTiIsInN0cmluZ2lmeSIsImFuY2hvck5hbWVzIiwicm9vdCIsImFuY2hvcnMiLCJTZXQiLCJmaW5kTmV3QW5jaG9yIiwiZXhjbHVkZSIsImhhcyIsImFwcGx5UmV2aXZlciIsInJldml2ZXIiLCJvYmoiLCJ2YWwiLCJBcnJheSIsImlzQXJyYXkiLCJsZW4iLCJ2MCIsInYxIiwidW5kZWZpbmVkIiwiayIsImZyb20iLCJkZWxldGUiLCJzZXQiLCJjYWxsIiwidG9KUyIsImFyZyIsImN0eCIsInRvSlNPTiIsImRhdGEiLCJhbGlhc0NvdW50IiwiY291bnQiLCJvbkNyZWF0ZSIsImtlZXAiLCJOdW1iZXIiLCJOb2RlQmFzZSIsInR5cGUiLCJnZXRQcm90b3R5cGVPZiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJyYW5nZSIsIm1hcEFzTWFwIiwibWF4QWxpYXNDb3VudCIsIm9uQW5jaG9yIiwiVHlwZUVycm9yIiwibWFwS2V5V2FybmVkIiwidmFsdWVzIiwic3VwZXIiLCJyZXNvbHZlIiwibm9kZXMiLCJmb3VuZCIsImFsaWFzUmVzb2x2ZUNhY2hlIiwiX2FyZyIsIm1zZyIsIlJlZmVyZW5jZUVycm9yIiwiZ2V0QWxpYXNDb3VudCIsIl9vbkNvbW1lbnQiLCJfb25DaG9tcEtlZXAiLCJzcmMiLCJvcHRpb25zIiwidmVyaWZ5QWxpYXNPcmRlciIsImltcGxpY2l0S2V5IiwiaXRlbSIsImtjIiwidmMiLCJpc1NjYWxhclZhbHVlIiwiQkxPQ0tfRk9MREVEIiwiQkxPQ0tfTElURVJBTCIsIlBMQUlOIiwiUVVPVEVfRE9VQkxFIiwiUVVPVEVfU0lOR0xFIiwiY3JlYXRlTm9kZSIsInNjaGVtYSIsIkJvb2xlYW4iLCJCaWdJbnQiLCJ2YWx1ZU9mIiwiYWxpYXNEdXBsaWNhdGVPYmplY3RzIiwib25UYWdPYmoiLCJzb3VyY2VPYmplY3RzIiwicmVmIiwidGFnT2JqIiwiZmlsdGVyIiwiZmluZCIsImZvcm1hdCIsImlkZW50aWZ5IiwiZmluZFRhZ09iamVjdCIsIml0ZXJhdG9yIiwibm9kZUNsYXNzIiwiY29sbGVjdGlvbkZyb21QYXRoIiwiaXNJbnRlZ2VyIiwia2VlcFVuZGVmaW5lZCIsImlzRW1wdHlQYXRoIiwibmV4dCIsImRvbmUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJpdCIsImFkZEluIiwicmVzdCIsImRlbGV0ZUluIiwiZ2V0SW4iLCJrZWVwU2NhbGFyIiwiaGFzQWxsTnVsbFZhbHVlcyIsImFsbG93U2NhbGFyIiwiZXZlcnkiLCJjb21tZW50QmVmb3JlIiwiY29tbWVudCIsImhhc0luIiwic2V0SW4iLCJzdHJpbmdpZnlDb21tZW50Iiwic3RyIiwiaW5kZW50Q29tbWVudCIsImluZGVudCIsImxpbmVDb21tZW50IiwiZW5kc1dpdGgiLCJGT0xEX0ZMT1ciLCJGT0xEX0JMT0NLIiwiRk9MRF9RVU9URUQiLCJmb2xkRmxvd0xpbmVzIiwidGV4dCIsIm1vZGUiLCJpbmRlbnRBdFN0YXJ0IiwibGluZVdpZHRoIiwibWluQ29udGVudFdpZHRoIiwib25Gb2xkIiwib25PdmVyZmxvdyIsImVuZFN0ZXAiLCJmb2xkcyIsImVzY2FwZWRGb2xkcyIsInByZXYiLCJlbmQiLCJvdmVyZmxvdyIsImVzY1N0YXJ0IiwiZXNjRW5kIiwiY29uc3VtZU1vcmVJbmRlbnRlZExpbmVzIiwiaiIsImZvbGQiLCJzdGFydCIsImdldEZvbGRPcHRpb25zIiwiaXNCbG9jayIsImNvbnRhaW5zRG9jdW1lbnRNYXJrZXIiLCJkb3VibGVRdW90ZWRTdHJpbmciLCJqc29uIiwiZG91YmxlUXVvdGVkQXNKU09OIiwibWluTXVsdGlMaW5lTGVuZ3RoIiwiZG91YmxlUXVvdGVkTWluTXVsdGlMaW5lTGVuZ3RoIiwiY29kZSIsInN1YnN0ciIsInNpbmdsZVF1b3RlZFN0cmluZyIsInNpbmdsZVF1b3RlIiwicXVvdGVkU3RyaW5nIiwicXMiLCJoYXNEb3VibGUiLCJoYXNTaW5nbGUiLCJibG9ja0VuZE5ld2xpbmVzIiwiUmVnRXhwIiwiYmxvY2tTdHJpbmciLCJvbkNvbW1lbnQiLCJvbkNob21wS2VlcCIsImJsb2NrUXVvdGUiLCJjb21tZW50U3RyaW5nIiwiZm9yY2VCbG9ja0luZGVudCIsImxpdGVyYWwiLCJpbmRlbnRMZW5ndGgiLCJsaW1pdCIsInN0ckxlbiIsImxpbmVMZW5ndGhPdmVyTGltaXQiLCJjaG9tcCIsImVuZFN0YXJ0IiwiZW5kTmxQb3MiLCJzdGFydEVuZCIsInN0YXJ0V2l0aFNwYWNlIiwic3RhcnRObFBvcyIsImhlYWRlciIsImZvbGRlZFZhbHVlIiwibGl0ZXJhbEZhbGxiYWNrIiwiZm9sZE9wdGlvbnMiLCJib2R5Iiwic3RyaW5naWZ5U3RyaW5nIiwiaW5GbG93Iiwic3MiLCJfc3RyaW5naWZ5IiwiX3R5cGUiLCJhY3R1YWxTdHJpbmciLCJpbmRlbnRTdGVwIiwiY29tcGF0IiwicGxhaW5TdHJpbmciLCJkZWZhdWx0S2V5VHlwZSIsImRlZmF1bHRTdHJpbmdUeXBlIiwiY3JlYXRlU3RyaW5naWZ5Q29udGV4dCIsIm9wdCIsImRpcmVjdGl2ZXMiLCJmYWxzZVN0ciIsImZsb3dDb2xsZWN0aW9uUGFkZGluZyIsImluZGVudFNlcSIsIm51bGxTdHIiLCJzaW1wbGVLZXlzIiwidHJ1ZVN0ciIsInRvU3RyaW5nT3B0aW9ucyIsImNvbGxlY3Rpb25TdHlsZSIsInJlcGVhdCIsInJlc29sdmVkQWxpYXNlcyIsInRlc3RNYXRjaCIsImdldFRhZ09iamVjdCIsInByb3BzIiwic3RyaW5naWZ5UHJvcHMiLCJ3YXJuIiwibG9nTGV2ZWwiLCJ3YXJuaW5nIiwiY29uc29sZSIsIk1FUkdFX0tFWSIsIm1lcmdlIiwiZGVzY3JpcHRpb24iLCJhZGRUb0pTTWFwIiwiYWRkTWVyZ2VUb0pTTWFwIiwibWVyZ2VWYWx1ZSIsInNyY01hcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiYWRkUGFpclRvSlNNYXAiLCJpc01lcmdlS2V5IiwianNLZXkiLCJzdHJpbmdLZXkiLCJzdHJDdHgiLCJpblN0cmluZ2lmeUtleSIsInN0cktleSIsImpzb25TdHIiLCJzdHJpbmdpZnlLZXkiLCJqc1ZhbHVlIiwiY3JlYXRlUGFpciIsIl8iLCJhbGxOdWxsVmFsdWVzIiwia2V5Q29tbWVudCIsImV4cGxpY2l0S2V5IiwidnNiIiwidmNiIiwidmFsdWVDb21tZW50Iiwia2V5Q29tbWVudERvbmUiLCJjaG9tcEtlZXAiLCJzcGFjZUJlZm9yZSIsImZsb3ciLCJ2YWx1ZUNvbW1lbnREb25lIiwidmFsdWVTdHIiLCJ3cyIsInZzMCIsIm5sMCIsImhhc05ld2xpbmUiLCJoYXNQcm9wc0xpbmUiLCJzcDAiLCJzdHJpbmdpZnlQYWlyIiwic3RyaW5naWZ5Q29sbGVjdGlvbiIsImNvbGxlY3Rpb24iLCJzdHJpbmdpZnlGbG93Q29sbGVjdGlvbiIsInN0cmluZ2lmeUJsb2NrQ29sbGVjdGlvbiIsImJsb2NrSXRlbVByZWZpeCIsImZsb3dDaGFycyIsIml0ZW1JbmRlbnQiLCJpdGVtQ3R4IiwiYWRkQ29tbWVudEJlZm9yZSIsImlrIiwiZmNQYWRkaW5nIiwicmVxTmV3bGluZSIsImxpbmVzQXRWYWx1ZSIsIml2IiwicmVkdWNlIiwic3VtIiwiaWMiLCJ0cmltU3RhcnQiLCJmaW5kUGFpciIsIllBTUxNYXAiLCJyZXBsYWNlciIsInNvcnRNYXBFbnRyaWVzIiwic29ydCIsInBhaXIiLCJvdmVyd3JpdGUiLCJfcGFpciIsInNvcnRFbnRyaWVzIiwiZmluZEluZGV4IiwiVHlwZSIsIllBTUxTZXEiLCJpZHgiLCJhc0l0ZW1JbmRleCIsInNlcSIsInN0cmluZyIsIm51bGxUYWciLCJib29sVGFnIiwic3RyaW5naWZ5TnVtYmVyIiwibWluRnJhY3Rpb25EaWdpdHMiLCJudW0iLCJpc0Zpbml0ZSIsImlzTmFOIiwiZmxvYXROYU4iLCJ0b0xvd2VyQ2FzZSIsIk5hTiIsIk5FR0FUSVZFX0lORklOSVRZIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJmbG9hdEV4cCIsInBhcnNlRmxvYXQiLCJ0b0V4cG9uZW50aWFsIiwiZmxvYXQiLCJkb3QiLCJpbnRJZGVudGlmeSIsImludFJlc29sdmUiLCJvZmZzZXQiLCJyYWRpeCIsImludEFzQmlnSW50IiwiaW50U3RyaW5naWZ5IiwiaW50T2N0IiwiX29uRXJyb3IiLCJpbnQiLCJpbnRIZXgiLCJzdHJpbmdpZnlKU09OIiwiYmluYXJ5IiwiVWludDhBcnJheSIsImF0b2IiLCJidWZmZXIiLCJjaGFyQ29kZUF0IiwiYnVmIiwiYnRvYSIsImZyb21DaGFyQ29kZSIsImNlaWwiLCJyZXNvbHZlUGFpcnMiLCJjbiIsImNyZWF0ZVBhaXJzIiwiaXRlcmFibGUiLCJwYWlycyIsIllBTUxPTWFwIiwiYmluZCIsIm9tYXAiLCJzZWVuS2V5cyIsImJvb2xTdHJpbmdpZnkiLCJ0cnVlVGFnIiwiZmFsc2VUYWciLCJzaWduIiwiaW50QmluIiwiWUFNTFNldCIsImtlZXBQYWlyIiwicGFyc2VTZXhhZ2VzaW1hbCIsImFzQmlnSW50Iiwic3RyaW5naWZ5U2V4YWdlc2ltYWwiLCJfNjAiLCJ1bnNoaWZ0IiwicGFkU3RhcnQiLCJpbnRUaW1lIiwiZmxvYXRUaW1lIiwidGltZXN0YW1wIiwiRGF0ZSIsInllYXIiLCJtb250aCIsImRheSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJtaWxsaXNlYyIsImRhdGUiLCJVVEMiLCJ0eiIsImFicyIsInRvSVNPU3RyaW5nIiwic2NoZW1hcyIsInNjaGVtYSQxIiwic2NoZW1hJDIiLCJ0YWdzQnlOYW1lIiwiYm9vbCIsIm51bGwiLCJjb3JlS25vd25UYWdzIiwiZ2V0VGFncyIsImN1c3RvbVRhZ3MiLCJzY2hlbWFOYW1lIiwiYWRkTWVyZ2VUYWciLCJzY2hlbWFUYWdzIiwic29ydE1hcEVudHJpZXNCeUtleSIsIlNjaGVtYSIsInJlc29sdmVLbm93blRhZ3MiLCJ0b1N0cmluZ0RlZmF1bHRzIiwia25vd25UYWdzIiwiRG9jdW1lbnQiLCJlcnJvcnMiLCJ3YXJuaW5ncyIsIl9yZXBsYWNlciIsImtlZXBTb3VyY2VUb2tlbnMiLCJwcmV0dHlFcnJvcnMiLCJzdHJpY3QiLCJzdHJpbmdLZXlzIiwidW5pcXVlS2V5cyIsIl9kaXJlY3RpdmVzIiwic2V0U2NoZW1hIiwiYXNzZXJ0Q29sbGVjdGlvbiIsImNyZWF0ZUFsaWFzIiwia2V5VG9TdHIiLCJhc1N0ciIsImFuY2hvclByZWZpeCIsInNldEFuY2hvcnMiLCJhbGlhc09iamVjdHMiLCJwcmV2QW5jaG9ycyIsImNyZWF0ZU5vZGVBbmNob3JzIiwic3YiLCJqc29uQXJnIiwiaGFzRGlyZWN0aXZlcyIsImRpciIsImNzIiwiY29udGVudENvbW1lbnQiLCJkYyIsInN0cmluZ2lmeURvY3VtZW50IiwiWUFNTEVycm9yIiwicG9zIiwibWVzc2FnZSIsIllBTUxQYXJzZUVycm9yIiwiWUFNTFdhcm5pbmciLCJwcmV0dGlmeUVycm9yIiwibGMiLCJsaW5lUG9zIiwiY29sIiwibGluZVN0ciIsImxpbmVTdGFydHMiLCJtaW4iLCJwb2ludGVyIiwicmVzb2x2ZVByb3BzIiwidG9rZW5zIiwiaW5kaWNhdG9yIiwicGFyZW50SW5kZW50Iiwic3RhcnRPbk5ld2xpbmUiLCJhdE5ld2xpbmUiLCJoYXNTcGFjZSIsImNvbW1lbnRTZXAiLCJyZXFTcGFjZSIsInRhYiIsIm5ld2xpbmVBZnRlclByb3AiLCJjb21tYSIsInRva2VuIiwiY2IiLCJsYXN0IiwiY29udGFpbnNOZXdsaW5lIiwic3QiLCJzZXAiLCJmbG93SW5kZW50Q2hlY2siLCJmYyIsIm1hcEluY2x1ZGVzIiwic2VhcmNoIiwiaXNFcXVhbCIsInN0YXJ0Q29sTXNnIiwicmVzb2x2ZUVuZCIsImJsb2NrTXNnIiwicmVzb2x2ZUNvbGxlY3Rpb24iLCJDTiIsImNvbGwiLCJjb21wb3NlTm9kZSIsImNvbXBvc2VFbXB0eU5vZGUiLCJibSIsImF0Um9vdCIsImNvbW1lbnRFbmQiLCJjb2xsSXRlbSIsImtleVByb3BzIiwiYXRLZXkiLCJrZXlTdGFydCIsImtleU5vZGUiLCJ2YWx1ZVByb3BzIiwidmFsdWVOb2RlIiwic3JjVG9rZW4iLCJyZXNvbHZlQmxvY2tNYXAiLCJicyIsInJlc29sdmVCbG9ja1NlcSIsImZjTmFtZSIsInByZXZJdGVtQ29tbWVudCIsImxvb3AiLCJlbmRSYW5nZSIsImV4cGVjdGVkRW5kIiwiY2UiLCJlZSIsImNlUG9zIiwicmVzb2x2ZUZsb3dDb2xsZWN0aW9uIiwiQ29sbCIsInJlc29sdmVCbG9ja1NjYWxhciIsInNjYWxhciIsInRzIiwicGFyc2VCbG9ja1NjYWxhckhlYWRlciIsImZpcnN0Iiwic3BsaXRMaW5lcyIsImNob21wU3RhcnQiLCJjb250ZW50IiwidHJpbUluZGVudCIsImNvbnRlbnRTdGFydCIsInByZXZNb3JlSW5kZW50ZWQiLCJjcmxmIiwicmVzb2x2ZUZsb3dTY2FsYXIiLCJyZWwiLCJiYWRDaGFyIiwiZm9sZExpbmVzIiwicGxhaW5WYWx1ZSIsInNpbmdsZVF1b3RlZFZhbHVlIiwiZm9sZE5ld2xpbmUiLCJjYyIsImVzY2FwZUNvZGVzIiwiVSIsInBhcnNlQ2hhckNvZGUiLCJ3c1N0YXJ0IiwiZG91YmxlUXVvdGVkVmFsdWUiLCJ2YWx1ZUVuZCIsInJlIiwibGFzdEluZGV4IiwiTiIsIkwiLCJQIiwiZnJvbUNvZGVQb2ludCIsImNvbXBvc2VTY2FsYXIiLCJ0YWdUb2tlbiIsIm1hdGNoV2l0aFRlc3QiLCJrdCIsImZpbmRTY2FsYXJUYWdCeU5hbWUiLCJmaW5kU2NhbGFyVGFnQnlUZXN0IiwiZW1wdHlTY2FsYXJQb3NpdGlvbiIsImJlZm9yZSIsImlzU3JjVG9rZW4iLCJhbGlhcyIsImNvbXBvc2VBbGlhcyIsIm5sIiwibGFzdFByb3AiLCJleHBUeXBlIiwiY29tcG9zZUNvbGxlY3Rpb24iLCJnZXRFcnJvclBvcyIsInBhcnNlUHJlbHVkZSIsInByZWx1ZGUiLCJhdENvbW1lbnQiLCJhZnRlckVtcHR5TGluZSIsIkNvbXBvc2VyIiwiYXREaXJlY3RpdmVzIiwiZGVjb3JhdGUiLCJhZnRlckRvYyIsImFwcGx5Iiwic3RyZWFtSW5mbyIsImNvbXBvc2UiLCJmb3JjZURvYyIsImVuZE9mZnNldCIsIm9wdHMiLCJjb250ZW50RW5kIiwiY29tcG9zZURvYyIsImFkZEVuZHRvQmxvY2tQcm9wcyIsInNldEZsb3dTY2FsYXJWYWx1ZSIsIm9hIiwidG9rIiwic3RyaW5naWZ5VG9rZW4iLCJzdHJpbmdpZnlJdGVtIiwiY3N0IiwiX3Zpc2l0IiwiZmllbGQiLCJpdGVtQXRQYXRoIiwiaW5kZXgiLCJwYXJlbnRDb2xsZWN0aW9uIiwiQk9NIiwiRE9DVU1FTlQiLCJGTE9XX0VORCIsInRva2VuVHlwZSIsImNvbnRleHQiLCJoZSIsImhlYWQiLCJhZnRlcktleSIsInNldEJsb2NrU2NhbGFyVmFsdWUiLCJpc0VtcHR5IiwiaGV4RGlnaXRzIiwidGFnQ2hhcnMiLCJmbG93SW5kaWNhdG9yQ2hhcnMiLCJpbnZhbGlkQW5jaG9yQ2hhcnMiLCJpc05vdEFuY2hvckNoYXIiLCJMZXhlciIsImF0RW5kIiwiYmxvY2tTY2FsYXJJbmRlbnQiLCJibG9ja1NjYWxhcktlZXAiLCJmbG93S2V5IiwiZmxvd0xldmVsIiwiaW5kZW50TmV4dCIsImluZGVudFZhbHVlIiwibGluZUVuZFBvcyIsImxleCIsImluY29tcGxldGUiLCJoYXNDaGFycyIsInBhcnNlTmV4dCIsImF0TGluZUVuZCIsImNoYXJBdCIsImNvbnRpbnVlU2NhbGFyIiwiZHQiLCJnZXRMaW5lIiwic2V0TmV4dCIsInN0YXRlIiwicGVlayIsInBhcnNlU3RyZWFtIiwicGFyc2VMaW5lU3RhcnQiLCJwYXJzZUJsb2NrU3RhcnQiLCJwYXJzZURvY3VtZW50IiwicGFyc2VGbG93Q29sbGVjdGlvbiIsInBhcnNlUXVvdGVkU2NhbGFyIiwicGFyc2VCbG9ja1NjYWxhciIsInBhcnNlUGxhaW5TY2FsYXIiLCJwdXNoQ291bnQiLCJkaXJFbmQiLCJwdXNoU3BhY2VzIiwicHVzaE5ld2xpbmUiLCJzcCIsImNoMCIsImNoMSIsInB1c2hJbmRpY2F0b3JzIiwicHVzaFVudGlsIiwicXVvdGUiLCJxYiIsInB1c2hUb0luZGV4IiwibGFzdENoYXIiLCJhbGxvd0VtcHR5IiwicHVzaFRhZyIsImFsbG93VGFicyIsIkxpbmVDb3VudGVyIiwiYWRkTmV3TGluZSIsImxvdyIsImhpZ2giLCJtaWQiLCJpbmNsdWRlc1Rva2VuIiwibGlzdCIsImZpbmROb25FbXB0eUluZGV4IiwiaXNGbG93VG9rZW4iLCJnZXRQcmV2UHJvcHMiLCJnZXRGaXJzdEtleVN0YXJ0UHJvcHMiLCJmaXhGbG93U2VxSXRlbXMiLCJQYXJzZXIiLCJvbk5ld0xpbmUiLCJhdE5ld0xpbmUiLCJhdFNjYWxhciIsIm9uS2V5TGluZSIsInN0YWNrIiwibGV4ZXIiLCJwYXJzZSIsImxleGVtZSIsInN0ZXAiLCJwb3AiLCJzb3VyY2VUb2tlbiIsInRvcCIsInN0cmVhbSIsImRvY3VtZW50IiwiYmxvY2tTY2FsYXIiLCJibG9ja01hcCIsImJsb2NrU2VxdWVuY2UiLCJmbG93Q29sbGVjdGlvbiIsImRvY3VtZW50RW5kIiwibGluZUVuZCIsImJ2Iiwic3RhcnRCbG9ja1ZhbHVlIiwiYXRJbmRlbnRlZENvbW1lbnQiLCJhdE1hcEluZGVudCIsImF0TmV4dEl0ZW0iLCJmcyIsImZsb3dTY2FsYXIiLCJwYXJzZU9wdGlvbnMiLCJsaW5lQ291bnRlciIsInBhcnNlciIsImNvbXBvc2VyIiwiX2RvYyIsImZvckVhY2giLCJfcmV2aXZlciIsImRvY3MiLCJlbXB0eSIsInBhcnNlQ29tbWFuZExpbmVBcmdzIiwiYXJnc1N0cmluZyIsInJlc3VsdCIsImN1cnJlbnQiLCJpbkRvdWJsZVF1b3RlIiwiaW5TaW5nbGVRdW90ZSIsImNoYXIiLCJidWlsZEFpZGVyQXJncyIsImFyZ3MiLCJhaWRlckFyZ3MiLCJhaWRlckV4dHJhQXJncyIsImRyeVJ1biIsInByb21wdCIsInJlc29sdXRpb25QbGFuIiwiZmlsZVBhdGhzIiwiT1BFTkFJX01PREVMX1BSRUZJWEVTIiwicnVuQ29tbWFuZCIsImNvbW1hbmQiLCJpZ25vcmVFeGl0U3RhdHVzIiwic3Bhd25PcHRpb25zIiwiaW5mbyIsImFuc2lzIiwicmV0Iiwic3Bhd25Bc3luYyIsInN0ZGVyciIsInN0YXR1cyIsImV4aXQiLCJQcm9taXNlIiwicmVqZWN0Iiwic2FuaXRpemVkQXJncyIsInByb2MiLCJzcGF3biIsInNldEVuY29kaW5nIiwib24iLCJ3cml0ZSIsInNpZ25hbCIsInBpZCIsIlJFUE9NSVhfRklMRV9OQU1FIiwicGxhbkNvZGVDaGFuZ2VzIiwibW9kZWwiLCJpc3N1ZUNvbnRlbnQiLCJkZXRhaWxlZFBsYW4iLCJyZWFzb25pbmdFZmZvcnQiLCJyZXBvbWl4RXh0cmFBcmdzIiwidXJsIiwiYXBpS2V5IiwiR0VNSU5JX0FQSV9LRVkiLCJPUEVOQUlfQVBJX0tFWSIsImdldEFwaVVybEFuZEtleSIsInJlcG9taXhBcmdzIiwicmVhZEZpbGVTeW5jIiwicHJvbWlzZXMiLCJybSIsImZvcmNlIiwicGxhbkZvcm1hdCIsIllBTUwiLCJyZXNwb25zZSIsIm1lc3NhZ2VzIiwicmVxdWVzdEJvZHkiLCJyZWFzb25pbmdfZWZmb3J0IiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsIm9rIiwiZXJyb3JUZXh0Iiwic3RhdHVzVGV4dCIsImNob2ljZXMiLCJjYWxsTGxtQXBpIiwicm9sZSIsInBsYW5IZWFkZXIiLCJmaWxlc0hlYWRlciIsInBsYW4iLCJwbGFuSGVhZGVySW5kZXgiLCJmaWxlc0hlYWRlckluZGV4IiwicGxhbkNvbnRlbnRTdGFydEluZGV4IiwicGxhbkNvbnRlbnRFbmRJbmRleCIsImZpbGVzQ29udGVudFN0YXJ0SW5kZXgiLCJmaWxlUGF0aFJlZ2V4IiwibWF0Y2hBbGwiLCJydW5BaWRlckZpeCIsInRlc3RDb21tYW5kIiwiYWlkZXJSZXN1bHQiLCJtYWluIiwiZ2l0aHViTmFtZU91dHB1dCIsIm5hbWVUb1NldCIsImdpdGh1YkVtYWlsT3V0cHV0IiwiZW1haWxUb1NldCIsImNvbmZpZ3VyZUdpdFVzZXJEZXRhaWxzSWZOZWVkZWQiLCJpc3N1ZVJlc3VsdCIsImlzc3VlTnVtYmVyIiwiaXNzdWUiLCJjbGVhbmVkSXNzdWVCb2R5IiwiaXNzdWVPYmplY3QiLCJhdXRob3IiLCJsb2dpbiIsInRpdGxlIiwiY29tbWVudHMiLCJpc3N1ZVRleHQiLCJwbGFubmluZ01vZGVsIiwicGxhblRleHQiLCJub3ciLCJicmFuY2hOYW1lIiwiZ2V0RnVsbFllYXIiLCJnZXRUd29EaWdpdHMiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiYWlkZXJBbnN3ZXIiLCJtYXhBdHRlbXB0cyIsIm1heFRlc3RBdHRlbXB0cyIsImF0dGVtcHRzIiwiZml4UmVzdWx0IiwiY29tbWFuZFByb2dyYW0iLCJjb21tYW5kQXJncyIsInRlc3RSZXN1bHQiLCJjd2QiLCJ0ZXN0QW5kRml4IiwicHJUaXRsZSIsImNoaWxkX3Byb2Nlc3MiLCJzcGF3blN5bmMiLCJlbmNvZGluZyIsInN0ZGlvIiwicHJCb2R5IiwicmVwbGFjZUFsbCIsInJlcG9OYW1lIiwicmVwb1VybFJlc3VsdCIsInJlcG9NYXRjaCIsImdldEdpdFJlcG9OYW1lIiwiQVdTX1JFR0lPTl9OQU1FIl0sIm1hcHBpbmdzIjoiOFRBQ08sTUFBTUEsRUFDWCxnR0FDV0MsRUFBNkIsd0VBQzdCQyxFQUE0Qiw4RENKekMsSUFBSUMsRUFBRUMsRUFBRUMsR0FBR0MsZUFBZUMsRUFBRUMsZUFBZUMsRUFBRUMsT0FBT0MsRUFBRUMsS0FBS0MsR0FBR0MsT0FBT0MsRUFBRSxJQUFJQyxNQUFNQyxFQUFFQyxJQUFJQyxHQUFHQyxLQUFLQyxFQUFFbEIsSUFBSSxJQUFJQyxFQUFFLGtCQUFrQmtCLEtBQUtuQixLQUFLLEdBQUdFLEVBQUVELEdBQUdtQixPQUFPaEIsRUFBRWlCLFNBQVMsRUFBRW5CLEVBQUUsRUFBRUEsRUFBRSxJQUFJRCxFQUFFLEdBQUdBLEVBQUUsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLEdBQUdBLEVBQUUsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLElBQUksTUFBTSxDQUFDRyxHQUFHLEdBQUcsSUFBSUEsR0FBRyxFQUFFLElBQUksSUFBSUEsRUFBQyxFQUFHa0IsRUFBRSxDQUFDdEIsRUFBRUMsRUFBRUMsSUFBSUYsRUFBRUMsR0FBR0EsRUFBRUMsRUFBRSxHQUFHLEdBQUdZLEVBQUVkLEVBQUUsSUFBSSxFQUFFYyxFQUFFYixFQUFFLElBQUlhLEVBQUVaLEVBQUUsSUFBSSxFQUFF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MDVCLEVBQVMsV0FBV3B0QixFQUFRaXJCLGtCQUVoQ1UsTUFTQSxHQVBBeUIsR0FBVSw4QkFJVmYsRUFBWTk2QixNQUFNLEVBdEdNLEtBc0dpQjY3QixFQUFPbitCLG9CQUVoRG0rQixFQUFTQSxFQUFPQyxXQUFXLGlCQUFrQixRQUFRMXlCLE9BQ2hEcUYsRUFBUWttQixPQUlYM2MsUUFBUW9kLEtBQUtDLEVBQU0xeUIsT0FBTywrQkFBK0I2NEIsTUFDekR4akIsUUFBUW9kLEtBQUtDLEVBQU0xeUIsT0FBTyw2REFBNkQ4TCxFQUFRaXJCLG9CQUw1RSxDQUNuQixNQUFNcUMsRUFlVixXQUNFLE1BQU1DLEVBQWdCUCxFQUFjQyxVQUFVLE1BQU8sQ0FBQyxTQUFVLFVBQVcsVUFBVyxDQUNwRkMsU0FBVSxPQUNWQyxNQUFPLFNBR0hLLEVBRFVELEVBQWNoOUIsT0FBT29LLE9BQ1hTLE1BQU0sNkNBQ2hDLE9BQU9veUIsRUFBWUEsRUFBVSxHQUFLLEVBQ3BDLENBdkJxQkMsU0FDWGxILEdBQVcsS0FBTSxDQUFDLEtBQU0sU0FBVSxVQUFXd0csRUFBUyxTQUFVSyxFQUFRLFNBQVVFLEdBQzFGLENBS0EvakIsUUFBUW9kLEtBQUssWUFBWTNtQixFQUFRaXJCLHVDQUNqQzFoQixRQUFRb2QsS0FBSyxtQkFBb0JsM0IsUUFBUUUsSUFBSSs5QixnQkFDL0MsQ0FFQSxTQUFTM0IsR0FBYTk1QixHQUNwQixPQUFPWixPQUFPWSxHQUFPMmYsU0FBUyxFQUFHLElBQ25DIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzEsMiwzLDQsNSw2LDcsOCw5LDEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5LDIwLDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDQ2LDQ3LDQ4LDQ5LDUwLDUxLDUyLDUzLDU0LDU1LDU2LDU3LDU4LDU5LDYwLDYxLDYyLDYzLDY0LDY1LDY2LDY3LDY4LDY5LDcwLDcxLDcyLDczXX0=
