import t from"node:process";import{strictEqual as e,notStrictEqual as n}from"node:assert";import{resolve as s,dirname as i,normalize as r,relative as o,extname as a,basename as l}from"node:path";import{statSync as c,readdirSync as h,readFileSync as f,writeFile as u}from"node:fs";import{format as d,inspect as p}from"node:util";import{fileURLToPath as g}from"node:url";import{a as m,b as y,D as b,m as v}from"./main-jzYxwPOi.js";import"node:child_process";const w={right:function(t,e){t=t.trim();const n=_.stringWidth(t);if(n<e)return" ".repeat(e-n)+t;return t},center:function(t,e){t=t.trim();const n=_.stringWidth(t);if(n>=e)return t;return" ".repeat(e-n>>1)+t}};class O{constructor(t){var e;this.width=t.width,this.wrap=null===(e=t.wrap)||void 0===e||e,this.rows=[]}span(...t){this.div(...t).span=!0}resetOutput(){this.rows=[]}div(...t){if(0===t.length&&this.div(""),this.wrap&&this.shouldApplyLayoutDSL(...t)&&"string"==typeof t[0])return this.applyLayoutDSL(t[0]);const e=t.map((t=>"string"==typeof t?this.colFromString(t):t));return this.rows.push(e),e}shouldApplyLayoutDSL(...t){return 1===t.length&&"string"==typeof t[0]&&/[\t\n]/.test(t[0])}applyLayoutDSL(t){const e=t.split("\n").map((t=>t.split("\t")));let n=0;return e.forEach((t=>{t.length>1&&_.stringWidth(t[0])>n&&(n=Math.min(Math.floor(.5*this.width),_.stringWidth(t[0])))})),e.forEach((t=>{this.div(...t.map(((e,s)=>({text:e.trim(),padding:this.measurePadding(e),width:0===s&&t.length>1?n:void 0}))))})),this.rows[this.rows.length-1]}colFromString(t){return{text:t,padding:this.measurePadding(t)}}measurePadding(t){const e=_.stripAnsi(t);return[0,e.match(/\s*$/)[0].length,0,e.match(/^\s*/)[0].length]}toString(){const t=[];return this.rows.forEach((e=>{this.rowToString(e,t)})),t.filter((t=>!t.hidden)).map((t=>t.text)).join("\n")}rowToString(t,e){return this.rasterize(t).forEach(((n,s)=>{let i="";n.forEach(((n,r)=>{const{width:o}=t[r],a=this.negatePadding(t[r]);let l=n;if(a>_.stringWidth(n)&&(l+=" ".repeat(a-_.stringWidth(n))),t[r].align&&"left"!==t[r].align&&this.wrap){l=(0,w[t[r].align])(l,a),_.stringWidth(l)<a&&(l+=" ".repeat((o||0)-_.stringWidth(l)-1))}const c=t[r].padding||[0,0,0,0];c[3]&&(i+=" ".repeat(c[3])),i+=j(t[r],l,"| "),i+=l,i+=j(t[r],l," |"),c[1]&&(i+=" ".repeat(c[1])),0===s&&e.length>0&&(i=this.renderInline(i,e[e.length-1]))})),e.push({text:i.replace(/ +$/,""),span:t.span})})),e}renderInline(t,e){const n=t.match(/^ */),s=n?n[0].length:0,i=e.text,r=_.stringWidth(i.trimRight());return e.span?this.wrap?s<r?t:(e.hidden=!0,i.trimRight()+" ".repeat(s-r)+t.trimLeft()):(e.hidden=!0,i+t):t}rasterize(t){const e=[],n=this.columnWidths(t);let s;return t.forEach(((t,i)=>{t.width=n[i],s=this.wrap?_.wrap(t.text,this.negatePadding(t),{hard:!0}).split("\n"):t.text.split("\n"),t.border&&(s.unshift("."+"-".repeat(this.negatePadding(t)+2)+"."),s.push("'"+"-".repeat(this.negatePadding(t)+2)+"'")),t.padding&&(s.unshift(...new Array(t.padding[0]||0).fill("")),s.push(...new Array(t.padding[2]||0).fill(""))),s.forEach(((t,n)=>{e[n]||e.push([]);const s=e[n];for(let t=0;t<i;t++)void 0===s[t]&&s.push("");s.push(t)}))})),e}negatePadding(t){let e=t.width||0;return t.padding&&(e-=(t.padding[3]||0)+(t.padding[1]||0)),t.border&&(e-=4),e}columnWidths(t){if(!this.wrap)return t.map((t=>t.width||_.stringWidth(t.text)));let e=t.length,n=this.width;const s=t.map((t=>{if(t.width)return e--,n-=t.width,t.width})),i=e?Math.floor(n/e):0;return s.map(((e,n)=>void 0===e?Math.max(i,function(t){const e=t.padding||[],n=1+(e[3]||0)+(e[1]||0);if(t.border)return n+4;return n}(t[n])):e))}}function j(t,e,n){return t.border?/[.']-+[.']/.test(e)?"":0!==e.trim().length?n:"  ":""}let _;const A=new RegExp("(?:\\[(?:\\d+[ABCDEFGJKSTm]|\\d+;\\d+[Hfm]|\\d+;\\d+;\\d+m|6n|s|u|\\?25[lh])|\\w)","g");function E(t){return t.replace(A,"")}function C(t,e){const[n,s]=t.match(A)||["",""];t=E(t);let i="";for(let n=0;n<t.length;n++)0!==n&&n%e==0&&(i+="\n"),i+=t.charAt(n);return n&&s&&(i=`${n}${i}${s}`),i}
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
function k(t){if(t!==t.toLowerCase()&&t!==t.toUpperCase()||(t=t.toLowerCase()),-1===t.indexOf("-")&&-1===t.indexOf("_"))return t;{let e="",n=!1;const s=t.match(/^-+/);for(let i=s?s[0].length:0;i<t.length;i++){let s=t.charAt(i);n&&(n=!1,s=s.toUpperCase()),0===i||"-"!==s&&"_"!==s?"-"!==s&&"_"!==s&&(e+=s):n=!0}return e}}function x(t,e){const n=t.toLowerCase();e=e||"-";let s="";for(let i=0;i<t.length;i++){const r=n.charAt(i),o=t.charAt(i);s+=r!==o&&i>0?`${e}${n.charAt(i)}`:o}return s}function M(t){return null!=t&&("number"==typeof t||(!!/^0x[0-9a-f]+$/i.test(t)||!/^0[^.]/.test(t)&&/^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(t)))}
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
var S;
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
let P;!function(t){t.BOOLEAN="boolean",t.STRING="string",t.NUMBER="number",t.ARRAY="array"}(S||(S={}));function $(t){return void 0!==t?t+1:1}function I(t){return"__proto__"===t?"___proto___":t}
/**
 * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js
 * CJS and ESM environments.
 *
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
var N,W,L;const D=process&&process.env&&process.env.YARGS_MIN_NODE_VERSION?Number(process.env.YARGS_MIN_NODE_VERSION):12,z=null!==(W=null===(N=null===process||void 0===process?void 0:process.versions)||void 0===N?void 0:N.node)&&void 0!==W?W:null===(L=null===process||void 0===process?void 0:process.version)||void 0===L?void 0:L.slice(1);if(z){if(Number(z.match(/^([^.]+)/)[1])<D)throw Error(`yargs parser supports a minimum Node.js version of ${D}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`)}const F=process?process.env:{},H=new class{constructor(t){P=t}parse(t,e){const n=Object.assign({alias:void 0,array:void 0,boolean:void 0,config:void 0,configObjects:void 0,configuration:void 0,coerce:void 0,count:void 0,default:void 0,envPrefix:void 0,narg:void 0,normalize:void 0,string:void 0,number:void 0,__:void 0,key:void 0},e),s=function(t){if(Array.isArray(t))return t.map((t=>"string"!=typeof t?t+"":t));t=t.trim();let e=0,n=null,s=null,i=null;const r=[];for(let o=0;o<t.length;o++)n=s,s=t.charAt(o)," "!==s||i?(s===i?i=null:"'"!==s&&'"'!==s||i||(i=s),r[e]||(r[e]=""),r[e]+=s):" "!==n&&e++;return r}(t),i="string"==typeof t,r=function(t){const e=[],n=Object.create(null);let s=!0;Object.keys(t).forEach((function(n){e.push([].concat(t[n],n))}));for(;s;){s=!1;for(let t=0;t<e.length;t++)for(let n=t+1;n<e.length;n++){if(e[t].filter((function(t){return-1!==e[n].indexOf(t)})).length){e[t]=e[t].concat(e[n]),e.splice(n,1),s=!0;break}}}return e.forEach((function(t){const e=(t=t.filter((function(t,e,n){return n.indexOf(t)===e}))).pop();void 0!==e&&"string"==typeof e&&(n[e]=t)})),n}(Object.assign(Object.create(null),n.alias)),o=Object.assign({"boolean-negation":!0,"camel-case-expansion":!0,"combine-arrays":!1,"dot-notation":!0,"duplicate-arguments-array":!0,"flatten-duplicate-arrays":!0,"greedy-arrays":!0,"halt-at-non-option":!1,"nargs-eats-options":!1,"negation-prefix":"no-","parse-numbers":!0,"parse-positional-numbers":!0,"populate--":!1,"set-placeholder-key":!1,"short-option-groups":!0,"strip-aliased":!1,"strip-dashed":!1,"unknown-options-as-args":!1},n.configuration),a=Object.assign(Object.create(null),n.default),l=n.configObjects||[],c=n.envPrefix,h=o["populate--"],f=h?"--":"_",u=Object.create(null),d=Object.create(null),p=n.__||P.format,g={aliases:Object.create(null),arrays:Object.create(null),bools:Object.create(null),strings:Object.create(null),numbers:Object.create(null),counts:Object.create(null),normalize:Object.create(null),configs:Object.create(null),nargs:Object.create(null),coercions:Object.create(null),keys:[]},m=/^-([0-9]+(\.[0-9]+)?|\.[0-9]+)$/,y=new RegExp("^--"+o["negation-prefix"]+"(.+)");[].concat(n.array||[]).filter(Boolean).forEach((function(t){const e="object"==typeof t?t.key:t,n=Object.keys(t).map((function(t){return{boolean:"bools",string:"strings",number:"numbers"}[t]})).filter(Boolean).pop();n&&(g[n][e]=!0),g.arrays[e]=!0,g.keys.push(e)})),[].concat(n.boolean||[]).filter(Boolean).forEach((function(t){g.bools[t]=!0,g.keys.push(t)})),[].concat(n.string||[]).filter(Boolean).forEach((function(t){g.strings[t]=!0,g.keys.push(t)})),[].concat(n.number||[]).filter(Boolean).forEach((function(t){g.numbers[t]=!0,g.keys.push(t)})),[].concat(n.count||[]).filter(Boolean).forEach((function(t){g.counts[t]=!0,g.keys.push(t)})),[].concat(n.normalize||[]).filter(Boolean).forEach((function(t){g.normalize[t]=!0,g.keys.push(t)})),"object"==typeof n.narg&&Object.entries(n.narg).forEach((([t,e])=>{"number"==typeof e&&(g.nargs[t]=e,g.keys.push(t))})),"object"==typeof n.coerce&&Object.entries(n.coerce).forEach((([t,e])=>{"function"==typeof e&&(g.coercions[t]=e,g.keys.push(t))})),void 0!==n.config&&(Array.isArray(n.config)||"string"==typeof n.config?[].concat(n.config).filter(Boolean).forEach((function(t){g.configs[t]=!0})):"object"==typeof n.config&&Object.entries(n.config).forEach((([t,e])=>{"boolean"!=typeof e&&"function"!=typeof e||(g.configs[t]=e)}))),function(...t){t.forEach((function(t){Object.keys(t||{}).forEach((function(t){g.aliases[t]||(g.aliases[t]=[].concat(r[t]||[]),g.aliases[t].concat(t).forEach((function(e){if(/-/.test(e)&&o["camel-case-expansion"]){const n=k(e);n!==t&&-1===g.aliases[t].indexOf(n)&&(g.aliases[t].push(n),u[n]=!0)}})),g.aliases[t].concat(t).forEach((function(e){if(e.length>1&&/[A-Z]/.test(e)&&o["camel-case-expansion"]){const n=x(e,"-");n!==t&&-1===g.aliases[t].indexOf(n)&&(g.aliases[t].push(n),u[n]=!0)}})),g.aliases[t].forEach((function(e){g.aliases[e]=[t].concat(g.aliases[t].filter((function(t){return e!==t})))})))}))}))}(n.key,r,n.default,g.arrays),Object.keys(a).forEach((function(t){(g.aliases[t]||[]).forEach((function(e){a[e]=a[t]}))}));let b=null;Object.keys(g.counts).find((t=>U(t,g.arrays)?(b=Error(p("Invalid configuration: %s, opts.count excludes opts.array.",t)),!0):!!U(t,g.nargs)&&(b=Error(p("Invalid configuration: %s, opts.count excludes opts.narg.",t)),!0)));let v=[];const w=Object.assign(Object.create(null),{_:[]}),O={};for(let t=0;t<s.length;t++){const e=s[t],n=e.replace(/^-{3,}/,"---");let i,r,a,l,c,h;if("--"!==e&&/^-/.test(e)&&q(e))j(e);else{if(n.match(/^---+(=|$)/)){j(e);continue}if(e.match(/^--.+=/)||!o["short-option-groups"]&&e.match(/^-.+=/))l=e.match(/^--?([^=]+)=([\s\S]*)$/),null!==l&&Array.isArray(l)&&l.length>=3&&(U(l[1],g.arrays)?t=A(t,l[1],s,l[2]):!1!==U(l[1],g.nargs)?t=_(t,l[1],s,l[2]):E(l[1],l[2],!0));else if(e.match(y)&&o["boolean-negation"])l=e.match(y),null!==l&&Array.isArray(l)&&l.length>=2&&(r=l[1],E(r,!!U(r,g.arrays)&&[!1]));else if(e.match(/^--.+/)||!o["short-option-groups"]&&e.match(/^-[^-]+/))l=e.match(/^--?(.+)/),null!==l&&Array.isArray(l)&&l.length>=2&&(r=l[1],U(r,g.arrays)?t=A(t,r,s):!1!==U(r,g.nargs)?t=_(t,r,s):(c=s[t+1],void 0===c||c.match(/^-/)&&!c.match(m)||U(r,g.bools)||U(r,g.counts)?/^(true|false)$/.test(c)?(E(r,c),t++):E(r,B(r)):(E(r,c),t++)));else if(e.match(/^-.\..+=/))l=e.match(/^-([^=]+)=([\s\S]*)$/),null!==l&&Array.isArray(l)&&l.length>=3&&E(l[1],l[2]);else if(e.match(/^-.\..+/)&&!e.match(m))c=s[t+1],l=e.match(/^-(.\..+)/),null!==l&&Array.isArray(l)&&l.length>=2&&(r=l[1],void 0===c||c.match(/^-/)||U(r,g.bools)||U(r,g.counts)?E(r,B(r)):(E(r,c),t++));else if(e.match(/^-[^-]+/)&&!e.match(m)){a=e.slice(1,-1).split(""),i=!1;for(let n=0;n<a.length;n++){if(c=e.slice(n+2),a[n+1]&&"="===a[n+1]){h=e.slice(n+3),r=a[n],U(r,g.arrays)?t=A(t,r,s,h):!1!==U(r,g.nargs)?t=_(t,r,s,h):E(r,h),i=!0;break}if("-"!==c){if(/[A-Za-z]/.test(a[n])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(c)&&!1===U(c,g.bools)){E(a[n],c),i=!0;break}if(a[n+1]&&a[n+1].match(/\W/)){E(a[n],c),i=!0;break}E(a[n],B(a[n]))}else E(a[n],c)}r=e.slice(-1)[0],i||"-"===r||(U(r,g.arrays)?t=A(t,r,s):!1!==U(r,g.nargs)?t=_(t,r,s):(c=s[t+1],void 0===c||/^(-|--)[^-]/.test(c)&&!c.match(m)||U(r,g.bools)||U(r,g.counts)?/^(true|false)$/.test(c)?(E(r,c),t++):E(r,B(r)):(E(r,c),t++)))}else if(e.match(/^-[0-9]$/)&&e.match(m)&&U(e.slice(1),g.bools))r=e.slice(1),E(r,B(r));else{if("--"===e){v=s.slice(t+1);break}if(o["halt-at-non-option"]){v=s.slice(t);break}j(e)}}}function j(t){const e=W("_",t);"string"!=typeof e&&"number"!=typeof e||w._.push(e)}function _(t,e,n,s){let i,r=U(e,g.nargs);if(r="number"!=typeof r||isNaN(r)?1:r,0===r)return G(s)||(b=Error(p("Argument unexpected for: %s",e))),E(e,B(e)),t;let a=G(s)?0:1;if(o["nargs-eats-options"])n.length-(t+1)+a<r&&(b=Error(p("Not enough arguments following: %s",e))),a=r;else{for(i=t+1;i<n.length&&(!n[i].match(/^-[^0-9]/)||n[i].match(m)||q(n[i]));i++)a++;a<r&&(b=Error(p("Not enough arguments following: %s",e)))}let l=Math.min(a,r);for(!G(s)&&l>0&&(E(e,s),l--),i=t+1;i<l+t+1;i++)E(e,n[i]);return t+l}function A(t,e,n,s){let r=[],l=s||n[t+1];const c=U(e,g.nargs);if(U(e,g.bools)&&!/^(true|false)$/.test(l))r.push(!0);else if(G(l)||G(s)&&/^-/.test(l)&&!m.test(l)&&!q(l)){if(void 0!==a[e]){const t=a[e];r=Array.isArray(t)?t:[t]}}else{G(s)||r.push(N(e,s,!0));for(let s=t+1;s<n.length&&!(!o["greedy-arrays"]&&r.length>0||c&&"number"==typeof c&&r.length>=c)&&(l=n[s],!/^-/.test(l)||m.test(l)||q(l));s++)t=s,r.push(N(e,l,i))}return"number"==typeof c&&(c&&r.length<c||isNaN(c)&&0===r.length)&&(b=Error(p("Not enough arguments following: %s",e))),E(e,r),t}function E(t,e,n=i){if(/-/.test(t)&&o["camel-case-expansion"]){const e=t.split(".").map((function(t){return k(t)})).join(".");C(t,e)}const s=N(t,e,n),r=t.split(".");if(H(w,r,s),g.aliases[t]&&g.aliases[t].forEach((function(t){const e=t.split(".");H(w,e,s)})),r.length>1&&o["dot-notation"]&&(g.aliases[r[0]]||[]).forEach((function(e){let n=e.split(".");const i=[].concat(r);i.shift(),n=n.concat(i),(g.aliases[t]||[]).includes(n.join("."))||H(w,n,s)})),U(t,g.normalize)&&!U(t,g.arrays)){[t].concat(g.aliases[t]||[]).forEach((function(t){Object.defineProperty(O,t,{enumerable:!0,get:()=>e,set(t){e="string"==typeof t?P.normalize(t):t}})}))}}function C(t,e){g.aliases[t]&&g.aliases[t].length||(g.aliases[t]=[e],u[e]=!0),g.aliases[e]&&g.aliases[e].length||C(e,t)}function N(t,e,n){n&&(e=function(t){return"string"!=typeof t||"'"!==t[0]&&'"'!==t[0]||t[t.length-1]!==t[0]?t:t.substring(1,t.length-1)}(e)),(U(t,g.bools)||U(t,g.counts))&&"string"==typeof e&&(e="true"===e);let s=Array.isArray(e)?e.map((function(e){return W(t,e)})):W(t,e);return U(t,g.counts)&&(G(s)||"boolean"==typeof s)&&(s=$()),U(t,g.normalize)&&U(t,g.arrays)&&(s=Array.isArray(e)?e.map((t=>P.normalize(t))):P.normalize(e)),s}function W(t,e){if(!o["parse-positional-numbers"]&&"_"===t)return e;if(!U(t,g.strings)&&!U(t,g.bools)&&!Array.isArray(e)){(M(e)&&o["parse-numbers"]&&Number.isSafeInteger(Math.floor(parseFloat(`${e}`)))||!G(e)&&U(t,g.numbers))&&(e=Number(e))}return e}function L(t,e){Object.keys(t).forEach((function(n){const s=t[n],i=e?e+"."+n:n;"object"==typeof s&&null!==s&&!Array.isArray(s)&&o["dot-notation"]?L(s,i):(!F(w,i.split("."))||U(i,g.arrays)&&o["combine-arrays"])&&E(i,s)}))}function D(t,e){if(void 0===c)return;const n="string"==typeof c?c:"",s=P.env();Object.keys(s).forEach((function(i){if(""===n||0===i.lastIndexOf(n,0)){const r=i.split("__").map((function(t,e){return 0===e&&(t=t.substring(n.length)),k(t)}));(e&&g.configs[r.join(".")]||!e)&&!F(t,r)&&E(r.join("."),s[i])}}))}function z(t,e,n,s=!1){Object.keys(n).forEach((function(i){F(t,i.split("."))||(H(t,i.split("."),n[i]),s&&(d[i]=!0),(e[i]||[]).forEach((function(e){F(t,e.split("."))||H(t,e.split("."),n[i])})))}))}function F(t,e){let n=t;o["dot-notation"]||(e=[e.join(".")]),e.slice(0,-1).forEach((function(t){n=n[t]||{}}));const s=e[e.length-1];return"object"==typeof n&&s in n}function H(t,e,n){let s=t;o["dot-notation"]||(e=[e.join(".")]),e.slice(0,-1).forEach((function(t){t=I(t),"object"==typeof s&&void 0===s[t]&&(s[t]={}),"object"!=typeof s[t]||Array.isArray(s[t])?(Array.isArray(s[t])?s[t].push({}):s[t]=[s[t],{}],s=s[t][s[t].length-1]):s=s[t]}));const i=I(e[e.length-1]),r=U(e.join("."),g.arrays),a=Array.isArray(n);let l=o["duplicate-arguments-array"];!l&&U(i,g.nargs)&&(l=!0,(!G(s[i])&&1===g.nargs[i]||Array.isArray(s[i])&&s[i].length===g.nargs[i])&&(s[i]=void 0)),n===$()?s[i]=$(s[i]):Array.isArray(s[i])?l&&r&&a?s[i]=o["flatten-duplicate-arrays"]?s[i].concat(n):(Array.isArray(s[i][0])?s[i]:[s[i]]).concat([n]):l||Boolean(r)!==Boolean(a)?s[i]=s[i].concat([n]):s[i]=n:void 0===s[i]&&r?s[i]=a?n:[n]:!l||void 0===s[i]||U(i,g.counts)||U(i,g.bools)?s[i]=n:s[i]=[s[i],n]}function U(t,e){const n=[].concat(g.aliases[t]||[],t),s=Object.keys(e),i=n.find((t=>s.includes(t)));return!!i&&e[i]}function R(t){const e=Object.keys(g);return[].concat(e.map((t=>g[t]))).some((function(e){return Array.isArray(e)?e.includes(t):e[t]}))}function q(t){return o["unknown-options-as-args"]&&function(t){if(t=t.replace(/^-{3,}/,"--"),t.match(m))return!1;if(function(t){if(t.match(m)||!t.match(/^-[^-]+/))return!1;let e,n=!0;const s=t.slice(1).split("");for(let i=0;i<s.length;i++){if(e=t.slice(i+2),!R(s[i])){n=!1;break}if(s[i+1]&&"="===s[i+1]||"-"===e||/[A-Za-z]/.test(s[i])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(e)||s[i+1]&&s[i+1].match(/\W/))break}return n}(t))return!1;return!function(t,...e){return[].concat(...e).some((function(e){const n=t.match(e);return n&&R(n[1])}))}(t,/^-+([^=]+?)=[\s\S]*$/,y,/^-+([^=]+?)$/,/^-+([^=]+?)-$/,/^-+([^=]+?\d+)$/,/^-+([^=]+?)\W+.*$/)}(t)}function B(t){return U(t,g.bools)||U(t,g.counts)||!(`${t}`in a)?(e=function(t){let e=S.BOOLEAN;return U(t,g.strings)?e=S.STRING:U(t,g.numbers)?e=S.NUMBER:U(t,g.bools)?e=S.BOOLEAN:U(t,g.arrays)&&(e=S.ARRAY),e}(t),{[S.BOOLEAN]:!0,[S.STRING]:"",[S.NUMBER]:void 0,[S.ARRAY]:[]}[e]):a[t];var e}function G(t){return void 0===t}return D(w,!0),D(w,!1),function(t){const e=Object.create(null);z(e,g.aliases,a),Object.keys(g.configs).forEach((function(n){const s=t[n]||e[n];if(s)try{let t=null;const e=P.resolve(P.cwd(),s),i=g.configs[n];if("function"==typeof i){try{t=i(e)}catch(e){t=e}if(t instanceof Error)return void(b=t)}else t=P.require(e);L(t)}catch(e){"PermissionDenied"===e.name?b=e:t[n]&&(b=Error(p("Invalid JSON config file: %s",s)))}}))}(w),void 0!==l&&l.forEach((function(t){L(t)})),z(w,g.aliases,a,!0),function(t){let e;const n=new Set;Object.keys(t).forEach((function(s){if(!n.has(s)&&(e=U(s,g.coercions),"function"==typeof e))try{const i=W(s,e(t[s]));[].concat(g.aliases[s]||[],s).forEach((e=>{n.add(e),t[e]=i}))}catch(t){b=t}}))}(w),o["set-placeholder-key"]&&function(t){g.keys.forEach((e=>{~e.indexOf(".")||void 0===t[e]&&(t[e]=void 0)}))}(w),Object.keys(g.counts).forEach((function(t){F(w,t.split("."))||E(t,0)})),h&&v.length&&(w[f]=[]),v.forEach((function(t){w[f].push(t)})),o["camel-case-expansion"]&&o["strip-dashed"]&&Object.keys(w).filter((t=>"--"!==t&&t.includes("-"))).forEach((t=>{delete w[t]})),o["strip-aliased"]&&[].concat(...Object.keys(r).map((t=>r[t]))).forEach((t=>{o["camel-case-expansion"]&&t.includes("-")&&delete w[t.split(".").map((t=>k(t))).join(".")],delete w[t]})),{aliases:Object.assign({},g.aliases),argv:Object.assign(O,w),configuration:o,defaulted:Object.assign({},d),error:b,newAliases:Object.assign({},u)}}}({cwd:process.cwd,env:()=>F,format:d,normalize:r,resolve:s,require:t=>{if("undefined"!=typeof require)return require(t);if(t.match(/\.json$/))return JSON.parse(f(t,"utf8"));throw Error("only .json config files are supported in ESM")}}),U=function(t,e){return H.parse(t.slice(),e).argv};function R(){return process.versions.electron&&!process.defaultApp?0:1}U.detailed=function(t,e){return H.parse(t.slice(),e)},U.camelCase=k,U.decamelize=x,U.looksLikeNumber=M;class q extends Error{constructor(t){super(t||"yargs error"),this.name="YError",Error.captureStackTrace&&Error.captureStackTrace(this,q)}}var B={fs:{readFileSync:f,writeFile:u},format:d,resolve:s,exists:t=>{try{return c(t).isFile()}catch(t){return!1}}};let G;class T{constructor(t){t=t||{},this.directory=t.directory||"./locales",this.updateFiles="boolean"!=typeof t.updateFiles||t.updateFiles,this.locale=t.locale||"en",this.fallbackToLanguage="boolean"!=typeof t.fallbackToLanguage||t.fallbackToLanguage,this.cache=Object.create(null),this.writeQueue=[]}__(...t){if("string"!=typeof arguments[0])return this._taggedLiteral(arguments[0],...arguments);const e=t.shift();let n=function(){};return"function"==typeof t[t.length-1]&&(n=t.pop()),n=n||function(){},this.cache[this.locale]||this._readLocaleFile(),!this.cache[this.locale][e]&&this.updateFiles?(this.cache[this.locale][e]=e,this._enqueueWrite({directory:this.directory,locale:this.locale,cb:n})):n(),G.format.apply(G.format,[this.cache[this.locale][e]||e].concat(t))}__n(){const t=Array.prototype.slice.call(arguments),e=t.shift(),n=t.shift(),s=t.shift();let i=function(){};"function"==typeof t[t.length-1]&&(i=t.pop()),this.cache[this.locale]||this._readLocaleFile();let r=1===s?e:n;if(this.cache[this.locale][e]){r=this.cache[this.locale][e][1===s?"one":"other"]}!this.cache[this.locale][e]&&this.updateFiles?(this.cache[this.locale][e]={one:e,other:n},this._enqueueWrite({directory:this.directory,locale:this.locale,cb:i})):i();const o=[r];return~r.indexOf("%d")&&o.push(s),G.format.apply(G.format,o.concat(t))}setLocale(t){this.locale=t}getLocale(){return this.locale}updateLocale(t){this.cache[this.locale]||this._readLocaleFile();for(const e in t)Object.prototype.hasOwnProperty.call(t,e)&&(this.cache[this.locale][e]=t[e])}_taggedLiteral(t,...e){let n="";return t.forEach((function(t,s){const i=e[s+1];n+=t,void 0!==i&&(n+="%s")})),this.__.apply(this,[n].concat([].slice.call(e,1)))}_enqueueWrite(t){this.writeQueue.push(t),1===this.writeQueue.length&&this._processWriteQueue()}_processWriteQueue(){const t=this,e=this.writeQueue[0],n=e.directory,s=e.locale,i=e.cb,r=this._resolveLocaleFile(n,s),o=JSON.stringify(this.cache[s],null,2);G.fs.writeFile(r,o,"utf-8",(function(e){t.writeQueue.shift(),t.writeQueue.length>0&&t._processWriteQueue(),i(e)}))}_readLocaleFile(){let t={};const e=this._resolveLocaleFile(this.directory,this.locale);try{G.fs.readFileSync&&(t=JSON.parse(G.fs.readFileSync(e,"utf-8")))}catch(n){if(n instanceof SyntaxError&&(n.message="syntax error in "+e),"ENOENT"!==n.code)throw n;t={}}this.cache[this.locale]=t}_resolveLocaleFile(t,e){let n=G.resolve(t,"./",e+".json");if(this.fallbackToLanguage&&!this._fileExistsSync(n)&&~e.lastIndexOf("_")){const s=G.resolve(t,"./",e.split("_")[0]+".json");this._fileExistsSync(s)&&(n=s)}return n}_fileExistsSync(t){return G.exists(t)}}const V="loading a directory of commands is not supported yet for ESM";let Y;try{Y=g(import.meta.url)}catch(t){Y=process.cwd()}var K,J={assert:{notStrictEqual:n,strictEqual:e},cliui:function(t){return function(t,e){return _=e,new O({width:(null==t?void 0:t.width)||("object"==typeof process&&process.stdout&&process.stdout.columns?process.stdout.columns:80),wrap:null==t?void 0:t.wrap})}(t,{stringWidth:t=>[...t].length,stripAnsi:E,wrap:C})},findUp:function(t,e){let n,r=s(".",t);for(c(r).isDirectory()||(r=i(r));;){if(n=e(r,h(r)),n)return s(r,n);if(r=i(n=r),n===r)break}},getEnv:t=>process.env[t],inspect:p,getCallerFile:()=>{throw new q(V)},getProcessArgvBin:function(){return process.argv[R()]},mainFilename:Y.substring(0,Y.lastIndexOf("node_modules"))||process.cwd(),Parser:U,path:{basename:l,dirname:i,extname:a,relative:o,resolve:s},process:{argv:()=>process.argv,cwd:process.cwd,emitWarning:(t,e)=>process.emitWarning(t,e),execPath:()=>process.execPath,exit:process.exit,nextTick:process.nextTick,stdColumns:void 0!==process.stdout.columns?process.stdout.columns:null},readFileSync:f,require:()=>{throw new q("require is not supported by ESM")},requireDirectory:()=>{throw new q(V)},stringWidth:t=>[...t].length,y18n:(K={directory:s(Y,"../../../locales"),updateFiles:!1},function(t,e){G=e;const n=new T(t);return{__:n.__.bind(n),__n:n.__n.bind(n),setLocale:n.setLocale.bind(n),getLocale:n.getLocale.bind(n),updateLocale:n.updateLocale.bind(n),locale:n.locale}}(K,B))};function Q(t,e,n,s){n.assert.notStrictEqual(t,e,s)}function Z(t,e){e.assert.strictEqual(typeof t,"string")}function X(t){return Object.keys(t)}function tt(t){return!!t&&!!t.then&&"function"==typeof t.then}function et(t){const e=t.replace(/\s{2,}/g," ").split(/\s+(?![^[]*]|[^<]*>)/),n=/\.*[\][<>]/g,s=e.shift();if(!s)throw new Error(`No command found in: ${t}`);const i={cmd:s.replace(n,""),demanded:[],optional:[]};return e.forEach(((t,s)=>{let r=!1;t=t.replace(/\s/g,""),/\.+[\]>]/.test(t)&&s===e.length-1&&(r=!0),/^\[/.test(t)?i.optional.push({cmd:t.replace(n,"").split("|"),variadic:r}):i.demanded.push({cmd:t.replace(n,"").split("|"),variadic:r})})),i}const nt=["first","second","third","fourth","fifth","sixth"];function st(t,e,n){try{let s=0;const[i,r,o]="object"==typeof t?[{demanded:[],optional:[]},t,e]:[et(`cmd ${t}`),e,n],a=[].slice.call(r);for(;a.length&&void 0===a[a.length-1];)a.pop();const l=o||a.length;if(l<i.demanded.length)throw new q(`Not enough arguments provided. Expected ${i.demanded.length} but received ${a.length}.`);const c=i.demanded.length+i.optional.length;if(l>c)throw new q(`Too many arguments provided. Expected max ${c} but received ${l}.`);i.demanded.forEach((t=>{const e=it(a.shift());0===t.cmd.filter((t=>t===e||"*"===t)).length&&rt(e,t.cmd,s),s+=1})),i.optional.forEach((t=>{if(0===a.length)return;const e=it(a.shift());0===t.cmd.filter((t=>t===e||"*"===t)).length&&rt(e,t.cmd,s),s+=1}))}catch(t){console.warn(t.stack)}}function it(t){return Array.isArray(t)?"array":null===t?"null":typeof t}function rt(t,e,n){throw new q(`Invalid ${nt[n]||"manyith"} argument. Expected ${e.join(" or ")} but received ${t}.`)}class ot{constructor(t){this.globalMiddleware=[],this.frozens=[],this.yargs=t}addMiddleware(t,e,n=!0,s=!1){if(st("<array|function> [boolean] [boolean] [boolean]",[t,e,n],arguments.length),Array.isArray(t)){for(let s=0;s<t.length;s++){if("function"!=typeof t[s])throw Error("middleware must be a function");const i=t[s];i.applyBeforeValidation=e,i.global=n}Array.prototype.push.apply(this.globalMiddleware,t)}else if("function"==typeof t){const i=t;i.applyBeforeValidation=e,i.global=n,i.mutates=s,this.globalMiddleware.push(t)}return this.yargs}addCoerceMiddleware(t,e){const n=this.yargs.getAliases();return this.globalMiddleware=this.globalMiddleware.filter((t=>{const s=[...n[e]||[],e];return!t.option||!s.includes(t.option)})),t.option=e,this.addMiddleware(t,!0,!0,!0)}getMiddleware(){return this.globalMiddleware}freeze(){this.frozens.push([...this.globalMiddleware])}unfreeze(){const t=this.frozens.pop();void 0!==t&&(this.globalMiddleware=t)}reset(){this.globalMiddleware=this.globalMiddleware.filter((t=>t.global))}}function at(t,e,n,s){return n.reduce(((t,n)=>{if(n.applyBeforeValidation!==s)return t;if(n.mutates){if(n.applied)return t;n.applied=!0}if(tt(t))return t.then((t=>Promise.all([t,n(t,e)]))).then((([t,e])=>Object.assign(t,e)));{const s=n(t,e);return tt(s)?s.then((e=>Object.assign(t,e))):Object.assign(t,s)}}),t)}function lt(t,e,n=t=>{throw t}){try{const n="function"==typeof t?t():t;return tt(n)?n.then((t=>e(t))):e(n)}catch(t){return n(t)}}const ct=/(^\*)|(^\$0)/;class ht{constructor(t,e,n,s){this.requireCache=new Set,this.handlers={},this.aliasMap={},this.frozens=[],this.shim=s,this.usage=t,this.globalMiddleware=n,this.validation=e}addDirectory(t,e,n,s){"boolean"!=typeof(s=s||{}).recurse&&(s.recurse=!1),Array.isArray(s.extensions)||(s.extensions=["js"]);const i="function"==typeof s.visit?s.visit:t=>t;s.visit=(t,e,n)=>{const s=i(t,e,n);if(s){if(this.requireCache.has(e))return s;this.requireCache.add(e),this.addHandler(s)}return s},this.shim.requireDirectory({require:e,filename:n},t,s)}addHandler(t,e,n,s,i,r){let o=[];const a=function(t){return t?t.map((t=>(t.applyBeforeValidation=!1,t))):[]}(i);if(s=s||(()=>{}),Array.isArray(t))if(function(t){return t.every((t=>"string"==typeof t))}(t))[t,...o]=t;else for(const e of t)this.addHandler(e);else{if(function(t){return"object"==typeof t&&!Array.isArray(t)}(t)){let e=Array.isArray(t.command)||"string"==typeof t.command?t.command:this.moduleName(t);return t.aliases&&(e=[].concat(e).concat(t.aliases)),void this.addHandler(e,this.extractDesc(t),t.builder,t.handler,t.middlewares,t.deprecated)}if(ft(n))return void this.addHandler([t].concat(o),e,n.builder,n.handler,n.middlewares,n.deprecated)}if("string"==typeof t){const i=et(t);o=o.map((t=>et(t).cmd));let l=!1;const c=[i.cmd].concat(o).filter((t=>!ct.test(t)||(l=!0,!1)));0===c.length&&l&&c.push("$0"),l&&(i.cmd=c[0],o=c.slice(1),t=t.replace(ct,i.cmd)),o.forEach((t=>{this.aliasMap[t]=i.cmd})),!1!==e&&this.usage.command(t,e,l,o,r),this.handlers[i.cmd]={original:t,description:e,handler:s,builder:n||{},middlewares:a,deprecated:r,demanded:i.demanded,optional:i.optional},l&&(this.defaultCommand=this.handlers[i.cmd])}}getCommandHandlers(){return this.handlers}getCommands(){return Object.keys(this.handlers).concat(Object.keys(this.aliasMap))}hasDefaultCommand(){return!!this.defaultCommand}runCommand(t,e,n,s,i,r){const o=this.handlers[t]||this.handlers[this.aliasMap[t]]||this.defaultCommand,a=e.getInternalMethods().getContext(),l=a.commands.slice(),c=!t;t&&(a.commands.push(t),a.fullCommands.push(o.original));const h=this.applyBuilderUpdateUsageAndParse(c,o,e,n.aliases,l,s,i,r);return tt(h)?h.then((t=>this.applyMiddlewareAndGetResult(c,o,t.innerArgv,a,i,t.aliases,e))):this.applyMiddlewareAndGetResult(c,o,h.innerArgv,a,i,h.aliases,e)}applyBuilderUpdateUsageAndParse(t,e,n,s,i,r,o,a){const l=e.builder;let c=n;if(ut(l)){n.getInternalMethods().getUsageInstance().freeze();const h=l(n.getInternalMethods().reset(s),a);if(tt(h))return h.then((s=>{var a;return c=(a=s)&&"function"==typeof a.getInternalMethods?s:n,this.parseAndUpdateUsage(t,e,c,i,r,o)}))}else(function(t){return"object"==typeof t})(l)&&(n.getInternalMethods().getUsageInstance().freeze(),c=n.getInternalMethods().reset(s),Object.keys(e.builder).forEach((t=>{c.option(t,l[t])})));return this.parseAndUpdateUsage(t,e,c,i,r,o)}parseAndUpdateUsage(t,e,n,s,i,r){t&&n.getInternalMethods().getUsageInstance().unfreeze(!0),this.shouldUpdateUsage(n)&&n.getInternalMethods().getUsageInstance().usage(this.usageFromParentCommandsCommandHandler(s,e),e.description);const o=n.getInternalMethods().runYargsParserAndExecuteCommands(null,void 0,!0,i,r);return tt(o)?o.then((t=>({aliases:n.parsed.aliases,innerArgv:t}))):{aliases:n.parsed.aliases,innerArgv:o}}shouldUpdateUsage(t){return!t.getInternalMethods().getUsageInstance().getUsageDisabled()&&0===t.getInternalMethods().getUsageInstance().getUsage().length}usageFromParentCommandsCommandHandler(t,e){const n=ct.test(e.original)?e.original.replace(ct,"").trim():e.original,s=t.filter((t=>!ct.test(t)));return s.push(n),`$0 ${s.join(" ")}`}handleValidationAndGetResult(t,e,n,s,i,r,o,a){if(!r.getInternalMethods().getHasOutput()){const e=r.getInternalMethods().runValidation(i,a,r.parsed.error,t);n=lt(n,(t=>(e(t),t)))}if(e.handler&&!r.getInternalMethods().getHasOutput()){r.getInternalMethods().setHasOutput();const s=!!r.getOptions().configuration["populate--"];r.getInternalMethods().postProcess(n,s,!1,!1),n=lt(n=at(n,r,o,!1),(t=>{const n=e.handler(t);return tt(n)?n.then((()=>t)):t})),t||r.getInternalMethods().getUsageInstance().cacheHelpMessage(),tt(n)&&!r.getInternalMethods().hasParseCallback()&&n.catch((t=>{try{r.getInternalMethods().getUsageInstance().fail(null,t)}catch(t){}}))}return t||(s.commands.pop(),s.fullCommands.pop()),n}applyMiddlewareAndGetResult(t,e,n,s,i,r,o){let a={};if(i)return n;o.getInternalMethods().getHasOutput()||(a=this.populatePositionals(e,n,s,o));const l=this.globalMiddleware.getMiddleware().slice(0).concat(e.middlewares),c=at(n,o,l,!0);return tt(c)?c.then((n=>this.handleValidationAndGetResult(t,e,n,s,r,o,l,a))):this.handleValidationAndGetResult(t,e,c,s,r,o,l,a)}populatePositionals(t,e,n,s){e._=e._.slice(n.commands.length);const i=t.demanded.slice(0),r=t.optional.slice(0),o={};for(this.validation.positionalCount(i.length,e._.length);i.length;){const t=i.shift();this.populatePositional(t,e,o)}for(;r.length;){const t=r.shift();this.populatePositional(t,e,o)}return e._=n.commands.concat(e._.map((t=>""+t))),this.postProcessPositionals(e,o,this.cmdToParseOptions(t.original),s),o}populatePositional(t,e,n){const s=t.cmd[0];t.variadic?n[s]=e._.splice(0).map(String):e._.length&&(n[s]=[String(e._.shift())])}cmdToParseOptions(t){const e={array:[],default:{},alias:{},demand:{}},n=et(t);return n.demanded.forEach((t=>{const[n,...s]=t.cmd;t.variadic&&(e.array.push(n),e.default[n]=[]),e.alias[n]=s,e.demand[n]=!0})),n.optional.forEach((t=>{const[n,...s]=t.cmd;t.variadic&&(e.array.push(n),e.default[n]=[]),e.alias[n]=s})),e}postProcessPositionals(t,e,n,s){const i=Object.assign({},s.getOptions());i.default=Object.assign(n.default,i.default);for(const t of Object.keys(n.alias))i.alias[t]=(i.alias[t]||[]).concat(n.alias[t]);i.array=i.array.concat(n.array),i.config={};const r=[];if(Object.keys(e).forEach((t=>{e[t].map((e=>{i.configuration["unknown-options-as-args"]&&(i.key[t]=!0),r.push(`--${t}`),r.push(e)}))})),!r.length)return;const o=Object.assign({},i.configuration,{"populate--":!1}),a=this.shim.Parser.detailed(r,Object.assign({},i,{configuration:o}));if(a.error)s.getInternalMethods().getUsageInstance().fail(a.error.message,a.error);else{const n=Object.keys(e);Object.keys(e).forEach((t=>{n.push(...a.aliases[t])})),Object.keys(a.argv).forEach((i=>{n.includes(i)&&(e[i]||(e[i]=a.argv[i]),!this.isInConfigs(s,i)&&!this.isDefaulted(s,i)&&Object.prototype.hasOwnProperty.call(t,i)&&Object.prototype.hasOwnProperty.call(a.argv,i)&&(Array.isArray(t[i])||Array.isArray(a.argv[i]))?t[i]=[].concat(t[i],a.argv[i]):t[i]=a.argv[i])}))}}isDefaulted(t,e){const{default:n}=t.getOptions();return Object.prototype.hasOwnProperty.call(n,e)||Object.prototype.hasOwnProperty.call(n,this.shim.Parser.camelCase(e))}isInConfigs(t,e){const{configObjects:n}=t.getOptions();return n.some((t=>Object.prototype.hasOwnProperty.call(t,e)))||n.some((t=>Object.prototype.hasOwnProperty.call(t,this.shim.Parser.camelCase(e))))}runDefaultBuilderOn(t){if(!this.defaultCommand)return;if(this.shouldUpdateUsage(t)){const e=ct.test(this.defaultCommand.original)?this.defaultCommand.original:this.defaultCommand.original.replace(/^[^[\]<>]*/,"$0 ");t.getInternalMethods().getUsageInstance().usage(e,this.defaultCommand.description)}const e=this.defaultCommand.builder;if(ut(e))return e(t,!0);ft(e)||Object.keys(e).forEach((n=>{t.option(n,e[n])}))}moduleName(t){const e=function(t){if("undefined"==typeof require)return null;for(let e,n=0,s=Object.keys(require.cache);n<s.length;n++)if(e=require.cache[s[n]],e.exports===t)return e;return null}(t);if(!e)throw new Error(`No command name given for module: ${this.shim.inspect(t)}`);return this.commandFromFilename(e.filename)}commandFromFilename(t){return this.shim.path.basename(t,this.shim.path.extname(t))}extractDesc({describe:t,description:e,desc:n}){for(const s of[t,e,n]){if("string"==typeof s||!1===s)return s;Q(s,!0,this.shim)}return!1}freeze(){this.frozens.push({handlers:this.handlers,aliasMap:this.aliasMap,defaultCommand:this.defaultCommand})}unfreeze(){const t=this.frozens.pop();Q(t,void 0,this.shim),({handlers:this.handlers,aliasMap:this.aliasMap,defaultCommand:this.defaultCommand}=t)}reset(){return this.handlers={},this.aliasMap={},this.defaultCommand=void 0,this.requireCache=new Set,this}}function ft(t){return"object"==typeof t&&!!t.builder&&"function"==typeof t.handler}function ut(t){return"function"==typeof t}function dt(t={},e=()=>!0){const n={};return X(t).forEach((s=>{e(s,t[s])&&(n[s]=t[s])})),n}function pt(t){"undefined"!=typeof process&&[process.stdout,process.stderr].forEach((e=>{const n=e;n._handle&&n.isTTY&&"function"==typeof n._handle.setBlocking&&n._handle.setBlocking(t)}))}function gt(t){return"boolean"==typeof t}function mt(t,e){const n=e.y18n.__,s={},i=[];s.failFn=function(t){i.push(t)};let r=null,o=null,a=!0;s.showHelpOnFail=function(e=!0,n){const[i,l]="string"==typeof e?[!0,e]:[e,n];return t.getInternalMethods().isGlobalContext()&&(o=l),r=l,a=i,s};let l=!1;s.fail=function(e,n){const c=t.getInternalMethods().getLoggerInstance();if(!i.length){if(t.getExitProcess()&&pt(!0),!l){l=!0,a&&(t.showHelp("error"),c.error()),(e||n)&&c.error(e||n);const s=r||o;s&&((e||n)&&c.error(""),c.error(s))}if(n=n||new q(e),t.getExitProcess())return t.exit(1);if(t.getInternalMethods().hasParseCallback())return t.exit(1,n);throw n}for(let t=i.length-1;t>=0;--t){const r=i[t];if(gt(r)){if(n)throw n;if(e)throw Error(e)}else r(e,n,s)}};let c=[],h=!1;s.usage=(t,e)=>null===t?(h=!0,c=[],s):(h=!1,c.push([t,e||""]),s),s.getUsage=()=>c,s.getUsageDisabled=()=>h,s.getPositionalGroupName=()=>n("Positionals:");let f=[];s.example=(t,e)=>{f.push([t,e||""])};let u=[];s.command=function(t,e,n,s,i=!1){n&&(u=u.map((t=>(t[2]=!1,t)))),u.push([t,e||"",n,s,i])},s.getCommands=()=>u;let d={};s.describe=function(t,e){Array.isArray(t)?t.forEach((t=>{s.describe(t,e)})):"object"==typeof t?Object.keys(t).forEach((e=>{s.describe(e,t[e])})):d[t]=e},s.getDescriptions=()=>d;let p=[];s.epilog=t=>{p.push(t)};let g,m=!1;s.wrap=t=>{m=!0,g=t},s.getWrap=()=>e.getEnv("YARGS_DISABLE_WRAP")?null:(m||(g=function(){const t=80;return e.process.stdColumns?Math.min(t,e.process.stdColumns):t}(),m=!0),g);const y="__yargsString__:";function b(t,n,s){let i=0;return Array.isArray(t)||(t=Object.values(t).map((t=>[t]))),t.forEach((t=>{i=Math.max(e.stringWidth(s?`${s} ${vt(t[0])}`:vt(t[0]))+bt(t[0]),i)})),n&&(i=Math.min(i,parseInt((.5*n).toString(),10))),i}let v;function w(e){return t.getOptions().hiddenOptions.indexOf(e)<0||t.parsed.argv[t.getOptions().showHiddenOpt]}function O(t,e){let s=`[${n("default:")} `;if(void 0===t&&!e)return null;if(e)s+=e;else switch(typeof t){case"string":s+=`"${t}"`;break;case"object":s+=JSON.stringify(t);break;default:s+=t}return`${s}]`}s.deferY18nLookup=t=>y+t,s.help=function(){if(v)return v;!function(){const e=t.getDemandedOptions(),n=t.getOptions();(Object.keys(n.alias)||[]).forEach((i=>{n.alias[i].forEach((r=>{d[r]&&s.describe(i,d[r]),r in e&&t.demandOption(i,e[r]),n.boolean.includes(r)&&t.boolean(i),n.count.includes(r)&&t.count(i),n.string.includes(r)&&t.string(i),n.normalize.includes(r)&&t.normalize(i),n.array.includes(r)&&t.array(i),n.number.includes(r)&&t.number(i)}))}))}();const i=t.customScriptName?t.$0:e.path.basename(t.$0),r=t.getDemandedOptions(),o=t.getDemandedCommands(),a=t.getDeprecatedOptions(),l=t.getGroups(),g=t.getOptions();let m=[];m=m.concat(Object.keys(d)),m=m.concat(Object.keys(r)),m=m.concat(Object.keys(o)),m=m.concat(Object.keys(g.default)),m=m.filter(w),m=Object.keys(m.reduce(((t,e)=>("_"!==e&&(t[e]=!0),t)),{}));const j=s.getWrap(),_=e.cliui({width:j,wrap:!!j});if(!h)if(c.length)c.forEach((t=>{_.div({text:`${t[0].replace(/\$0/g,i)}`}),t[1]&&_.div({text:`${t[1]}`,padding:[1,0,0,0]})})),_.div();else if(u.length){let t=null;t=o._?`${i} <${n("command")}>\n`:`${i} [${n("command")}]\n`,_.div(`${t}`)}if(u.length>1||1===u.length&&!u[0][2]){_.div(n("Commands:"));const e=t.getInternalMethods().getContext(),s=e.commands.length?`${e.commands.join(" ")} `:"";!0===t.getInternalMethods().getParserConfiguration()["sort-commands"]&&(u=u.sort(((t,e)=>t[0].localeCompare(e[0]))));const r=i?`${i} `:"";u.forEach((t=>{const e=`${r}${s}${t[0].replace(/^\$0 ?/,"")}`;_.span({text:e,padding:[0,2,0,2],width:b(u,j,`${i}${s}`)+4},{text:t[1]});const o=[];t[2]&&o.push(`[${n("default")}]`),t[3]&&t[3].length&&o.push(`[${n("aliases:")} ${t[3].join(", ")}]`),t[4]&&("string"==typeof t[4]?o.push(`[${n("deprecated: %s",t[4])}]`):o.push(`[${n("deprecated")}]`)),o.length?_.div({text:o.join(" "),padding:[0,0,0,2],align:"right"}):_.div()})),_.div()}const A=(Object.keys(g.alias)||[]).concat(Object.keys(t.parsed.newAliases)||[]);m=m.filter((e=>!t.parsed.newAliases[e]&&A.every((t=>-1===(g.alias[t]||[]).indexOf(e)))));const E=n("Options:");l[E]||(l[E]=[]),function(t,e,n,s){let i=[],r=null;Object.keys(n).forEach((t=>{i=i.concat(n[t])})),t.forEach((t=>{r=[t].concat(e[t]),r.some((t=>-1!==i.indexOf(t)))||n[s].push(t)}))}(m,g.alias,l,E);const C=t=>/^--/.test(vt(t)),k=Object.keys(l).filter((t=>l[t].length>0)).map((t=>({groupName:t,normalizedKeys:l[t].filter(w).map((t=>{if(A.includes(t))return t;for(let e,n=0;void 0!==(e=A[n]);n++)if((g.alias[e]||[]).includes(t))return e;return t}))}))).filter((({normalizedKeys:t})=>t.length>0)).map((({groupName:t,normalizedKeys:e})=>{const n=e.reduce(((e,n)=>(e[n]=[n].concat(g.alias[n]||[]).map((e=>t===s.getPositionalGroupName()?e:(/^[0-9]$/.test(e)?g.boolean.includes(n)?"-":"--":e.length>1?"--":"-")+e)).sort(((t,e)=>C(t)===C(e)?0:C(t)?1:-1)).join(", "),e)),{});return{groupName:t,normalizedKeys:e,switches:n}}));if(k.filter((({groupName:t})=>t!==s.getPositionalGroupName())).some((({normalizedKeys:t,switches:e})=>!t.every((t=>C(e[t])))))&&k.filter((({groupName:t})=>t!==s.getPositionalGroupName())).forEach((({normalizedKeys:t,switches:e})=>{t.forEach((t=>{var n,s;C(e[t])&&(e[t]=(n=e[t],s=4,yt(n)?{text:n.text,indentation:n.indentation+s}:{text:n,indentation:s}))}))})),k.forEach((({groupName:e,normalizedKeys:i,switches:o})=>{_.div(e),i.forEach((e=>{const i=o[e];let l=d[e]||"",c=null;l.includes(y)&&(l=n(l.substring(16))),g.boolean.includes(e)&&(c=`[${n("boolean")}]`),g.count.includes(e)&&(c=`[${n("count")}]`),g.string.includes(e)&&(c=`[${n("string")}]`),g.normalize.includes(e)&&(c=`[${n("string")}]`),g.array.includes(e)&&(c=`[${n("array")}]`),g.number.includes(e)&&(c=`[${n("number")}]`);const h=[e in a?(f=a[e],"string"==typeof f?`[${n("deprecated: %s",f)}]`:`[${n("deprecated")}]`):null,c,e in r?`[${n("required")}]`:null,g.choices&&g.choices[e]?`[${n("choices:")} ${s.stringifiedValues(g.choices[e])}]`:null,O(g.default[e],g.defaultDescription[e])].filter(Boolean).join(" ");var f;_.span({text:vt(i),padding:[0,2,0,2+bt(i)],width:b(o,j)+4},l);const u=!0===t.getInternalMethods().getUsageConfiguration()["hide-types"];h&&!u?_.div({text:h,padding:[0,0,0,2],align:"right"}):_.div()})),_.div()})),f.length&&(_.div(n("Examples:")),f.forEach((t=>{t[0]=t[0].replace(/\$0/g,i)})),f.forEach((t=>{""===t[1]?_.div({text:t[0],padding:[0,2,0,2]}):_.div({text:t[0],padding:[0,2,0,2],width:b(f,j)+4},{text:t[1]})})),_.div()),p.length>0){const t=p.map((t=>t.replace(/\$0/g,i))).join("\n");_.div(`${t}\n`)}return _.toString().replace(/\s*$/,"")},s.cacheHelpMessage=function(){v=this.help()},s.clearCachedHelpMessage=function(){v=void 0},s.hasCachedHelpMessage=function(){return!!v},s.showHelp=e=>{const n=t.getInternalMethods().getLoggerInstance();e||(e="error");("function"==typeof e?e:n[e])(s.help())},s.functionDescription=t=>["(",t.name?e.Parser.decamelize(t.name,"-"):n("generated-value"),")"].join(""),s.stringifiedValues=function(t,e){let n="";const s=e||", ",i=[].concat(t);return t&&i.length?(i.forEach((t=>{n.length&&(n+=s),n+=JSON.stringify(t)})),n):n};let j=null;s.version=t=>{j=t},s.showVersion=e=>{const n=t.getInternalMethods().getLoggerInstance();e||(e="error");("function"==typeof e?e:n[e])(j)},s.reset=function(t){return r=null,l=!1,c=[],h=!1,p=[],f=[],u=[],d=dt(d,(e=>!t[e])),s};const _=[];return s.freeze=function(){_.push({failMessage:r,failureOutput:l,usages:c,usageDisabled:h,epilogs:p,examples:f,commands:u,descriptions:d})},s.unfreeze=function(t=!1){const e=_.pop();e&&(t?(d={...e.descriptions,...d},u=[...e.commands,...u],c=[...e.usages,...c],f=[...e.examples,...f],p=[...e.epilogs,...p]):({failMessage:r,failureOutput:l,usages:c,usageDisabled:h,epilogs:p,examples:f,commands:u,descriptions:d}=e))},s}function yt(t){return"object"==typeof t}function bt(t){return yt(t)?t.indentation:0}function vt(t){return yt(t)?t.text:t}class wt{constructor(t,e,n,s){var i,r,o;this.yargs=t,this.usage=e,this.command=n,this.shim=s,this.completionKey="get-yargs-completions",this.aliases=null,this.customCompletionFunction=null,this.indexAfterLastReset=0,this.zshShell=null!==(o=(null===(i=this.shim.getEnv("SHELL"))||void 0===i?void 0:i.includes("zsh"))||(null===(r=this.shim.getEnv("ZSH_NAME"))||void 0===r?void 0:r.includes("zsh")))&&void 0!==o&&o}defaultCompletion(t,e,n,s){const i=this.command.getCommandHandlers();for(let e=0,n=t.length;e<n;++e)if(i[t[e]]&&i[t[e]].builder){const n=i[t[e]].builder;if(ut(n)){this.indexAfterLastReset=e+1;const t=this.yargs.getInternalMethods().reset();return n(t,!0),t.argv}}const r=[];this.commandCompletions(r,t,n),this.optionCompletions(r,t,e,n),this.choicesFromOptionsCompletions(r,t,e,n),this.choicesFromPositionalsCompletions(r,t,e,n),s(null,r)}commandCompletions(t,e,n){const s=this.yargs.getInternalMethods().getContext().commands;n.match(/^-/)||s[s.length-1]===n||this.previousArgHasChoices(e)||this.usage.getCommands().forEach((n=>{const s=et(n[0]).cmd;if(-1===e.indexOf(s))if(this.zshShell){const e=n[1]||"";t.push(s.replace(/:/g,"\\:")+":"+e)}else t.push(s)}))}optionCompletions(t,e,n,s){if((s.match(/^-/)||""===s&&0===t.length)&&!this.previousArgHasChoices(e)){const n=this.yargs.getOptions(),i=this.yargs.getGroups()[this.usage.getPositionalGroupName()]||[];Object.keys(n.key).forEach((r=>{const o=!!n.configuration["boolean-negation"]&&n.boolean.includes(r);i.includes(r)||n.hiddenOptions.includes(r)||this.argsContainKey(e,r,o)||this.completeOptionKey(r,t,s,o&&!!n.default[r])}))}}choicesFromOptionsCompletions(t,e,n,s){if(this.previousArgHasChoices(e)){const n=this.getPreviousArgChoices(e);n&&n.length>0&&t.push(...n.map((t=>t.replace(/:/g,"\\:"))))}}choicesFromPositionalsCompletions(t,e,n,s){if(""===s&&t.length>0&&this.previousArgHasChoices(e))return;const i=this.yargs.getGroups()[this.usage.getPositionalGroupName()]||[],r=Math.max(this.indexAfterLastReset,this.yargs.getInternalMethods().getContext().commands.length+1),o=i[n._.length-r-1];if(!o)return;const a=this.yargs.getOptions().choices[o]||[];for(const e of a)e.startsWith(s)&&t.push(e.replace(/:/g,"\\:"))}getPreviousArgChoices(t){if(t.length<1)return;let e=t[t.length-1],n="";if(!e.startsWith("-")&&t.length>1&&(n=e,e=t[t.length-2]),!e.startsWith("-"))return;const s=e.replace(/^-+/,""),i=this.yargs.getOptions(),r=[s,...this.yargs.getAliases()[s]||[]];let o;for(const t of r)if(Object.prototype.hasOwnProperty.call(i.key,t)&&Array.isArray(i.choices[t])){o=i.choices[t];break}return o?o.filter((t=>!n||t.startsWith(n))):void 0}previousArgHasChoices(t){const e=this.getPreviousArgChoices(t);return void 0!==e&&e.length>0}argsContainKey(t,e,n){const s=e=>-1!==t.indexOf((/^[^0-9]$/.test(e)?"-":"--")+e);if(s(e))return!0;if(n&&s(`no-${e}`))return!0;if(this.aliases)for(const t of this.aliases[e])if(s(t))return!0;return!1}completeOptionKey(t,e,n,s){var i,r,o,a;let l=t;if(this.zshShell){const e=this.usage.getDescriptions(),n=null===(r=null===(i=null==this?void 0:this.aliases)||void 0===i?void 0:i[t])||void 0===r?void 0:r.find((t=>{const n=e[t];return"string"==typeof n&&n.length>0})),s=n?e[n]:void 0,c=null!==(a=null!==(o=e[t])&&void 0!==o?o:s)&&void 0!==a?a:"";l=`${t.replace(/:/g,"\\:")}:${c.replace("__yargsString__:","").replace(/(\r\n|\n|\r)/gm," ")}`}const c=!/^--/.test(n)&&(t=>/^[^0-9]$/.test(t))(t)?"-":"--";e.push(c+l),s&&e.push(c+"no-"+l)}customCompletion(t,e,n,s){if(Q(this.customCompletionFunction,null,this.shim),this.customCompletionFunction.length<3){const t=this.customCompletionFunction(n,e);return tt(t)?t.then((t=>{this.shim.process.nextTick((()=>{s(null,t)}))})).catch((t=>{this.shim.process.nextTick((()=>{s(t,void 0)}))})):s(null,t)}return function(t){return t.length>3}(this.customCompletionFunction)?this.customCompletionFunction(n,e,((i=s)=>this.defaultCompletion(t,e,n,i)),(t=>{s(null,t)})):this.customCompletionFunction(n,e,(t=>{s(null,t)}))}getCompletion(t,e){const n=t.length?t[t.length-1]:"",s=this.yargs.parse(t,!0),i=this.customCompletionFunction?s=>this.customCompletion(t,s,n,e):s=>this.defaultCompletion(t,s,n,e);return tt(s)?s.then(i):i(s)}generateCompletionScript(t,e){let n=this.zshShell?'#compdef {{app_name}}\n###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.zshrc\n#    or {{app_path}} {{completion_command}} >> ~/.zprofile on OSX.\n#\n_{{app_name}}_yargs_completions()\n{\n  local reply\n  local si=$IFS\n  IFS=$\'\n\' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" {{app_path}} --get-yargs-completions "${words[@]}"))\n  IFS=$si\n  _describe \'values\' reply\n}\ncompdef _{{app_name}}_yargs_completions {{app_name}}\n###-end-{{app_name}}-completions-###\n':'###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.bashrc\n#    or {{app_path}} {{completion_command}} >> ~/.bash_profile on OSX.\n#\n_{{app_name}}_yargs_completions()\n{\n    local cur_word args type_list\n\n    cur_word="${COMP_WORDS[COMP_CWORD]}"\n    args=("${COMP_WORDS[@]}")\n\n    # ask yargs to generate completions.\n    type_list=$({{app_path}} --get-yargs-completions "${args[@]}")\n\n    COMPREPLY=( $(compgen -W "${type_list}" -- ${cur_word}) )\n\n    # if no match was found, fall back to filename completion\n    if [ ${#COMPREPLY[@]} -eq 0 ]; then\n      COMPREPLY=()\n    fi\n\n    return 0\n}\ncomplete -o bashdefault -o default -F _{{app_name}}_yargs_completions {{app_name}}\n###-end-{{app_name}}-completions-###\n';const s=this.shim.path.basename(t);return t.match(/\.js$/)&&(t=`./${t}`),n=n.replace(/{{app_name}}/g,s),n=n.replace(/{{completion_command}}/g,e),n.replace(/{{app_path}}/g,t)}registerFunction(t){this.customCompletionFunction=t}setParsed(t){this.aliases=t.aliases}}function Ot(t,e){if(0===t.length)return e.length;if(0===e.length)return t.length;const n=[];let s,i;for(s=0;s<=e.length;s++)n[s]=[s];for(i=0;i<=t.length;i++)n[0][i]=i;for(s=1;s<=e.length;s++)for(i=1;i<=t.length;i++)e.charAt(s-1)===t.charAt(i-1)?n[s][i]=n[s-1][i-1]:s>1&&i>1&&e.charAt(s-2)===t.charAt(i-1)&&e.charAt(s-1)===t.charAt(i-2)?n[s][i]=n[s-2][i-2]+1:n[s][i]=Math.min(n[s-1][i-1]+1,Math.min(n[s][i-1]+1,n[s-1][i]+1));return n[e.length][t.length]}const jt=["$0","--","_"];let _t,At=[];function Et(t,e,n,s){_t=s;let i={};if(Object.prototype.hasOwnProperty.call(t,"extends")){if("string"!=typeof t.extends)return i;const s=/\.json|\..*rc$/.test(t.extends);let r=null;if(s)r=function(t,e){return _t.path.resolve(t,e)}(e,t.extends);else try{r=require.resolve(t.extends)}catch(e){return t}!function(t){if(At.indexOf(t)>-1)throw new q(`Circular extended configurations: '${t}'.`)}(r),At.push(r),i=s?JSON.parse(_t.readFileSync(r,"utf8")):require(t.extends),delete t.extends,i=Et(i,_t.path.dirname(r),n,_t)}return At=[],n?Ct(i,t):Object.assign({},i,t)}function Ct(t,e){const n={};function s(t){return t&&"object"==typeof t&&!Array.isArray(t)}Object.assign(n,t);for(const i of Object.keys(e))s(e[i])&&s(n[i])?n[i]=Ct(t[i],e[i]):n[i]=e[i];return n}var kt,xt,Mt,St,Pt,$t,It,Nt,Wt,Lt,Dt,zt,Ft,Ht,Ut,Rt,qt,Bt,Gt,Tt,Vt,Yt,Kt,Jt,Qt,Zt,Xt,te,ee,ne,se,ie,re,oe,ae,le=function(t,e,n,s,i){if("m"===s)throw new TypeError("Private method is not writable");if("a"===s&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===s?i.call(t,n):i?i.value=n:e.set(t,n),n},ce=function(t,e,n,s){if("a"===n&&!s)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!s:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?s:"a"===n?s.call(t):s?s.value:e.get(t)};const he=Symbol("copyDoubleDash"),fe=Symbol("copyDoubleDash"),ue=Symbol("deleteFromParserHintObject"),de=Symbol("emitWarning"),pe=Symbol("freeze"),ge=Symbol("getDollarZero"),me=Symbol("getParserConfiguration"),ye=Symbol("getUsageConfiguration"),be=Symbol("guessLocale"),ve=Symbol("guessVersion"),we=Symbol("parsePositionalNumbers"),Oe=Symbol("pkgUp"),je=Symbol("populateParserHintArray"),_e=Symbol("populateParserHintSingleValueDictionary"),Ae=Symbol("populateParserHintArrayDictionary"),Ee=Symbol("populateParserHintDictionary"),Ce=Symbol("sanitizeKey"),ke=Symbol("setKey"),xe=Symbol("unfreeze"),Me=Symbol("validateAsync"),Se=Symbol("getCommandInstance"),Pe=Symbol("getContext"),$e=Symbol("getHasOutput"),Ie=Symbol("getLoggerInstance"),Ne=Symbol("getParseContext"),We=Symbol("getUsageInstance"),Le=Symbol("getValidationInstance"),De=Symbol("hasParseCallback"),ze=Symbol("isGlobalContext"),Fe=Symbol("postProcess"),He=Symbol("rebase"),Ue=Symbol("reset"),Re=Symbol("runYargsParserAndExecuteCommands"),qe=Symbol("runValidation"),Be=Symbol("setHasOutput"),Ge=Symbol("kTrackManuallySetKeys");class Te{constructor(t=[],e,n,s){this.customScriptName=!1,this.parsed=!1,kt.set(this,void 0),xt.set(this,void 0),Mt.set(this,{commands:[],fullCommands:[]}),St.set(this,null),Pt.set(this,null),$t.set(this,"show-hidden"),It.set(this,null),Nt.set(this,!0),Wt.set(this,{}),Lt.set(this,!0),Dt.set(this,[]),zt.set(this,void 0),Ft.set(this,{}),Ht.set(this,!1),Ut.set(this,null),Rt.set(this,!0),qt.set(this,void 0),Bt.set(this,""),Gt.set(this,void 0),Tt.set(this,void 0),Vt.set(this,{}),Yt.set(this,null),Kt.set(this,null),Jt.set(this,{}),Qt.set(this,{}),Zt.set(this,void 0),Xt.set(this,!1),te.set(this,void 0),ee.set(this,!1),ne.set(this,!1),se.set(this,!1),ie.set(this,void 0),re.set(this,{}),oe.set(this,null),ae.set(this,void 0),le(this,te,s,"f"),le(this,Zt,t,"f"),le(this,xt,e,"f"),le(this,Tt,n,"f"),le(this,zt,new ot(this),"f"),this.$0=this[ge](),this[Ue](),le(this,kt,ce(this,kt,"f"),"f"),le(this,ie,ce(this,ie,"f"),"f"),le(this,ae,ce(this,ae,"f"),"f"),le(this,Gt,ce(this,Gt,"f"),"f"),ce(this,Gt,"f").showHiddenOpt=ce(this,$t,"f"),le(this,qt,this[fe](),"f")}addHelpOpt(t,e){return st("[string|boolean] [string]",[t,e],arguments.length),ce(this,Ut,"f")&&(this[ue](ce(this,Ut,"f")),le(this,Ut,null,"f")),!1===t&&void 0===e||(le(this,Ut,"string"==typeof t?t:"help","f"),this.boolean(ce(this,Ut,"f")),this.describe(ce(this,Ut,"f"),e||ce(this,ie,"f").deferY18nLookup("Show help"))),this}help(t,e){return this.addHelpOpt(t,e)}addShowHiddenOpt(t,e){if(st("[string|boolean] [string]",[t,e],arguments.length),!1===t&&void 0===e)return this;const n="string"==typeof t?t:ce(this,$t,"f");return this.boolean(n),this.describe(n,e||ce(this,ie,"f").deferY18nLookup("Show hidden options")),ce(this,Gt,"f").showHiddenOpt=n,this}showHidden(t,e){return this.addShowHiddenOpt(t,e)}alias(t,e){return st("<object|string|array> [string|array]",[t,e],arguments.length),this[Ae](this.alias.bind(this),"alias",t,e),this}array(t){return st("<array|string>",[t],arguments.length),this[je]("array",t),this[Ge](t),this}boolean(t){return st("<array|string>",[t],arguments.length),this[je]("boolean",t),this[Ge](t),this}check(t,e){return st("<function> [boolean]",[t,e],arguments.length),this.middleware(((e,n)=>lt((()=>t(e,n.getOptions())),(n=>(n?("string"==typeof n||n instanceof Error)&&ce(this,ie,"f").fail(n.toString(),n):ce(this,ie,"f").fail(ce(this,te,"f").y18n.__("Argument check failed: %s",t.toString())),e)),(t=>(ce(this,ie,"f").fail(t.message?t.message:t.toString(),t),e)))),!1,e),this}choices(t,e){return st("<object|string|array> [string|array]",[t,e],arguments.length),this[Ae](this.choices.bind(this),"choices",t,e),this}coerce(t,e){if(st("<object|string|array> [function]",[t,e],arguments.length),Array.isArray(t)){if(!e)throw new q("coerce callback must be provided");for(const n of t)this.coerce(n,e);return this}if("object"==typeof t){for(const e of Object.keys(t))this.coerce(e,t[e]);return this}if(!e)throw new q("coerce callback must be provided");return ce(this,Gt,"f").key[t]=!0,ce(this,zt,"f").addCoerceMiddleware(((n,s)=>{let i;return Object.prototype.hasOwnProperty.call(n,t)?lt((()=>(i=s.getAliases(),e(n[t]))),(e=>{n[t]=e;const r=s.getInternalMethods().getParserConfiguration()["strip-aliased"];if(i[t]&&!0!==r)for(const s of i[t])n[s]=e;return n}),(t=>{throw new q(t.message)})):n}),t),this}conflicts(t,e){return st("<string|object> [string|array]",[t,e],arguments.length),ce(this,ae,"f").conflicts(t,e),this}config(t="config",e,n){return st("[object|string] [string|function] [function]",[t,e,n],arguments.length),"object"!=typeof t||Array.isArray(t)?("function"==typeof e&&(n=e,e=void 0),this.describe(t,e||ce(this,ie,"f").deferY18nLookup("Path to JSON config file")),(Array.isArray(t)?t:[t]).forEach((t=>{ce(this,Gt,"f").config[t]=n||!0})),this):(t=Et(t,ce(this,xt,"f"),this[me]()["deep-merge-config"]||!1,ce(this,te,"f")),ce(this,Gt,"f").configObjects=(ce(this,Gt,"f").configObjects||[]).concat(t),this)}completion(t,e,n){return st("[string] [string|boolean|function] [function]",[t,e,n],arguments.length),"function"==typeof e&&(n=e,e=void 0),le(this,Pt,t||ce(this,Pt,"f")||"completion","f"),e||!1===e||(e="generate completion script"),this.command(ce(this,Pt,"f"),e),n&&ce(this,St,"f").registerFunction(n),this}command(t,e,n,s,i,r){return st("<string|array|object> [string|boolean] [function|object] [function] [array] [boolean|string]",[t,e,n,s,i,r],arguments.length),ce(this,kt,"f").addHandler(t,e,n,s,i,r),this}commands(t,e,n,s,i,r){return this.command(t,e,n,s,i,r)}commandDir(t,e){st("<string> [object]",[t,e],arguments.length);const n=ce(this,Tt,"f")||ce(this,te,"f").require;return ce(this,kt,"f").addDirectory(t,n,ce(this,te,"f").getCallerFile(),e),this}count(t){return st("<array|string>",[t],arguments.length),this[je]("count",t),this[Ge](t),this}default(t,e,n){return st("<object|string|array> [*] [string]",[t,e,n],arguments.length),n&&(Z(t,ce(this,te,"f")),ce(this,Gt,"f").defaultDescription[t]=n),"function"==typeof e&&(Z(t,ce(this,te,"f")),ce(this,Gt,"f").defaultDescription[t]||(ce(this,Gt,"f").defaultDescription[t]=ce(this,ie,"f").functionDescription(e)),e=e.call()),this[_e](this.default.bind(this),"default",t,e),this}defaults(t,e,n){return this.default(t,e,n)}demandCommand(t=1,e,n,s){return st("[number] [number|string] [string|null|undefined] [string|null|undefined]",[t,e,n,s],arguments.length),"number"!=typeof e&&(n=e,e=1/0),this.global("_",!1),ce(this,Gt,"f").demandedCommands._={min:t,max:e,minMsg:n,maxMsg:s},this}demand(t,e,n){return Array.isArray(e)?(e.forEach((t=>{Q(n,!0,ce(this,te,"f")),this.demandOption(t,n)})),e=1/0):"number"!=typeof e&&(n=e,e=1/0),"number"==typeof t?(Q(n,!0,ce(this,te,"f")),this.demandCommand(t,e,n,n)):Array.isArray(t)?t.forEach((t=>{Q(n,!0,ce(this,te,"f")),this.demandOption(t,n)})):"string"==typeof n?this.demandOption(t,n):!0!==n&&void 0!==n||this.demandOption(t),this}demandOption(t,e){return st("<object|string|array> [string]",[t,e],arguments.length),this[_e](this.demandOption.bind(this),"demandedOptions",t,e),this}deprecateOption(t,e){return st("<string> [string|boolean]",[t,e],arguments.length),ce(this,Gt,"f").deprecatedOptions[t]=e,this}describe(t,e){return st("<object|string|array> [string]",[t,e],arguments.length),this[ke](t,!0),ce(this,ie,"f").describe(t,e),this}detectLocale(t){return st("<boolean>",[t],arguments.length),le(this,Nt,t,"f"),this}env(t){return st("[string|boolean]",[t],arguments.length),!1===t?delete ce(this,Gt,"f").envPrefix:ce(this,Gt,"f").envPrefix=t||"",this}epilogue(t){return st("<string>",[t],arguments.length),ce(this,ie,"f").epilog(t),this}epilog(t){return this.epilogue(t)}example(t,e){return st("<string|array> [string]",[t,e],arguments.length),Array.isArray(t)?t.forEach((t=>this.example(...t))):ce(this,ie,"f").example(t,e),this}exit(t,e){le(this,Ht,!0,"f"),le(this,It,e,"f"),ce(this,Lt,"f")&&ce(this,te,"f").process.exit(t)}exitProcess(t=!0){return st("[boolean]",[t],arguments.length),le(this,Lt,t,"f"),this}fail(t){if(st("<function|boolean>",[t],arguments.length),"boolean"==typeof t&&!1!==t)throw new q("Invalid first argument. Expected function or boolean 'false'");return ce(this,ie,"f").failFn(t),this}getAliases(){return this.parsed?this.parsed.aliases:{}}async getCompletion(t,e){return st("<array> [function]",[t,e],arguments.length),e?ce(this,St,"f").getCompletion(t,e):new Promise(((e,n)=>{ce(this,St,"f").getCompletion(t,((t,s)=>{t?n(t):e(s)}))}))}getDemandedOptions(){return st([],0),ce(this,Gt,"f").demandedOptions}getDemandedCommands(){return st([],0),ce(this,Gt,"f").demandedCommands}getDeprecatedOptions(){return st([],0),ce(this,Gt,"f").deprecatedOptions}getDetectLocale(){return ce(this,Nt,"f")}getExitProcess(){return ce(this,Lt,"f")}getGroups(){return Object.assign({},ce(this,Ft,"f"),ce(this,Qt,"f"))}getHelp(){if(le(this,Ht,!0,"f"),!ce(this,ie,"f").hasCachedHelpMessage()){if(!this.parsed){const t=this[Re](ce(this,Zt,"f"),void 0,void 0,0,!0);if(tt(t))return t.then((()=>ce(this,ie,"f").help()))}const t=ce(this,kt,"f").runDefaultBuilderOn(this);if(tt(t))return t.then((()=>ce(this,ie,"f").help()))}return Promise.resolve(ce(this,ie,"f").help())}getOptions(){return ce(this,Gt,"f")}getStrict(){return ce(this,ee,"f")}getStrictCommands(){return ce(this,ne,"f")}getStrictOptions(){return ce(this,se,"f")}global(t,e){return st("<string|array> [boolean]",[t,e],arguments.length),t=[].concat(t),!1!==e?ce(this,Gt,"f").local=ce(this,Gt,"f").local.filter((e=>-1===t.indexOf(e))):t.forEach((t=>{ce(this,Gt,"f").local.includes(t)||ce(this,Gt,"f").local.push(t)})),this}group(t,e){st("<string|array> <string>",[t,e],arguments.length);const n=ce(this,Qt,"f")[e]||ce(this,Ft,"f")[e];ce(this,Qt,"f")[e]&&delete ce(this,Qt,"f")[e];const s={};return ce(this,Ft,"f")[e]=(n||[]).concat(t).filter((t=>!s[t]&&(s[t]=!0))),this}hide(t){return st("<string>",[t],arguments.length),ce(this,Gt,"f").hiddenOptions.push(t),this}implies(t,e){return st("<string|object> [number|string|array]",[t,e],arguments.length),ce(this,ae,"f").implies(t,e),this}locale(t){return st("[string]",[t],arguments.length),void 0===t?(this[be](),ce(this,te,"f").y18n.getLocale()):(le(this,Nt,!1,"f"),ce(this,te,"f").y18n.setLocale(t),this)}middleware(t,e,n){return ce(this,zt,"f").addMiddleware(t,!!e,n)}nargs(t,e){return st("<string|object|array> [number]",[t,e],arguments.length),this[_e](this.nargs.bind(this),"narg",t,e),this}normalize(t){return st("<array|string>",[t],arguments.length),this[je]("normalize",t),this}number(t){return st("<array|string>",[t],arguments.length),this[je]("number",t),this[Ge](t),this}option(t,e){if(st("<string|object> [object]",[t,e],arguments.length),"object"==typeof t)Object.keys(t).forEach((e=>{this.options(e,t[e])}));else{"object"!=typeof e&&(e={}),this[Ge](t),!ce(this,oe,"f")||"version"!==t&&"version"!==(null==e?void 0:e.alias)||this[de](['"version" is a reserved word.',"Please do one of the following:",'- Disable version with `yargs.version(false)` if using "version" as an option',"- Use the built-in `yargs.version` method instead (if applicable)","- Use a different option key","https://yargs.js.org/docs/#api-reference-version"].join("\n"),void 0,"versionWarning"),ce(this,Gt,"f").key[t]=!0,e.alias&&this.alias(t,e.alias);const n=e.deprecate||e.deprecated;n&&this.deprecateOption(t,n);const s=e.demand||e.required||e.require;s&&this.demand(t,s),e.demandOption&&this.demandOption(t,"string"==typeof e.demandOption?e.demandOption:void 0),e.conflicts&&this.conflicts(t,e.conflicts),"default"in e&&this.default(t,e.default),void 0!==e.implies&&this.implies(t,e.implies),void 0!==e.nargs&&this.nargs(t,e.nargs),e.config&&this.config(t,e.configParser),e.normalize&&this.normalize(t),e.choices&&this.choices(t,e.choices),e.coerce&&this.coerce(t,e.coerce),e.group&&this.group(t,e.group),(e.boolean||"boolean"===e.type)&&(this.boolean(t),e.alias&&this.boolean(e.alias)),(e.array||"array"===e.type)&&(this.array(t),e.alias&&this.array(e.alias)),(e.number||"number"===e.type)&&(this.number(t),e.alias&&this.number(e.alias)),(e.string||"string"===e.type)&&(this.string(t),e.alias&&this.string(e.alias)),(e.count||"count"===e.type)&&this.count(t),"boolean"==typeof e.global&&this.global(t,e.global),e.defaultDescription&&(ce(this,Gt,"f").defaultDescription[t]=e.defaultDescription),e.skipValidation&&this.skipValidation(t);const i=e.describe||e.description||e.desc,r=ce(this,ie,"f").getDescriptions();Object.prototype.hasOwnProperty.call(r,t)&&"string"!=typeof i||this.describe(t,i),e.hidden&&this.hide(t),e.requiresArg&&this.requiresArg(t)}return this}options(t,e){return this.option(t,e)}parse(t,e,n){st("[string|array] [function|boolean|object] [function]",[t,e,n],arguments.length),this[pe](),void 0===t&&(t=ce(this,Zt,"f")),"object"==typeof e&&(le(this,Kt,e,"f"),e=n),"function"==typeof e&&(le(this,Yt,e,"f"),e=!1),e||le(this,Zt,t,"f"),ce(this,Yt,"f")&&le(this,Lt,!1,"f");const s=this[Re](t,!!e),i=this.parsed;return ce(this,St,"f").setParsed(this.parsed),tt(s)?s.then((t=>(ce(this,Yt,"f")&&ce(this,Yt,"f").call(this,ce(this,It,"f"),t,ce(this,Bt,"f")),t))).catch((t=>{throw ce(this,Yt,"f")&&ce(this,Yt,"f")(t,this.parsed.argv,ce(this,Bt,"f")),t})).finally((()=>{this[xe](),this.parsed=i})):(ce(this,Yt,"f")&&ce(this,Yt,"f").call(this,ce(this,It,"f"),s,ce(this,Bt,"f")),this[xe](),this.parsed=i,s)}parseAsync(t,e,n){const s=this.parse(t,e,n);return tt(s)?s:Promise.resolve(s)}parseSync(t,e,n){const s=this.parse(t,e,n);if(tt(s))throw new q(".parseSync() must not be used with asynchronous builders, handlers, or middleware");return s}parserConfiguration(t){return st("<object>",[t],arguments.length),le(this,Vt,t,"f"),this}pkgConf(t,e){st("<string> [string]",[t,e],arguments.length);let n=null;const s=this[Oe](e||ce(this,xt,"f"));return s[t]&&"object"==typeof s[t]&&(n=Et(s[t],e||ce(this,xt,"f"),this[me]()["deep-merge-config"]||!1,ce(this,te,"f")),ce(this,Gt,"f").configObjects=(ce(this,Gt,"f").configObjects||[]).concat(n)),this}positional(t,e){st("<string> <object>",[t,e],arguments.length);const n=["default","defaultDescription","implies","normalize","choices","conflicts","coerce","type","describe","desc","description","alias"];e=dt(e,((t,e)=>!("type"===t&&!["string","number","boolean"].includes(e))&&n.includes(t)));const s=ce(this,Mt,"f").fullCommands[ce(this,Mt,"f").fullCommands.length-1],i=s?ce(this,kt,"f").cmdToParseOptions(s):{array:[],alias:{},default:{},demand:{}};return X(i).forEach((n=>{const s=i[n];Array.isArray(s)?-1!==s.indexOf(t)&&(e[n]=!0):s[t]&&!(n in e)&&(e[n]=s[t])})),this.group(t,ce(this,ie,"f").getPositionalGroupName()),this.option(t,e)}recommendCommands(t=!0){return st("[boolean]",[t],arguments.length),le(this,Xt,t,"f"),this}required(t,e,n){return this.demand(t,e,n)}require(t,e,n){return this.demand(t,e,n)}requiresArg(t){return st("<array|string|object> [number]",[t],arguments.length),"string"==typeof t&&ce(this,Gt,"f").narg[t]||this[_e](this.requiresArg.bind(this),"narg",t,NaN),this}showCompletionScript(t,e){return st("[string] [string]",[t,e],arguments.length),t=t||this.$0,ce(this,qt,"f").log(ce(this,St,"f").generateCompletionScript(t,e||ce(this,Pt,"f")||"completion")),this}showHelp(t){if(st("[string|function]",[t],arguments.length),le(this,Ht,!0,"f"),!ce(this,ie,"f").hasCachedHelpMessage()){if(!this.parsed){const e=this[Re](ce(this,Zt,"f"),void 0,void 0,0,!0);if(tt(e))return e.then((()=>{ce(this,ie,"f").showHelp(t)})),this}const e=ce(this,kt,"f").runDefaultBuilderOn(this);if(tt(e))return e.then((()=>{ce(this,ie,"f").showHelp(t)})),this}return ce(this,ie,"f").showHelp(t),this}scriptName(t){return this.customScriptName=!0,this.$0=t,this}showHelpOnFail(t,e){return st("[boolean|string] [string]",[t,e],arguments.length),ce(this,ie,"f").showHelpOnFail(t,e),this}showVersion(t){return st("[string|function]",[t],arguments.length),ce(this,ie,"f").showVersion(t),this}skipValidation(t){return st("<array|string>",[t],arguments.length),this[je]("skipValidation",t),this}strict(t){return st("[boolean]",[t],arguments.length),le(this,ee,!1!==t,"f"),this}strictCommands(t){return st("[boolean]",[t],arguments.length),le(this,ne,!1!==t,"f"),this}strictOptions(t){return st("[boolean]",[t],arguments.length),le(this,se,!1!==t,"f"),this}string(t){return st("<array|string>",[t],arguments.length),this[je]("string",t),this[Ge](t),this}terminalWidth(){return st([],0),ce(this,te,"f").process.stdColumns}updateLocale(t){return this.updateStrings(t)}updateStrings(t){return st("<object>",[t],arguments.length),le(this,Nt,!1,"f"),ce(this,te,"f").y18n.updateLocale(t),this}usage(t,e,n,s){if(st("<string|null|undefined> [string|boolean] [function|object] [function]",[t,e,n,s],arguments.length),void 0!==e){if(Q(t,null,ce(this,te,"f")),(t||"").match(/^\$0( |$)/))return this.command(t,e,n,s);throw new q(".usage() description must start with $0 if being used as alias for .command()")}return ce(this,ie,"f").usage(t),this}usageConfiguration(t){return st("<object>",[t],arguments.length),le(this,re,t,"f"),this}version(t,e,n){const s="version";if(st("[boolean|string] [string] [string]",[t,e,n],arguments.length),ce(this,oe,"f")&&(this[ue](ce(this,oe,"f")),ce(this,ie,"f").version(void 0),le(this,oe,null,"f")),0===arguments.length)n=this[ve](),t=s;else if(1===arguments.length){if(!1===t)return this;n=t,t=s}else 2===arguments.length&&(n=e,e=void 0);return le(this,oe,"string"==typeof t?t:s,"f"),e=e||ce(this,ie,"f").deferY18nLookup("Show version number"),ce(this,ie,"f").version(n||void 0),this.boolean(ce(this,oe,"f")),this.describe(ce(this,oe,"f"),e),this}wrap(t){return st("<number|null|undefined>",[t],arguments.length),ce(this,ie,"f").wrap(t),this}[(kt=new WeakMap,xt=new WeakMap,Mt=new WeakMap,St=new WeakMap,Pt=new WeakMap,$t=new WeakMap,It=new WeakMap,Nt=new WeakMap,Wt=new WeakMap,Lt=new WeakMap,Dt=new WeakMap,zt=new WeakMap,Ft=new WeakMap,Ht=new WeakMap,Ut=new WeakMap,Rt=new WeakMap,qt=new WeakMap,Bt=new WeakMap,Gt=new WeakMap,Tt=new WeakMap,Vt=new WeakMap,Yt=new WeakMap,Kt=new WeakMap,Jt=new WeakMap,Qt=new WeakMap,Zt=new WeakMap,Xt=new WeakMap,te=new WeakMap,ee=new WeakMap,ne=new WeakMap,se=new WeakMap,ie=new WeakMap,re=new WeakMap,oe=new WeakMap,ae=new WeakMap,he)](t){if(!t._||!t["--"])return t;t._.push.apply(t._,t["--"]);try{delete t["--"]}catch(t){}return t}[fe](){return{log:(...t)=>{this[De]()||console.log(...t),le(this,Ht,!0,"f"),ce(this,Bt,"f").length&&le(this,Bt,ce(this,Bt,"f")+"\n","f"),le(this,Bt,ce(this,Bt,"f")+t.join(" "),"f")},error:(...t)=>{this[De]()||console.error(...t),le(this,Ht,!0,"f"),ce(this,Bt,"f").length&&le(this,Bt,ce(this,Bt,"f")+"\n","f"),le(this,Bt,ce(this,Bt,"f")+t.join(" "),"f")}}}[ue](t){X(ce(this,Gt,"f")).forEach((e=>{if("configObjects"===e)return;const n=ce(this,Gt,"f")[e];Array.isArray(n)?n.includes(t)&&n.splice(n.indexOf(t),1):"object"==typeof n&&delete n[t]})),delete ce(this,ie,"f").getDescriptions()[t]}[de](t,e,n){ce(this,Wt,"f")[n]||(ce(this,te,"f").process.emitWarning(t,e),ce(this,Wt,"f")[n]=!0)}[pe](){ce(this,Dt,"f").push({options:ce(this,Gt,"f"),configObjects:ce(this,Gt,"f").configObjects.slice(0),exitProcess:ce(this,Lt,"f"),groups:ce(this,Ft,"f"),strict:ce(this,ee,"f"),strictCommands:ce(this,ne,"f"),strictOptions:ce(this,se,"f"),completionCommand:ce(this,Pt,"f"),output:ce(this,Bt,"f"),exitError:ce(this,It,"f"),hasOutput:ce(this,Ht,"f"),parsed:this.parsed,parseFn:ce(this,Yt,"f"),parseContext:ce(this,Kt,"f")}),ce(this,ie,"f").freeze(),ce(this,ae,"f").freeze(),ce(this,kt,"f").freeze(),ce(this,zt,"f").freeze()}[ge](){let t,e="";return t=/\b(node|iojs|electron)(\.exe)?$/.test(ce(this,te,"f").process.argv()[0])?ce(this,te,"f").process.argv().slice(1,2):ce(this,te,"f").process.argv().slice(0,1),e=t.map((t=>{const e=this[He](ce(this,xt,"f"),t);return t.match(/^(\/|([a-zA-Z]:)?\\)/)&&e.length<t.length?e:t})).join(" ").trim(),ce(this,te,"f").getEnv("_")&&ce(this,te,"f").getProcessArgvBin()===ce(this,te,"f").getEnv("_")&&(e=ce(this,te,"f").getEnv("_").replace(`${ce(this,te,"f").path.dirname(ce(this,te,"f").process.execPath())}/`,"")),e}[me](){return ce(this,Vt,"f")}[ye](){return ce(this,re,"f")}[be](){if(!ce(this,Nt,"f"))return;const t=ce(this,te,"f").getEnv("LC_ALL")||ce(this,te,"f").getEnv("LC_MESSAGES")||ce(this,te,"f").getEnv("LANG")||ce(this,te,"f").getEnv("LANGUAGE")||"en_US";this.locale(t.replace(/[.:].*/,""))}[ve](){return this[Oe]().version||"unknown"}[we](t){const e=t["--"]?t["--"]:t._;for(let t,n=0;void 0!==(t=e[n]);n++)ce(this,te,"f").Parser.looksLikeNumber(t)&&Number.isSafeInteger(Math.floor(parseFloat(`${t}`)))&&(e[n]=Number(t));return t}[Oe](t){const e=t||"*";if(ce(this,Jt,"f")[e])return ce(this,Jt,"f")[e];let n={};try{let e=t||ce(this,te,"f").mainFilename;!t&&ce(this,te,"f").path.extname(e)&&(e=ce(this,te,"f").path.dirname(e));const s=ce(this,te,"f").findUp(e,((t,e)=>e.includes("package.json")?"package.json":void 0));Q(s,void 0,ce(this,te,"f")),n=JSON.parse(ce(this,te,"f").readFileSync(s,"utf8"))}catch(t){}return ce(this,Jt,"f")[e]=n||{},ce(this,Jt,"f")[e]}[je](t,e){(e=[].concat(e)).forEach((e=>{e=this[Ce](e),ce(this,Gt,"f")[t].push(e)}))}[_e](t,e,n,s){this[Ee](t,e,n,s,((t,e,n)=>{ce(this,Gt,"f")[t][e]=n}))}[Ae](t,e,n,s){this[Ee](t,e,n,s,((t,e,n)=>{ce(this,Gt,"f")[t][e]=(ce(this,Gt,"f")[t][e]||[]).concat(n)}))}[Ee](t,e,n,s,i){if(Array.isArray(n))n.forEach((e=>{t(e,s)}));else if((t=>"object"==typeof t)(n))for(const e of X(n))t(e,n[e]);else i(e,this[Ce](n),s)}[Ce](t){return"__proto__"===t?"___proto___":t}[ke](t,e){return this[_e](this[ke].bind(this),"key",t,e),this}[xe](){var t,e,n,s,i,r,o,a,l,c,h,f;const u=ce(this,Dt,"f").pop();let d;Q(u,void 0,ce(this,te,"f")),t=this,e=this,n=this,s=this,i=this,r=this,o=this,a=this,l=this,c=this,h=this,f=this,({options:{set value(e){le(t,Gt,e,"f")}}.value,configObjects:d,exitProcess:{set value(t){le(e,Lt,t,"f")}}.value,groups:{set value(t){le(n,Ft,t,"f")}}.value,output:{set value(t){le(s,Bt,t,"f")}}.value,exitError:{set value(t){le(i,It,t,"f")}}.value,hasOutput:{set value(t){le(r,Ht,t,"f")}}.value,parsed:this.parsed,strict:{set value(t){le(o,ee,t,"f")}}.value,strictCommands:{set value(t){le(a,ne,t,"f")}}.value,strictOptions:{set value(t){le(l,se,t,"f")}}.value,completionCommand:{set value(t){le(c,Pt,t,"f")}}.value,parseFn:{set value(t){le(h,Yt,t,"f")}}.value,parseContext:{set value(t){le(f,Kt,t,"f")}}.value}=u),ce(this,Gt,"f").configObjects=d,ce(this,ie,"f").unfreeze(),ce(this,ae,"f").unfreeze(),ce(this,kt,"f").unfreeze(),ce(this,zt,"f").unfreeze()}[Me](t,e){return lt(e,(e=>(t(e),e)))}getInternalMethods(){return{getCommandInstance:this[Se].bind(this),getContext:this[Pe].bind(this),getHasOutput:this[$e].bind(this),getLoggerInstance:this[Ie].bind(this),getParseContext:this[Ne].bind(this),getParserConfiguration:this[me].bind(this),getUsageConfiguration:this[ye].bind(this),getUsageInstance:this[We].bind(this),getValidationInstance:this[Le].bind(this),hasParseCallback:this[De].bind(this),isGlobalContext:this[ze].bind(this),postProcess:this[Fe].bind(this),reset:this[Ue].bind(this),runValidation:this[qe].bind(this),runYargsParserAndExecuteCommands:this[Re].bind(this),setHasOutput:this[Be].bind(this)}}[Se](){return ce(this,kt,"f")}[Pe](){return ce(this,Mt,"f")}[$e](){return ce(this,Ht,"f")}[Ie](){return ce(this,qt,"f")}[Ne](){return ce(this,Kt,"f")||{}}[We](){return ce(this,ie,"f")}[Le](){return ce(this,ae,"f")}[De](){return!!ce(this,Yt,"f")}[ze](){return ce(this,Rt,"f")}[Fe](t,e,n,s){if(n)return t;if(tt(t))return t;e||(t=this[he](t));return(this[me]()["parse-positional-numbers"]||void 0===this[me]()["parse-positional-numbers"])&&(t=this[we](t)),s&&(t=at(t,this,ce(this,zt,"f").getMiddleware(),!1)),t}[Ue](t={}){le(this,Gt,ce(this,Gt,"f")||{},"f");const e={};e.local=ce(this,Gt,"f").local||[],e.configObjects=ce(this,Gt,"f").configObjects||[];const n={};e.local.forEach((e=>{n[e]=!0,(t[e]||[]).forEach((t=>{n[t]=!0}))})),Object.assign(ce(this,Qt,"f"),Object.keys(ce(this,Ft,"f")).reduce(((t,e)=>{const s=ce(this,Ft,"f")[e].filter((t=>!(t in n)));return s.length>0&&(t[e]=s),t}),{})),le(this,Ft,{},"f");return["array","boolean","string","skipValidation","count","normalize","number","hiddenOptions"].forEach((t=>{e[t]=(ce(this,Gt,"f")[t]||[]).filter((t=>!n[t]))})),["narg","key","alias","default","defaultDescription","config","choices","demandedOptions","demandedCommands","deprecatedOptions"].forEach((t=>{e[t]=dt(ce(this,Gt,"f")[t],(t=>!n[t]))})),e.envPrefix=ce(this,Gt,"f").envPrefix,le(this,Gt,e,"f"),le(this,ie,ce(this,ie,"f")?ce(this,ie,"f").reset(n):mt(this,ce(this,te,"f")),"f"),le(this,ae,ce(this,ae,"f")?ce(this,ae,"f").reset(n):function(t,e,n){const s=n.y18n.__,i=n.y18n.__n,r={nonOptionCount:function(n){const s=t.getDemandedCommands(),r=n._.length+(n["--"]?n["--"].length:0)-t.getInternalMethods().getContext().commands.length;s._&&(r<s._.min||r>s._.max)&&(r<s._.min?void 0!==s._.minMsg?e.fail(s._.minMsg?s._.minMsg.replace(/\$0/g,r.toString()).replace(/\$1/,s._.min.toString()):null):e.fail(i("Not enough non-option arguments: got %s, need at least %s","Not enough non-option arguments: got %s, need at least %s",r,r.toString(),s._.min.toString())):r>s._.max&&(void 0!==s._.maxMsg?e.fail(s._.maxMsg?s._.maxMsg.replace(/\$0/g,r.toString()).replace(/\$1/,s._.max.toString()):null):e.fail(i("Too many non-option arguments: got %s, maximum of %s","Too many non-option arguments: got %s, maximum of %s",r,r.toString(),s._.max.toString()))))},positionalCount:function(t,n){n<t&&e.fail(i("Not enough non-option arguments: got %s, need at least %s","Not enough non-option arguments: got %s, need at least %s",n,n+"",t+""))},requiredArguments:function(t,n){let s=null;for(const e of Object.keys(n))Object.prototype.hasOwnProperty.call(t,e)&&void 0!==t[e]||(s=s||{},s[e]=n[e]);if(s){const t=[];for(const e of Object.keys(s)){const n=s[e];n&&t.indexOf(n)<0&&t.push(n)}const n=t.length?`\n${t.join("\n")}`:"";e.fail(i("Missing required argument: %s","Missing required arguments: %s",Object.keys(s).length,Object.keys(s).join(", ")+n))}},unknownArguments:function(n,s,o,a,l=!0){var c;const h=t.getInternalMethods().getCommandInstance().getCommands(),f=[],u=t.getInternalMethods().getContext();if(Object.keys(n).forEach((e=>{jt.includes(e)||Object.prototype.hasOwnProperty.call(o,e)||Object.prototype.hasOwnProperty.call(t.getInternalMethods().getParseContext(),e)||r.isValidAndSomeAliasIsNotNew(e,s)||f.push(e)})),l&&(u.commands.length>0||h.length>0||a)&&n._.slice(u.commands.length).forEach((t=>{h.includes(""+t)||f.push(""+t)})),l){const e=(null===(c=t.getDemandedCommands()._)||void 0===c?void 0:c.max)||0,s=u.commands.length+e;s<n._.length&&n._.slice(s).forEach((t=>{t=String(t),u.commands.includes(t)||f.includes(t)||f.push(t)}))}f.length&&e.fail(i("Unknown argument: %s","Unknown arguments: %s",f.length,f.map((t=>t.trim()?t:`"${t}"`)).join(", ")))},unknownCommands:function(n){const s=t.getInternalMethods().getCommandInstance().getCommands(),r=[],o=t.getInternalMethods().getContext();return(o.commands.length>0||s.length>0)&&n._.slice(o.commands.length).forEach((t=>{s.includes(""+t)||r.push(""+t)})),r.length>0&&(e.fail(i("Unknown command: %s","Unknown commands: %s",r.length,r.join(", "))),!0)},isValidAndSomeAliasIsNotNew:function(e,n){if(!Object.prototype.hasOwnProperty.call(n,e))return!1;const s=t.parsed.newAliases;return[e,...n[e]].some((t=>!Object.prototype.hasOwnProperty.call(s,t)||!s[e]))},limitedChoices:function(n){const i=t.getOptions(),r={};if(!Object.keys(i.choices).length)return;Object.keys(n).forEach((t=>{-1===jt.indexOf(t)&&Object.prototype.hasOwnProperty.call(i.choices,t)&&[].concat(n[t]).forEach((e=>{-1===i.choices[t].indexOf(e)&&void 0!==e&&(r[t]=(r[t]||[]).concat(e))}))}));const o=Object.keys(r);if(!o.length)return;let a=s("Invalid values:");o.forEach((t=>{a+=`\n  ${s("Argument: %s, Given: %s, Choices: %s",t,e.stringifiedValues(r[t]),e.stringifiedValues(i.choices[t]))}`})),e.fail(a)}};let o={};function a(t,e){const n=Number(e);return"number"==typeof(e=isNaN(n)?e:n)?e=t._.length>=e:e.match(/^--no-.+/)?(e=e.match(/^--no-(.+)/)[1],e=!Object.prototype.hasOwnProperty.call(t,e)):e=Object.prototype.hasOwnProperty.call(t,e),e}r.implies=function(e,s){st("<string|object> [array|number|string]",[e,s],arguments.length),"object"==typeof e?Object.keys(e).forEach((t=>{r.implies(t,e[t])})):(t.global(e),o[e]||(o[e]=[]),Array.isArray(s)?s.forEach((t=>r.implies(e,t))):(Q(s,void 0,n),o[e].push(s)))},r.getImplied=function(){return o},r.implications=function(t){const n=[];if(Object.keys(o).forEach((e=>{const s=e;(o[e]||[]).forEach((e=>{let i=s;const r=e;i=a(t,i),e=a(t,e),i&&!e&&n.push(` ${s} -> ${r}`)}))})),n.length){let t=`${s("Implications failed:")}\n`;n.forEach((e=>{t+=e})),e.fail(t)}};let l={};r.conflicts=function(e,n){st("<string|object> [array|string]",[e,n],arguments.length),"object"==typeof e?Object.keys(e).forEach((t=>{r.conflicts(t,e[t])})):(t.global(e),l[e]||(l[e]=[]),Array.isArray(n)?n.forEach((t=>r.conflicts(e,t))):l[e].push(n))},r.getConflicting=()=>l,r.conflicting=function(i){Object.keys(i).forEach((t=>{l[t]&&l[t].forEach((n=>{n&&void 0!==i[t]&&void 0!==i[n]&&e.fail(s("Arguments %s and %s are mutually exclusive",t,n))}))})),t.getInternalMethods().getParserConfiguration()["strip-dashed"]&&Object.keys(l).forEach((t=>{l[t].forEach((r=>{r&&void 0!==i[n.Parser.camelCase(t)]&&void 0!==i[n.Parser.camelCase(r)]&&e.fail(s("Arguments %s and %s are mutually exclusive",t,r))}))}))},r.recommendCommands=function(t,n){n=n.sort(((t,e)=>e.length-t.length));let i=null,r=1/0;for(let e,s=0;void 0!==(e=n[s]);s++){const n=Ot(t,e);n<=3&&n<r&&(r=n,i=e)}i&&e.fail(s("Did you mean %s?",i))},r.reset=function(t){return o=dt(o,(e=>!t[e])),l=dt(l,(e=>!t[e])),r};const c=[];return r.freeze=function(){c.push({implied:o,conflicting:l})},r.unfreeze=function(){const t=c.pop();Q(t,void 0,n),({implied:o,conflicting:l}=t)},r}(this,ce(this,ie,"f"),ce(this,te,"f")),"f"),le(this,kt,ce(this,kt,"f")?ce(this,kt,"f").reset():function(t,e,n,s){return new ht(t,e,n,s)}(ce(this,ie,"f"),ce(this,ae,"f"),ce(this,zt,"f"),ce(this,te,"f")),"f"),ce(this,St,"f")||le(this,St,function(t,e,n,s){return new wt(t,e,n,s)}(this,ce(this,ie,"f"),ce(this,kt,"f"),ce(this,te,"f")),"f"),ce(this,zt,"f").reset(),le(this,Pt,null,"f"),le(this,Bt,"","f"),le(this,It,null,"f"),le(this,Ht,!1,"f"),this.parsed=!1,this}[He](t,e){return ce(this,te,"f").path.relative(t,e)}[Re](t,e,n,s=0,i=!1){let r=!!n||i;t=t||ce(this,Zt,"f"),ce(this,Gt,"f").__=ce(this,te,"f").y18n.__,ce(this,Gt,"f").configuration=this[me]();const o=!!ce(this,Gt,"f").configuration["populate--"],a=Object.assign({},ce(this,Gt,"f").configuration,{"populate--":!0}),l=ce(this,te,"f").Parser.detailed(t,Object.assign({},ce(this,Gt,"f"),{configuration:{"parse-positional-numbers":!1,...a}})),c=Object.assign(l.argv,ce(this,Kt,"f"));let h;const f=l.aliases;let u=!1,d=!1;Object.keys(c).forEach((t=>{t===ce(this,Ut,"f")&&c[t]?u=!0:t===ce(this,oe,"f")&&c[t]&&(d=!0)})),c.$0=this.$0,this.parsed=l,0===s&&ce(this,ie,"f").clearCachedHelpMessage();try{if(this[be](),e)return this[Fe](c,o,!!n,!1);if(ce(this,Ut,"f")){[ce(this,Ut,"f")].concat(f[ce(this,Ut,"f")]||[]).filter((t=>t.length>1)).includes(""+c._[c._.length-1])&&(c._.pop(),u=!0)}le(this,Rt,!1,"f");const a=ce(this,kt,"f").getCommands(),p=ce(this,St,"f").completionKey in c,g=u||p||i;if(c._.length){if(a.length){let t;for(let e,r=s||0;void 0!==c._[r];r++){if(e=String(c._[r]),a.includes(e)&&e!==ce(this,Pt,"f")){const t=ce(this,kt,"f").runCommand(e,this,l,r+1,i,u||d||i);return this[Fe](t,o,!!n,!1)}if(!t&&e!==ce(this,Pt,"f")){t=e;break}}!ce(this,kt,"f").hasDefaultCommand()&&ce(this,Xt,"f")&&t&&!g&&ce(this,ae,"f").recommendCommands(t,a)}ce(this,Pt,"f")&&c._.includes(ce(this,Pt,"f"))&&!p&&(ce(this,Lt,"f")&&pt(!0),this.showCompletionScript(),this.exit(0))}if(ce(this,kt,"f").hasDefaultCommand()&&!g){const t=ce(this,kt,"f").runCommand(null,this,l,0,i,u||d||i);return this[Fe](t,o,!!n,!1)}if(p){ce(this,Lt,"f")&&pt(!0);const e=(t=[].concat(t)).slice(t.indexOf(`--${ce(this,St,"f").completionKey}`)+1);return ce(this,St,"f").getCompletion(e,((t,e)=>{if(t)throw new q(t.message);(e||[]).forEach((t=>{ce(this,qt,"f").log(t)})),this.exit(0)})),this[Fe](c,!o,!!n,!1)}if(ce(this,Ht,"f")||(u?(ce(this,Lt,"f")&&pt(!0),r=!0,this.showHelp("log"),this.exit(0)):d&&(ce(this,Lt,"f")&&pt(!0),r=!0,ce(this,ie,"f").showVersion("log"),this.exit(0))),!r&&ce(this,Gt,"f").skipValidation.length>0&&(r=Object.keys(c).some((t=>ce(this,Gt,"f").skipValidation.indexOf(t)>=0&&!0===c[t]))),!r){if(l.error)throw new q(l.error.message);if(!p){const t=this[qe](f,{},l.error);n||(h=at(c,this,ce(this,zt,"f").getMiddleware(),!0)),h=this[Me](t,null!=h?h:c),tt(h)&&!n&&(h=h.then((()=>at(c,this,ce(this,zt,"f").getMiddleware(),!1))))}}}catch(t){if(!(t instanceof q))throw t;ce(this,ie,"f").fail(t.message,t)}return this[Fe](null!=h?h:c,o,!!n,!0)}[qe](t,e,n,s){const i={...this.getDemandedOptions()};return r=>{if(n)throw new q(n.message);ce(this,ae,"f").nonOptionCount(r),ce(this,ae,"f").requiredArguments(r,i);let o=!1;ce(this,ne,"f")&&(o=ce(this,ae,"f").unknownCommands(r)),ce(this,ee,"f")&&!o?ce(this,ae,"f").unknownArguments(r,t,e,!!s):ce(this,se,"f")&&ce(this,ae,"f").unknownArguments(r,t,{},!1,!1),ce(this,ae,"f").limitedChoices(r),ce(this,ae,"f").implications(r),ce(this,ae,"f").conflicting(r)}}[Be](){le(this,Ht,!0,"f")}[Ge](t){if("string"==typeof t)ce(this,Gt,"f").key[t]=!0;else for(const e of t)ce(this,Gt,"f").key[e]=!0}}const Ve=(Ye=J,(t=[],e=Ye.process.cwd(),n)=>{const s=new Te(t,e,n,Ye);return Object.defineProperty(s,"argv",{get:()=>s.parse(),enumerable:!0}),s.help(),s.version(),s});var Ye;const Ke=await Ve(function(t){return t.slice(R()+1)}(t.argv)).option("issue-number",{alias:"i",description:"GitHub issue number to process",type:"number",demandOption:!0}).option("planning-model",{alias:"m",description:"LLM (OpenAI or Gemini) for planning code changes",type:"string"}).option("detailed-plan",{alias:"p",description:"Whether to generate a detailed plan to write code (increases LLM cost but improves quality)",type:"boolean",default:!0}).option("reasoning-effort",{alias:"e",description:"Constrains effort on reasoning for planning models. Supported values are low, medium, and high.",type:"string",choices:["low","medium","high"]}).option("aider-extra-args",{alias:"a",description:"Additional arguments to pass to the aider command",type:"string",default:m}).option("repomix-extra-args",{alias:"r",description:"Additional arguments for repomix when generating context",type:"string",default:y}).option("test-command",{alias:"t",description:"Command to run after Aider applies changes. If it fails, Aider will try to fix it.",type:"string"}).option("max-test-attempts",{description:"Maximum number of attempts to fix test failures",type:"number",default:b}).option("dry-run",{alias:"d",description:"Run without making actual changes (no branch creation, no PR)",type:"boolean",default:!1}).option("working-dir",{alias:"w",description:"Working directory path for commands",type:"string"}).help().argv;Ke["working-dir"]&&(t.chdir(Ke["working-dir"]),console.info(`Changed working directory to: ${t.cwd()}`)),await v({aiderExtraArgs:Ke["aider-extra-args"],dryRun:Ke["dry-run"],detailedPlan:Ke["detailed-plan"],issueNumber:Ke["issue-number"],maxTestAttempts:Ke["max-test-attempts"],planningModel:Ke["planning-model"],reasoningEffort:Ke["reasoning-effort"],repomixExtraArgs:Ke["repomix-extra-args"],testCommand:Ke["test-command"]});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
